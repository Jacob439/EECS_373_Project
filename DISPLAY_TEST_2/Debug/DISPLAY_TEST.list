
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f63c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005870  0800f800  0800f800  00010800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015070  08015070  000171f4  2**0
                  CONTENTS
  4 .ARM          00000008  08015070  08015070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015078  08015078  000171f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015078  08015078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801507c  0801507c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08015080  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001f4  08015274  000171f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  08015274  00017b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002481f  00000000  00000000  00017224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004307  00000000  00000000  0003ba43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c8  00000000  00000000  0003fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f7e9  00000000  00000000  00041f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000296ab  00000000  00000000  00071701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0012d85f  00000000  00000000  0009adac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001c860b  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001a71  00000000  00000000  001c864e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a3a0  00000000  00000000  001ca0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001d4460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f7e4 	.word	0x0800f7e4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	0800f7e4 	.word	0x0800f7e4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8000ec8:	b084      	sub	sp, #16
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	f107 0c08 	add.w	ip, r7, #8
 8000ed2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <JOYSTICK_INIT+0x2c>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2254      	movs	r2, #84	@ 0x54
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f00c fe6c 	bl	800dbbe <memcpy>
	}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eee:	b004      	add	sp, #16
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000214 	.word	0x20000214

08000ef8 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	811a      	strh	r2, [r3, #8]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2140      	movs	r1, #64	@ 0x40
 8000f2e:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <readRegister+0x78>)
 8000f30:	f005 ff94 	bl	8006e5c <HAL_I2C_Master_Transmit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <readRegister+0x7c>)
 8000f3a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	2140      	movs	r1, #64	@ 0x40
 8000f4a:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <readRegister+0x78>)
 8000f4c:	f006 f89e 	bl	800708c <HAL_I2C_Master_Receive>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <readRegister+0x7c>)
 8000f56:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <readRegister+0x7c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 8000f60:	2300      	movs	r3, #0
 8000f62:	e000      	b.n	8000f66 <readRegister+0x6e>
    }
    return buf0[0];
 8000f64:	7a3b      	ldrb	r3, [r7, #8]
  }
 8000f66:	4618      	mov	r0, r3
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000214 	.word	0x20000214
 8000f74:	20000210 	.word	0x20000210

08000f78 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f7ff ffba 	bl	8000ef8 <readRegister>
 8000f84:	4603      	mov	r3, r0
 8000f86:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f7ff ffb5 	bl	8000ef8 <readRegister>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	021a      	lsls	r2, r3, #8
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	119b      	asrs	r3, r3, #6
 8000f9c:	b29b      	uxth	r3, r3
  }
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f7ff ffa3 	bl	8000ef8 <readRegister>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	f7ff ff9e 	bl	8000ef8 <readRegister>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	021a      	lsls	r2, r3, #8
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	119b      	asrs	r3, r3, #6
 8000fca:	b29b      	uxth	r3, r3
  }
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 8000fda:	f7ff ffcd 	bl	8000f78 <getHorizontal>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 8000fe2:	f7ff ffe0 	bl	8000fa6 <getVertical>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	2bfa      	cmp	r3, #250	@ 0xfa
 8000fee:	d906      	bls.n	8000ffe <threshold+0x2a>
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d801      	bhi.n	8000ffe <threshold+0x2a>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <threshold+0x2c>
 8000ffe:	2300      	movs	r3, #0
 8001000:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	2bf9      	cmp	r3, #249	@ 0xf9
 8001006:	d804      	bhi.n	8001012 <threshold+0x3e>
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <threshold+0x3e>
		  return 1;
 800100e:	2301      	movs	r3, #1
 8001010:	e00a      	b.n	8001028 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001018:	4293      	cmp	r3, r2
 800101a:	d904      	bls.n	8001026 <threshold+0x52>
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <threshold+0x52>
		  return 2;
 8001022:	2302      	movs	r3, #2
 8001024:	e000      	b.n	8001028 <threshold+0x54>
	  }
	  return 0;
 8001026:	2300      	movs	r3, #0
  }
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    int val = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 800103a:	2120      	movs	r1, #32
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f005 fe40 	bl	8006cc4 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <RowChecker+0x1e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	e000      	b.n	8001050 <RowChecker+0x20>
 800104e:	2301      	movs	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8001052:	2140      	movs	r1, #64	@ 0x40
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f005 fe34 	bl	8006cc4 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <RowChecker+0x36>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	e000      	b.n	8001068 <RowChecker+0x38>
 8001066:	2302      	movs	r3, #2
 8001068:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001070:	f005 fe28 	bl	8006cc4 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <RowChecker+0x4e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	e000      	b.n	8001080 <RowChecker+0x50>
 800107e:	2303      	movs	r3, #3
 8001080:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 8001082:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <RowChecker+0x74>)
 8001088:	f005 fe1c 	bl	8006cc4 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <RowChecker+0x66>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	e000      	b.n	8001098 <RowChecker+0x68>
 8001096:	2304      	movs	r3, #4
 8001098:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 800109a:	687b      	ldr	r3, [r7, #4]
  }
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	48000c00 	.word	0x48000c00

080010a8 <keypad_init>:

void keypad_init(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <keypad_init+0x38>)
 80010b4:	f005 fe1e 	bl	8006cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <keypad_init+0x3c>)
 80010c0:	f005 fe18 	bl	8006cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <keypad_init+0x38>)
 80010cc:	f005 fe12 	bl	8006cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <keypad_init+0x3c>)
 80010d8:	f005 fe0c 	bl	8006cf4 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	48001000 	.word	0x48001000
 80010e4:	48001400 	.word	0x48001400

080010e8 <KeyPadReturn>:



  uint8_t KeyPadReturn(int row, int col) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
    if (row == 0) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <KeyPadReturn+0x14>
      return 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e083      	b.n	8001204 <KeyPadReturn+0x11c>
    }
    HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f004 f9cd 	bl	800549c <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 8001102:	bf00      	nop
 8001104:	f7ff ff94 	bl	8001030 <RowChecker>
 8001108:	4602      	mov	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4293      	cmp	r3, r2
 800110e:	d0f9      	beq.n	8001104 <KeyPadReturn+0x1c>
    }
    HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f004 f9c3 	bl	800549c <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	493b      	ldr	r1, [pc, #236]	@ (800120c <KeyPadReturn+0x124>)
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	440a      	add	r2, r1
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	73bb      	strb	r3, [r7, #14]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b23      	cmp	r3, #35	@ 0x23
 800112e:	d12a      	bne.n	8001186 <KeyPadReturn+0x9e>
    	// Go to main display
      if (weightCounter == 0) {
 8001130:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <KeyPadReturn+0x128>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <KeyPadReturn+0x54>
        // If there is no value for weight, just return
        return 0;
 8001138:	2300      	movs	r3, #0
 800113a:	e063      	b.n	8001204 <KeyPadReturn+0x11c>
      }
      // print the weight or height
      printf("End ASCII value: ");
 800113c:	4835      	ldr	r0, [pc, #212]	@ (8001214 <KeyPadReturn+0x12c>)
 800113e:	f00c fc51 	bl	800d9e4 <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e009      	b.n	800115c <KeyPadReturn+0x74>
        // print the values here
        printf("%x ", ASCII_Weight[i]);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	4a33      	ldr	r2, [pc, #204]	@ (8001218 <KeyPadReturn+0x130>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	4619      	mov	r1, r3
 8001150:	4832      	ldr	r0, [pc, #200]	@ (800121c <KeyPadReturn+0x134>)
 8001152:	f00c fc47 	bl	800d9e4 <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <KeyPadReturn+0x128>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3f0      	bcc.n	8001148 <KeyPadReturn+0x60>
      }
      printf("\n");
 8001166:	200a      	movs	r0, #10
 8001168:	f00c fc4e 	bl	800da08 <putchar>
      weightCounter = 0;
 800116c:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <KeyPadReturn+0x128>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	234e      	movs	r3, #78	@ 0x4e
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	2138      	movs	r1, #56	@ 0x38
 800117c:	2032      	movs	r0, #50	@ 0x32
 800117e:	f000 fa89 	bl	8001694 <LCD_Fill>
      return 1;
 8001182:	2301      	movs	r3, #1
 8001184:	e03e      	b.n	8001204 <KeyPadReturn+0x11c>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	2b2a      	cmp	r3, #42	@ 0x2a
 800118a:	d006      	beq.n	800119a <KeyPadReturn+0xb2>
 800118c:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <KeyPadReturn+0x128>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	2305      	movs	r3, #5
 8001194:	3b02      	subs	r3, #2
 8001196:	429a      	cmp	r2, r3
 8001198:	d10c      	bne.n	80011b4 <KeyPadReturn+0xcc>
    	// Wipe screen
    	LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
 800119a:	2300      	movs	r3, #0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	234e      	movs	r3, #78	@ 0x4e
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	2138      	movs	r1, #56	@ 0x38
 80011a4:	2032      	movs	r0, #50	@ 0x32
 80011a6:	f000 fa75 	bl	8001694 <LCD_Fill>
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <KeyPadReturn+0x128>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
      return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e027      	b.n	8001204 <KeyPadReturn+0x11c>
    }
    printf("ASCII value: %x\n", ASCII_Value);
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4819      	ldr	r0, [pc, #100]	@ (8001220 <KeyPadReturn+0x138>)
 80011ba:	f00c fc13 	bl	800d9e4 <iprintf>
    LCD_PutChar(50 + weightCounter*20, 56, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <KeyPadReturn+0x128>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3332      	adds	r3, #50	@ 0x32
 80011ce:	b298      	uxth	r0, r3
 80011d0:	7bba      	ldrb	r2, [r7, #14]
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <KeyPadReturn+0x13c>)
 80011de:	2138      	movs	r1, #56	@ 0x38
 80011e0:	f000 fb1e 	bl	8001820 <LCD_PutChar>
    UG_FontSetTransparency(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f002 fe05 	bl	8003df4 <UG_FontSetTransparency>
    ASCII_Weight[weightCounter] = ASCII_Value;
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <KeyPadReturn+0x128>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4a09      	ldr	r2, [pc, #36]	@ (8001218 <KeyPadReturn+0x130>)
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	5453      	strb	r3, [r2, r1]
    weightCounter++;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <KeyPadReturn+0x128>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <KeyPadReturn+0x128>)
 8001200:	701a      	strb	r2, [r3, #0]
    return 0;
 8001202:	2300      	movs	r3, #0
  }
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	2000026d 	.word	0x2000026d
 8001214:	0800f800 	.word	0x0800f800
 8001218:	20000268 	.word	0x20000268
 800121c:	0800f814 	.word	0x0800f814
 8001220:	0800f818 	.word	0x0800f818
 8001224:	0800f838 	.word	0x0800f838

08001228 <running>:

  void running(){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	  uint8_t finished = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  while (!finished) {
 8001236:	e05c      	b.n	80012f2 <running+0xca>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123e:	4833      	ldr	r0, [pc, #204]	@ (800130c <running+0xe4>)
 8001240:	f005 fd58 	bl	8006cf4 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001244:	f7ff fef4 	bl	8001030 <RowChecker>
 8001248:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4);
 800124a:	2104      	movs	r1, #4
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ff4b 	bl	80010e8 <KeyPadReturn>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800125c:	482b      	ldr	r0, [pc, #172]	@ (800130c <running+0xe4>)
 800125e:	f005 fd49 	bl	8006cf4 <HAL_GPIO_WritePin>
      if (finished) return;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d148      	bne.n	80012fa <running+0xd2>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800126e:	4828      	ldr	r0, [pc, #160]	@ (8001310 <running+0xe8>)
 8001270:	f005 fd40 	bl	8006cf4 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001274:	f7ff fedc 	bl	8001030 <RowChecker>
 8001278:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3);
 800127a:	2103      	movs	r1, #3
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ff33 	bl	80010e8 <KeyPadReturn>
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800128c:	4820      	ldr	r0, [pc, #128]	@ (8001310 <running+0xe8>)
 800128e:	f005 fd31 	bl	8006cf4 <HAL_GPIO_WritePin>
      if (finished) return;
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d132      	bne.n	80012fe <running+0xd6>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129e:	481c      	ldr	r0, [pc, #112]	@ (8001310 <running+0xe8>)
 80012a0:	f005 fd28 	bl	8006cf4 <HAL_GPIO_WritePin>
      val = RowChecker();
 80012a4:	f7ff fec4 	bl	8001030 <RowChecker>
 80012a8:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2);
 80012aa:	2102      	movs	r1, #2
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff ff1b 	bl	80010e8 <KeyPadReturn>
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012bc:	4814      	ldr	r0, [pc, #80]	@ (8001310 <running+0xe8>)
 80012be:	f005 fd19 	bl	8006cf4 <HAL_GPIO_WritePin>
      if (finished) return;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d11c      	bne.n	8001302 <running+0xda>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <running+0xe4>)
 80012d0:	f005 fd10 	bl	8006cf4 <HAL_GPIO_WritePin>
      val = RowChecker();
 80012d4:	f7ff feac 	bl	8001030 <RowChecker>
 80012d8:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1);
 80012da:	2101      	movs	r1, #1
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff ff03 	bl	80010e8 <KeyPadReturn>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ec:	4807      	ldr	r0, [pc, #28]	@ (800130c <running+0xe4>)
 80012ee:	f005 fd01 	bl	8006cf4 <HAL_GPIO_WritePin>
  while (!finished) {
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d09f      	beq.n	8001238 <running+0x10>
 80012f8:	e004      	b.n	8001304 <running+0xdc>
      if (finished) return;
 80012fa:	bf00      	nop
 80012fc:	e002      	b.n	8001304 <running+0xdc>
      if (finished) return;
 80012fe:	bf00      	nop
 8001300:	e000      	b.n	8001304 <running+0xdc>
      if (finished) return;
 8001302:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  }
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	48001400 	.word	0x48001400
 8001310:	48001000 	.word	0x48001000

08001314 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <setSPI_Size+0x74>)
 8001320:	f993 3000 	ldrsb.w	r3, [r3]
 8001324:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001328:	429a      	cmp	r2, r3
 800132a:	d027      	beq.n	800137c <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <setSPI_Size+0x78>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <setSPI_Size+0x78>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800133a:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <setSPI_Size+0x74>)
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10c      	bne.n	8001364 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <setSPI_Size+0x78>)
 800134c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001350:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <setSPI_Size+0x78>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <setSPI_Size+0x78>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001360:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 8001362:	e00b      	b.n	800137c <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <setSPI_Size+0x78>)
 8001366:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800136a:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <setSPI_Size+0x78>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <setSPI_Size+0x78>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000010 	.word	0x20000010
 800138c:	200007e8 	.word	0x200007e8

08001390 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ffb9 	bl	8001314 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a8:	4815      	ldr	r0, [pc, #84]	@ (8001400 <LCD_WriteCommand+0x70>)
 80013aa:	f005 fca3 	bl	8006cf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b4:	4812      	ldr	r0, [pc, #72]	@ (8001400 <LCD_WriteCommand+0x70>)
 80013b6:	f005 fc9d 	bl	8006cf4 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4810      	ldr	r0, [pc, #64]	@ (8001404 <LCD_WriteCommand+0x74>)
 80013c4:	f009 fcc6 	bl	800ad54 <HAL_SPI_Transmit>
	  if (argc) {
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00e      	beq.n	80013ec <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d4:	480a      	ldr	r0, [pc, #40]	@ (8001400 <LCD_WriteCommand+0x70>)
 80013d6:	f005 fc8d 	bl	8006cf4 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	1c59      	adds	r1, r3, #1
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	4807      	ldr	r0, [pc, #28]	@ (8001404 <LCD_WriteCommand+0x74>)
 80013e8:	f009 fcb4 	bl	800ad54 <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <LCD_WriteCommand+0x70>)
 80013f4:	f005 fc7e 	bl	8006cf4 <HAL_GPIO_WritePin>
	}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	48001000 	.word	0x48001000
 8001404:	200007e8 	.word	0x200007e8

08001408 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001418:	4814      	ldr	r0, [pc, #80]	@ (800146c <LCD_WriteData+0x64>)
 800141a:	f005 fc6b 	bl	8006cf4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001424:	4811      	ldr	r0, [pc, #68]	@ (800146c <LCD_WriteData+0x64>)
 8001426:	f005 fc65 	bl	8006cf4 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800142a:	e011      	b.n	8001450 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001432:	4293      	cmp	r3, r2
 8001434:	bf28      	it	cs
 8001436:	4613      	movcs	r3, r2
 8001438:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800143a:	89fa      	ldrh	r2, [r7, #14]
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <LCD_WriteData+0x68>)
 8001444:	f009 fc86 	bl	800ad54 <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ea      	bne.n	800142c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <LCD_WriteData+0x64>)
 800145e:	f005 fc49 	bl	8006cf4 <HAL_GPIO_WritePin>
#endif
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	48001000 	.word	0x48001000
 8001470:	200007e8 	.word	0x200007e8

08001474 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b08b      	sub	sp, #44	@ 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	4603      	mov	r3, r0
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	84bb      	strh	r3, [r7, #36]	@ 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800149e:	883b      	ldrh	r3, [r7, #0]
 80014a0:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80014a2:	232a      	movs	r3, #42	@ 0x2a
 80014a4:	763b      	strb	r3, [r7, #24]
 80014a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80014aa:	121b      	asrs	r3, r3, #8
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	767b      	strb	r3, [r7, #25]
 80014b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	76bb      	strb	r3, [r7, #26]
 80014b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014bc:	121b      	asrs	r3, r3, #8
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	76fb      	strb	r3, [r7, #27]
 80014c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	2104      	movs	r1, #4
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80014d6:	232b      	movs	r3, #43	@ 0x2b
 80014d8:	743b      	strb	r3, [r7, #16]
 80014da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80014de:	121b      	asrs	r3, r3, #8
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	747b      	strb	r3, [r7, #17]
 80014e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	74bb      	strb	r3, [r7, #18]
 80014ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014f0:	121b      	asrs	r3, r3, #8
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	74fb      	strb	r3, [r7, #19]
 80014f8:	8c3b      	ldrh	r3, [r7, #32]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2104      	movs	r1, #4
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff43 	bl	8001390 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800150a:	232c      	movs	r3, #44	@ 0x2c
 800150c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff3b 	bl	8001390 <LCD_WriteCommand>
  }
}
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
	...

08001524 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	460b      	mov	r3, r1
 8001530:	80bb      	strh	r3, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db39      	blt.n	80015b2 <LCD_DrawPixel+0x8e>
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	2bef      	cmp	r3, #239	@ 0xef
 8001544:	dc35      	bgt.n	80015b2 <LCD_DrawPixel+0x8e>
 8001546:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db31      	blt.n	80015b2 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800154e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001552:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001556:	da2c      	bge.n	80015b2 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	733b      	strb	r3, [r7, #12]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001568:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800156c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001570:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001574:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001578:	f7ff ff7c 	bl	8001474 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001582:	480e      	ldr	r0, [pc, #56]	@ (80015bc <LCD_DrawPixel+0x98>)
 8001584:	f005 fbb6 	bl	8006cf4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <LCD_DrawPixel+0x98>)
 8001590:	f005 fbb0 	bl	8006cf4 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001594:	f107 010c 	add.w	r1, r7, #12
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2202      	movs	r2, #2
 800159e:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <LCD_DrawPixel+0x9c>)
 80015a0:	f009 fbd8 	bl	800ad54 <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015aa:	4804      	ldr	r0, [pc, #16]	@ (80015bc <LCD_DrawPixel+0x98>)
 80015ac:	f005 fba2 	bl	8006cf4 <HAL_GPIO_WritePin>
 80015b0:	e000      	b.n	80015b4 <LCD_DrawPixel+0x90>
    return;
 80015b2:	bf00      	nop
#endif
}
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	48001000 	.word	0x48001000
 80015c0:	200007e8 	.word	0x200007e8

080015c4 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b094      	sub	sp, #80	@ 0x50
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80015d0:	2300      	movs	r3, #0
 80015d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015d4:	e009      	b.n	80015ea <LCD_FillPixels+0x26>
      fill[t]=color;
 80015d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	3350      	adds	r3, #80	@ 0x50
 80015dc:	443b      	add	r3, r7
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80015e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015e6:	3301      	adds	r3, #1
 80015e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	bf28      	it	cs
 80015f0:	2320      	movcs	r3, #32
 80015f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3ee      	bcc.n	80015d6 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 80015f8:	e00e      	b.n	8001618 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	bf28      	it	cs
 8001600:	2320      	movcs	r3, #32
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fefc 	bl	8001408 <LCD_WriteData>
      pixels-=sz;
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ed      	bne.n	80015fa <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	@ 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4604      	mov	r4, r0
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4623      	mov	r3, r4
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	4603      	mov	r3, r0
 800163c:	80bb      	strh	r3, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164e:	d104      	bne.n	800165a <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fe5f 	bl	8001314 <setSPI_Size>
#endif
    return NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	e013      	b.n	8001682 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800165a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800165e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001662:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001666:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800166a:	f7ff ff03 	bl	8001474 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fe50 	bl	8001314 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800167a:	4804      	ldr	r0, [pc, #16]	@ (800168c <LCD_FillArea+0x64>)
 800167c:	f005 fb3a 	bl	8006cf4 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <LCD_FillArea+0x68>)
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	48001000 	.word	0x48001000
 8001690:	080015c5 	.word	0x080015c5

08001694 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	80fb      	strh	r3, [r7, #6]
 80016a6:	4603      	mov	r3, r0
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	807b      	strh	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	883a      	ldrh	r2, [r7, #0]
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80016ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016da:	f7ff fecb 	bl	8001474 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fe18 	bl	8001314 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 80016e4:	8c3b      	ldrh	r3, [r7, #32]
 80016e6:	4619      	mov	r1, r3
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff ff6b 	bl	80015c4 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe10 	bl	8001314 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}

080016fe <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	603a      	str	r2, [r7, #0]
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	460b      	mov	r3, r1
 800170c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	889b      	ldrh	r3, [r3, #4]
 8001712:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	88db      	ldrh	r3, [r3, #6]
 8001718:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2bef      	cmp	r3, #239	@ 0xef
 800171e:	d837      	bhi.n	8001790 <LCD_DrawImage+0x92>
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001726:	d233      	bcs.n	8001790 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	4413      	add	r3, r2
 800172e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001730:	dc30      	bgt.n	8001794 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001732:	88ba      	ldrh	r2, [r7, #4]
 8001734:	89bb      	ldrh	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800173c:	dc2c      	bgt.n	8001798 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	7a1b      	ldrb	r3, [r3, #8]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d12a      	bne.n	800179c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001746:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800174a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	4413      	add	r3, r2
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21c      	sxth	r4, r3
 800175c:	88ba      	ldrh	r2, [r7, #4]
 800175e:	89bb      	ldrh	r3, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	b21b      	sxth	r3, r3
 800176a:	4622      	mov	r2, r4
 800176c:	f7ff fe82 	bl	8001474 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff fdcf 	bl	8001314 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	89fb      	ldrh	r3, [r7, #14]
 800177c:	89ba      	ldrh	r2, [r7, #12]
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff fe40 	bl	8001408 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fdc3 	bl	8001314 <setSPI_Size>
 800178e:	e006      	b.n	800179e <LCD_DrawImage+0xa0>
    return;
 8001790:	bf00      	nop
 8001792:	e004      	b.n	800179e <LCD_DrawImage+0xa0>
    return;
 8001794:	bf00      	nop
 8001796:	e002      	b.n	800179e <LCD_DrawImage+0xa0>
    return;
 8001798:	bf00      	nop
 800179a:	e000      	b.n	800179e <LCD_DrawImage+0xa0>
    return;
 800179c:	bf00      	nop
#endif
  }
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	4604      	mov	r4, r0
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	80fb      	strh	r3, [r7, #6]
 80017b6:	4603      	mov	r3, r0
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	807b      	strh	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d10a      	bne.n	80017e0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80017ca:	88ba      	ldrh	r2, [r7, #4]
 80017cc:	883b      	ldrh	r3, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d918      	bls.n	8001804 <LCD_DrawLine+0x60>
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	81bb      	strh	r3, [r7, #12]
 80017d6:	883b      	ldrh	r3, [r7, #0]
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	89bb      	ldrh	r3, [r7, #12]
 80017dc:	803b      	strh	r3, [r7, #0]
 80017de:	e011      	b.n	8001804 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80017e0:	88ba      	ldrh	r2, [r7, #4]
 80017e2:	883b      	ldrh	r3, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d10a      	bne.n	80017fe <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d909      	bls.n	8001804 <LCD_DrawLine+0x60>
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	81fb      	strh	r3, [r7, #14]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	80fb      	strh	r3, [r7, #6]
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	e002      	b.n	8001804 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001804:	883c      	ldrh	r4, [r7, #0]
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	88b9      	ldrh	r1, [r7, #4]
 800180a:	88f8      	ldrh	r0, [r7, #6]
 800180c:	8c3b      	ldrh	r3, [r7, #32]
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4623      	mov	r3, r4
 8001812:	f7ff ff3f 	bl	8001694 <LCD_Fill>
  return UG_RESULT_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}

08001820 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af02      	add	r7, sp, #8
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	4603      	mov	r3, r0
 800182a:	81fb      	strh	r3, [r7, #14]
 800182c:	460b      	mov	r3, r1
 800182e:	81bb      	strh	r3, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f002 f853 	bl	80038e0 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	b298      	uxth	r0, r3
 800183e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001842:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001846:	8c3c      	ldrh	r4, [r7, #32]
 8001848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4623      	mov	r3, r4
 800184e:	f002 fa49 	bl	8003ce4 <UG_PutChar>
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}

0800185a <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4603      	mov	r3, r0
 8001866:	81fb      	strh	r3, [r7, #14]
 8001868:	460b      	mov	r3, r1
 800186a:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f002 f837 	bl	80038e0 <UG_FontSelect>
  UG_SetForecolor(color);
 8001872:	8b3b      	ldrh	r3, [r7, #24]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fa71 	bl	8003d5c <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800187a:	8bbb      	ldrh	r3, [r7, #28]
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fa7f 	bl	8003d80 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001886:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 f991 	bl	8003bb4 <UG_PutString>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <LCD_setPower+0x14>
 80018aa:	2329      	movs	r3, #41	@ 0x29
 80018ac:	e000      	b.n	80018b0 <LCD_setPower+0x16>
 80018ae:	2328      	movs	r3, #40	@ 0x28
 80018b0:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fd69 	bl	8001390 <LCD_WriteCommand>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <LCD_Update>:

static void LCD_Update(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fd22 	bl	8001314 <setSPI_Size>
  #endif
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e0:	4829      	ldr	r0, [pc, #164]	@ (8001988 <LCD_init+0xb4>)
 80018e2:	f005 fa07 	bl	8006cf4 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	4827      	ldr	r0, [pc, #156]	@ (8001988 <LCD_init+0xb4>)
 80018ec:	f005 fa02 	bl	8006cf4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f003 fdd3 	bl	800549c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2180      	movs	r1, #128	@ 0x80
 80018fa:	4823      	ldr	r0, [pc, #140]	@ (8001988 <LCD_init+0xb4>)
 80018fc:	f005 f9fa 	bl	8006cf4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001900:	20c8      	movs	r0, #200	@ 0xc8
 8001902:	f003 fdcb 	bl	800549c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001906:	4921      	ldr	r1, [pc, #132]	@ (800198c <LCD_init+0xb8>)
 8001908:	4821      	ldr	r0, [pc, #132]	@ (8001990 <LCD_init+0xbc>)
 800190a:	f001 ff4f 	bl	80037ac <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800190e:	4921      	ldr	r1, [pc, #132]	@ (8001994 <LCD_init+0xc0>)
 8001910:	2000      	movs	r0, #0
 8001912:	f003 fadb 	bl	8004ecc <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001916:	4920      	ldr	r1, [pc, #128]	@ (8001998 <LCD_init+0xc4>)
 8001918:	2001      	movs	r0, #1
 800191a:	f003 fad7 	bl	8004ecc <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800191e:	491f      	ldr	r1, [pc, #124]	@ (800199c <LCD_init+0xc8>)
 8001920:	2002      	movs	r0, #2
 8001922:	f003 fad3 	bl	8004ecc <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001926:	491e      	ldr	r1, [pc, #120]	@ (80019a0 <LCD_init+0xcc>)
 8001928:	2003      	movs	r0, #3
 800192a:	f003 facf 	bl	8004ecc <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800192e:	2000      	movs	r0, #0
 8001930:	f002 fa38 	bl	8003da4 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001934:	2000      	movs	r0, #0
 8001936:	f002 fa49 	bl	8003dcc <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 800193a:	2300      	movs	r3, #0
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	e013      	b.n	8001968 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	3301      	adds	r3, #1
 8001944:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <LCD_init+0xd0>)
 8001946:	441a      	add	r2, r3
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <LCD_init+0xd0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff fd1d 	bl	8001390 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <LCD_init+0xd0>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	461a      	mov	r2, r3
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	3302      	adds	r3, #2
 8001966:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2b4b      	cmp	r3, #75	@ 0x4b
 800196c:	d9e8      	bls.n	8001940 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 800196e:	2000      	movs	r0, #0
 8001970:	f001 ffc6 	bl	8003900 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ff90 	bl	800189a <LCD_setPower>
  UG_Update();
 800197a:	f003 fac9 	bl	8004f10 <UG_Update>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	48001000 	.word	0x48001000
 800198c:	20000014 	.word	0x20000014
 8001990:	20000270 	.word	0x20000270
 8001994:	080017a5 	.word	0x080017a5
 8001998:	08001695 	.word	0x08001695
 800199c:	08001629 	.word	0x08001629
 80019a0:	080016ff 	.word	0x080016ff
 80019a4:	08014c28 	.word	0x08014c28

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b095      	sub	sp, #84	@ 0x54
 80019ac:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 80019ae:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa8 <main+0x100>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa8 <main+0x100>)
 80019b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 80019ba:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <main+0x104>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 80019c0:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <main+0x104>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f003 fcf4 	bl	80053b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 f877 	bl	8001abc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019ce:	f000 f8d7 	bl	8001b80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d2:	f000 ff09 	bl	80027e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019d6:	f000 f907 	bl	8001be8 <MX_ADC1_Init>
  MX_CAN1_Init();
 80019da:	f000 f969 	bl	8001cb0 <MX_CAN1_Init>
  MX_COMP1_Init();
 80019de:	f000 f99b 	bl	8001d18 <MX_COMP1_Init>
  MX_COMP2_Init();
 80019e2:	f000 f9c7 	bl	8001d74 <MX_COMP2_Init>
  MX_I2C1_Init();
 80019e6:	f000 f9f1 	bl	8001dcc <MX_I2C1_Init>
  MX_I2C2_SMBUS_Init();
 80019ea:	f000 fa2f 	bl	8001e4c <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 80019ee:	f000 fa6f 	bl	8001ed0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80019f2:	f000 fab9 	bl	8001f68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019f6:	f000 fb05 	bl	8002004 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80019fa:	f000 fb4f 	bl	800209c <MX_SAI1_Init>
  MX_SAI2_Init();
 80019fe:	f000 fbe5 	bl	80021cc <MX_SAI2_Init>
  MX_SPI3_Init();
 8001a02:	f000 fc4b 	bl	800229c <MX_SPI3_Init>
  MX_TIM1_Init();
 8001a06:	f000 fc87 	bl	8002318 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a0a:	f000 fd3d 	bl	8002488 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a0e:	f000 fd9f 	bl	8002550 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a12:	f000 fe03 	bl	800261c <MX_TIM4_Init>
  MX_TIM15_Init();
 8001a16:	f000 fe5b 	bl	80026d0 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8001a1a:	f000 fedd 	bl	80027d8 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
LCD_init();
 8001a1e:	f7ff ff59 	bl	80018d4 <LCD_init>
keypad_init();
 8001a22:	f7ff fb41 	bl	80010a8 <keypad_init>
JOYSTICK_INIT(hi2c1);
 8001a26:	4c22      	ldr	r4, [pc, #136]	@ (8001ab0 <main+0x108>)
 8001a28:	4668      	mov	r0, sp
 8001a2a:	f104 0310 	add.w	r3, r4, #16
 8001a2e:	2244      	movs	r2, #68	@ 0x44
 8001a30:	4619      	mov	r1, r3
 8001a32:	f00c f8c4 	bl	800dbbe <memcpy>
 8001a36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a3a:	f7ff fa45 	bl	8000ec8 <JOYSTICK_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = weight input view
uint8_t current_viewport = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states\

	  uint8_t lr = threshold();
 8001a42:	f7ff fac7 	bl	8000fd4 <threshold>
 8001a46:	4603      	mov	r3, r0
 8001a48:	71bb      	strb	r3, [r7, #6]
	  // Toggle current_viewport
	  if (lr != 0) {
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <main+0xc6>
		  current_viewport = current_viewport ? 0 : 1;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	71fb      	strb	r3, [r7, #7]
		  // Clear dirty parts of the screen
		  LCD_Fill(50, 56, 240, 50+28, C_BLACK);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	234e      	movs	r3, #78	@ 0x4e
 8001a64:	22f0      	movs	r2, #240	@ 0xf0
 8001a66:	2138      	movs	r1, #56	@ 0x38
 8001a68:	2032      	movs	r0, #50	@ 0x32
 8001a6a:	f7ff fe13 	bl	8001694 <LCD_Fill>
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0) {
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d110      	bne.n	8001a96 <main+0xee>
		  UG_FontSetTransparency(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f002 f9bd 	bl	8003df4 <UG_FontSetTransparency>
		  LCD_PutStr(50, 56, "Runner Data", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <main+0x10c>)
 8001a86:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <main+0x110>)
 8001a88:	2138      	movs	r1, #56	@ 0x38
 8001a8a:	2032      	movs	r0, #50	@ 0x32
 8001a8c:	f7ff fee5 	bl	800185a <LCD_PutStr>
		  HAL_Delay(100);
 8001a90:	2064      	movs	r0, #100	@ 0x64
 8001a92:	f003 fd03 	bl	800549c <HAL_Delay>
	  }

	  // WEIGHT INPUT
	  if (current_viewport == 1) {
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d1d2      	bne.n	8001a42 <main+0x9a>
		  running();
 8001a9c:	f7ff fbc4 	bl	8001228 <running>
		  // Go back to runner screen
		  current_viewport = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  {
 8001aa4:	e7cd      	b.n	8001a42 <main+0x9a>
 8001aa6:	bf00      	nop
 8001aa8:	e000edf0 	.word	0xe000edf0
 8001aac:	e0001000 	.word	0xe0001000
 8001ab0:	200003cc 	.word	0x200003cc
 8001ab4:	0800f838 	.word	0x0800f838
 8001ab8:	0800f82c 	.word	0x0800f82c

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b096      	sub	sp, #88	@ 0x58
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2244      	movs	r2, #68	@ 0x44
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00b ffe7 	bl	800da9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ade:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ae2:	f005 ff23 	bl	800792c <HAL_PWREx_ControlVoltageScaling>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001aec:	f000 ffae 	bl	8002a4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001af0:	f005 feec 	bl	80078cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <SystemClock_Config+0xc0>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afa:	4a20      	ldr	r2, [pc, #128]	@ (8001b7c <SystemClock_Config+0xc0>)
 8001afc:	f023 0318 	bic.w	r3, r3, #24
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b04:	2314      	movs	r3, #20
 8001b06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b14:	2360      	movs	r3, #96	@ 0x60
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001b24:	2310      	movs	r3, #16
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 ffab 	bl	8007a94 <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b44:	f000 ff82 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4618      	mov	r0, r3
 8001b62:	f006 fbb1 	bl	80082c8 <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b6c:	f000 ff6e 	bl	8002a4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b70:	f008 f8ba 	bl	8009ce8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b74:	bf00      	nop
 8001b76:	3758      	adds	r7, #88	@ 0x58
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000

08001b80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0a6      	sub	sp, #152	@ 0x98
 8001b84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2294      	movs	r2, #148	@ 0x94
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b ff86 	bl	800da9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8001b92:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001b96:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ba0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ba8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bac:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001bb6:	2318      	movs	r3, #24
 8001bb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <PeriphCommonClock_Config+0x64>)
 8001bc8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f006 fe39 	bl	8008844 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001bd8:	f000 ff38 	bl	8002a4c <Error_Handler>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3798      	adds	r7, #152	@ 0x98
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	01110000 	.word	0x01110000

08001be8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c00:	4a29      	ldr	r2, [pc, #164]	@ (8001ca8 <MX_ADC1_Init+0xc0>)
 8001c02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c16:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c22:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c42:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c48:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c5e:	4811      	ldr	r0, [pc, #68]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c60:	f003 fde0 	bl	8005824 <HAL_ADC_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001c6a:	f000 feef 	bl	8002a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <MX_ADC1_Init+0xc4>)
 8001c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c72:	2306      	movs	r3, #6
 8001c74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c7a:	237f      	movs	r3, #127	@ 0x7f
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <MX_ADC1_Init+0xbc>)
 8001c8c:	f003 ff10 	bl	8005ab0 <HAL_ADC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c96:	f000 fed9 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200002e4 	.word	0x200002e4
 8001ca8:	50040000 	.word	0x50040000
 8001cac:	04300002 	.word	0x04300002

08001cb0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <MX_CAN1_Init+0x64>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	@ (8001d10 <MX_CAN1_Init+0x60>)
 8001cfe:	f004 fad3 	bl	80062a8 <HAL_CAN_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001d08:	f000 fea0 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000034c 	.word	0x2000034c
 8001d14:	40006400 	.word	0x40006400

08001d18 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d1e:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <MX_COMP1_Init+0x54>)
 8001d20:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <MX_COMP1_Init+0x58>)
 8001d26:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <MX_COMP1_Init+0x50>)
 8001d54:	f004 fc4c 	bl	80065f0 <HAL_COMP_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001d5e:	f000 fe75 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000374 	.word	0x20000374
 8001d6c:	40010200 	.word	0x40010200
 8001d70:	00800030 	.word	0x00800030

08001d74 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d7a:	4a13      	ldr	r2, [pc, #76]	@ (8001dc8 <MX_COMP2_Init+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d80:	2270      	movs	r2, #112	@ 0x70
 8001d82:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <MX_COMP2_Init+0x50>)
 8001db0:	f004 fc1e 	bl	80065f0 <HAL_COMP_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001dba:	f000 fe47 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200003a0 	.word	0x200003a0
 8001dc8:	40010204 	.word	0x40010204

08001dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e44 <MX_I2C1_Init+0x78>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <MX_I2C1_Init+0x7c>)
 8001dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e06:	480e      	ldr	r0, [pc, #56]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001e08:	f004 ff8c 	bl	8006d24 <HAL_I2C_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e12:	f000 fe1b 	bl	8002a4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4809      	ldr	r0, [pc, #36]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001e1a:	f005 fcbf 	bl	800779c <HAL_I2CEx_ConfigAnalogFilter>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e24:	f000 fe12 	bl	8002a4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_I2C1_Init+0x74>)
 8001e2c:	f005 fd01 	bl	8007832 <HAL_I2CEx_ConfigDigitalFilter>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e36:	f000 fe09 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200003cc 	.word	0x200003cc
 8001e44:	40005400 	.word	0x40005400
 8001e48:	00707cbb 	.word	0x00707cbb

08001e4c <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <MX_I2C2_SMBUS_Init+0x7c>)
 8001e54:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <MX_I2C2_SMBUS_Init+0x80>)
 8001e5a:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001e80:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001e9a:	f248 1286 	movw	r2, #33158	@ 0x8186
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8001ea0:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001ea2:	f008 fda9 	bl	800a9f8 <HAL_SMBUS_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001eac:	f000 fdce 	bl	8002a4c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	@ (8001ec4 <MX_I2C2_SMBUS_Init+0x78>)
 8001eb2:	f008 fe59 	bl	800ab68 <HAL_SMBUS_EnableAlert_IT>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001ebc:	f000 fdc6 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000420 	.word	0x20000420
 8001ec8:	40005800 	.word	0x40005800
 8001ecc:	00707cbb 	.word	0x00707cbb

08001ed0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001ed6:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <MX_LPUART1_UART_Init+0x94>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001f12:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f18:	4811      	ldr	r0, [pc, #68]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f1a:	f00a f89d 	bl	800c058 <HAL_UART_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f24:	f000 fd92 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f2c:	f00a fec0 	bl	800ccb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f36:	f000 fd89 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f3e:	f00a fef5 	bl	800cd2c <HAL_UARTEx_SetRxFifoThreshold>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f48:	f000 fd80 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	@ (8001f60 <MX_LPUART1_UART_Init+0x90>)
 8001f4e:	f00a fe76 	bl	800cc3e <HAL_UARTEx_DisableFifoMode>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f000 fd78 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000470 	.word	0x20000470
 8001f64:	40008000 	.word	0x40008000

08001f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f6e:	4a24      	ldr	r2, [pc, #144]	@ (8002000 <MX_USART2_UART_Init+0x98>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f72:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f94:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f98:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb2:	4812      	ldr	r0, [pc, #72]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fb4:	f00a f850 	bl	800c058 <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001fbe:	f000 fd45 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	480d      	ldr	r0, [pc, #52]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fc6:	f00a fe73 	bl	800ccb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001fd0:	f000 fd3c 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4809      	ldr	r0, [pc, #36]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fd8:	f00a fea8 	bl	800cd2c <HAL_UARTEx_SetRxFifoThreshold>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001fe2:	f000 fd33 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <MX_USART2_UART_Init+0x94>)
 8001fe8:	f00a fe29 	bl	800cc3e <HAL_UARTEx_DisableFifoMode>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001ff2:	f000 fd2b 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000504 	.word	0x20000504
 8002000:	40004400 	.word	0x40004400

08002004 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002008:	4b22      	ldr	r3, [pc, #136]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 800200a:	4a23      	ldr	r2, [pc, #140]	@ (8002098 <MX_USART3_UART_Init+0x94>)
 800200c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800204c:	4811      	ldr	r0, [pc, #68]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 800204e:	f00a f803 	bl	800c058 <HAL_UART_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002058:	f000 fcf8 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205c:	2100      	movs	r1, #0
 800205e:	480d      	ldr	r0, [pc, #52]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002060:	f00a fe26 	bl	800ccb0 <HAL_UARTEx_SetTxFifoThreshold>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800206a:	f000 fcef 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206e:	2100      	movs	r1, #0
 8002070:	4808      	ldr	r0, [pc, #32]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002072:	f00a fe5b 	bl	800cd2c <HAL_UARTEx_SetRxFifoThreshold>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800207c:	f000 fce6 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MX_USART3_UART_Init+0x90>)
 8002082:	f00a fddc 	bl	800cc3e <HAL_UARTEx_DisableFifoMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800208c:	f000 fcde 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000598 	.word	0x20000598
 8002098:	40004800 	.word	0x40004800

0800209c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80020a0:	4b45      	ldr	r3, [pc, #276]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020a2:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <MX_SAI1_Init+0x120>)
 80020a4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80020a6:	4b44      	ldr	r3, [pc, #272]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80020ac:	4b42      	ldr	r3, [pc, #264]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80020b2:	4b41      	ldr	r3, [pc, #260]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020b4:	2240      	movs	r2, #64	@ 0x40
 80020b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80020b8:	4b3f      	ldr	r3, [pc, #252]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80020be:	4b3e      	ldr	r3, [pc, #248]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80020c4:	4b3c      	ldr	r3, [pc, #240]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80020ca:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80020d0:	4b39      	ldr	r3, [pc, #228]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80020d6:	4b38      	ldr	r3, [pc, #224]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80020dc:	4b36      	ldr	r3, [pc, #216]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80020e2:	4b35      	ldr	r3, [pc, #212]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020e4:	4a36      	ldr	r2, [pc, #216]	@ (80021c0 <MX_SAI1_Init+0x124>)
 80020e6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80020e8:	4b33      	ldr	r3, [pc, #204]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80020ee:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80020f4:	4b30      	ldr	r3, [pc, #192]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80020fa:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8002100:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8002108:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 800210a:	2200      	movs	r2, #0
 800210c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800210e:	4b2a      	ldr	r3, [pc, #168]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002114:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002118:	2208      	movs	r2, #8
 800211a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800211c:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 800211e:	2201      	movs	r2, #1
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002122:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002124:	2200      	movs	r2, #0
 8002126:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002128:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 800212a:	2200      	movs	r2, #0
 800212c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800212e:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002130:	2200      	movs	r2, #0
 8002132:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002134:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002136:	2200      	movs	r2, #0
 8002138:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800213a:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 800213c:	2200      	movs	r2, #0
 800213e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002142:	2201      	movs	r2, #1
 8002144:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 8002148:	2200      	movs	r2, #0
 800214a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800214c:	481a      	ldr	r0, [pc, #104]	@ (80021b8 <MX_SAI1_Init+0x11c>)
 800214e:	f008 f907 	bl	800a360 <HAL_SAI_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002158:	f000 fc78 	bl	8002a4c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <MX_SAI1_Init+0x128>)
 800215e:	4a1a      	ldr	r2, [pc, #104]	@ (80021c8 <MX_SAI1_Init+0x12c>)
 8002160:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <MX_SAI1_Init+0x128>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <MX_SAI1_Init+0x128>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <MX_SAI1_Init+0x128>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <MX_SAI1_Init+0x128>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <MX_SAI1_Init+0x128>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002180:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <MX_SAI1_Init+0x128>)
 8002182:	4a0f      	ldr	r2, [pc, #60]	@ (80021c0 <MX_SAI1_Init+0x124>)
 8002184:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002186:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <MX_SAI1_Init+0x128>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <MX_SAI1_Init+0x128>)
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_SAI1_Init+0x128>)
 8002194:	2200      	movs	r2, #0
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <MX_SAI1_Init+0x128>)
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800219e:	2302      	movs	r3, #2
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	4807      	ldr	r0, [pc, #28]	@ (80021c4 <MX_SAI1_Init+0x128>)
 80021a6:	f008 f8a9 	bl	800a2fc <HAL_SAI_InitProtocol>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 80021b0:	f000 fc4c 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000062c 	.word	0x2000062c
 80021bc:	40015424 	.word	0x40015424
 80021c0:	0002ee00 	.word	0x0002ee00
 80021c4:	200006c0 	.word	0x200006c0
 80021c8:	40015404 	.word	0x40015404

080021cc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021d2:	4a30      	ldr	r2, [pc, #192]	@ (8002294 <MX_SAI2_Init+0xc8>)
 80021d4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80021dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021e4:	2240      	movs	r2, #64	@ 0x40
 80021e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80021e8:	4b29      	ldr	r3, [pc, #164]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80021ee:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80021f4:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80021fa:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <MX_SAI2_Init+0xc4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800220c:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002212:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002214:	4a20      	ldr	r2, [pc, #128]	@ (8002298 <MX_SAI2_Init+0xcc>)
 8002216:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002224:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800223a:	2200      	movs	r2, #0
 800223c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002240:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002244:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002248:	2208      	movs	r2, #8
 800224a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800224e:	2201      	movs	r2, #1
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002252:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002254:	2200      	movs	r2, #0
 8002256:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800225a:	2200      	movs	r2, #0
 800225c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002260:	2200      	movs	r2, #0
 8002262:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002266:	2200      	movs	r2, #0
 8002268:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800226c:	2200      	movs	r2, #0
 800226e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002272:	2201      	movs	r2, #1
 8002274:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <MX_SAI2_Init+0xc4>)
 8002278:	2200      	movs	r2, #0
 800227a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	@ (8002290 <MX_SAI2_Init+0xc4>)
 800227e:	f008 f86f 	bl	800a360 <HAL_SAI_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8002288:	f000 fbe0 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000754 	.word	0x20000754
 8002294:	40015804 	.word	0x40015804
 8002298:	0002ee00 	.word	0x0002ee00

0800229c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002314 <MX_SPI3_Init+0x78>)
 80022a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022ae:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b4:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c2:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022ea:	2207      	movs	r2, #7
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022f6:	2208      	movs	r2, #8
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	@ (8002310 <MX_SPI3_Init+0x74>)
 80022fc:	f008 fc87 	bl	800ac0e <HAL_SPI_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002306:	f000 fba1 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200007e8 	.word	0x200007e8
 8002314:	40003c00 	.word	0x40003c00

08002318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b098      	sub	sp, #96	@ 0x60
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800232a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800234a:	463b      	mov	r3, r7
 800234c:	222c      	movs	r2, #44	@ 0x2c
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00b fba4 	bl	800da9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002356:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002358:	4a4a      	ldr	r2, [pc, #296]	@ (8002484 <MX_TIM1_Init+0x16c>)
 800235a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800235c:	4b48      	ldr	r3, [pc, #288]	@ (8002480 <MX_TIM1_Init+0x168>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <MX_TIM1_Init+0x168>)
 800236a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002376:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b40      	ldr	r3, [pc, #256]	@ (8002480 <MX_TIM1_Init+0x168>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002382:	483f      	ldr	r0, [pc, #252]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002384:	f008 ffc0 	bl	800b308 <HAL_TIM_PWM_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800238e:	f000 fb5d 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800239e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023a2:	4619      	mov	r1, r3
 80023a4:	4836      	ldr	r0, [pc, #216]	@ (8002480 <MX_TIM1_Init+0x168>)
 80023a6:	f009 fc8b 	bl	800bcc0 <HAL_TIMEx_MasterConfigSynchronization>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80023b0:	f000 fb4c 	bl	8002a4c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80023b4:	2301      	movs	r3, #1
 80023b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80023bc:	2300      	movs	r3, #0
 80023be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023c4:	461a      	mov	r2, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	482d      	ldr	r0, [pc, #180]	@ (8002480 <MX_TIM1_Init+0x168>)
 80023ca:	f009 fd7f 	bl	800becc <HAL_TIMEx_ConfigBreakInput>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80023d4:	f000 fb3a 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80023d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023dc:	461a      	mov	r2, r3
 80023de:	2102      	movs	r1, #2
 80023e0:	4827      	ldr	r0, [pc, #156]	@ (8002480 <MX_TIM1_Init+0x168>)
 80023e2:	f009 fd73 	bl	800becc <HAL_TIMEx_ConfigBreakInput>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80023ec:	f000 fb2e 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f0:	2360      	movs	r3, #96	@ 0x60
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800240c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002410:	2208      	movs	r2, #8
 8002412:	4619      	mov	r1, r3
 8002414:	481a      	ldr	r0, [pc, #104]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002416:	f008 ffcf 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002420:	f000 fb14 	bl	8002a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002424:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002428:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800242a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800242e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800243e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002442:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002448:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800244c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800244e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002452:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	4807      	ldr	r0, [pc, #28]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002462:	f009 fcb5 	bl	800bdd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800246c:	f000 faee 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002470:	4803      	ldr	r0, [pc, #12]	@ (8002480 <MX_TIM1_Init+0x168>)
 8002472:	f000 feb7 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002476:	bf00      	nop
 8002478:	3760      	adds	r7, #96	@ 0x60
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000084c 	.word	0x2000084c
 8002484:	40012c00 	.word	0x40012c00

08002488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	615a      	str	r2, [r3, #20]
 80024aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024ac:	4b27      	ldr	r3, [pc, #156]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024b4:	4b25      	ldr	r3, [pc, #148]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b24      	ldr	r3, [pc, #144]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024c0:	4b22      	ldr	r3, [pc, #136]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024c2:	f04f 32ff 	mov.w	r2, #4294967295
 80024c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c8:	4b20      	ldr	r3, [pc, #128]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024d4:	481d      	ldr	r0, [pc, #116]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024d6:	f008 ff17 	bl	800b308 <HAL_TIM_PWM_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80024e0:	f000 fab4 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	4816      	ldr	r0, [pc, #88]	@ (800254c <MX_TIM2_Init+0xc4>)
 80024f4:	f009 fbe4 	bl	800bcc0 <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80024fe:	f000 faa5 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002502:	2360      	movs	r3, #96	@ 0x60
 8002504:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	4619      	mov	r1, r3
 8002518:	480c      	ldr	r0, [pc, #48]	@ (800254c <MX_TIM2_Init+0xc4>)
 800251a:	f008 ff4d 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002524:	f000 fa92 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	2208      	movs	r2, #8
 800252c:	4619      	mov	r1, r3
 800252e:	4807      	ldr	r0, [pc, #28]	@ (800254c <MX_TIM2_Init+0xc4>)
 8002530:	f008 ff42 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800253a:	f000 fa87 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800253e:	4803      	ldr	r0, [pc, #12]	@ (800254c <MX_TIM2_Init+0xc4>)
 8002540:	f000 fe50 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	@ 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000898 	.word	0x20000898

08002550 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002562:	463b      	mov	r3, r7
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
 8002570:	615a      	str	r2, [r3, #20]
 8002572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <MX_TIM3_Init+0xc4>)
 8002576:	4a28      	ldr	r2, [pc, #160]	@ (8002618 <MX_TIM3_Init+0xc8>)
 8002578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <MX_TIM3_Init+0xc4>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <MX_TIM3_Init+0xc4>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <MX_TIM3_Init+0xc4>)
 8002588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800258c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258e:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <MX_TIM3_Init+0xc4>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002594:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <MX_TIM3_Init+0xc4>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800259a:	481e      	ldr	r0, [pc, #120]	@ (8002614 <MX_TIM3_Init+0xc4>)
 800259c:	f008 feb4 	bl	800b308 <HAL_TIM_PWM_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80025a6:	f000 fa51 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	4619      	mov	r1, r3
 80025b8:	4816      	ldr	r0, [pc, #88]	@ (8002614 <MX_TIM3_Init+0xc4>)
 80025ba:	f009 fb81 	bl	800bcc0 <HAL_TIMEx_MasterConfigSynchronization>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80025c4:	f000 fa42 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c8:	2360      	movs	r3, #96	@ 0x60
 80025ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025d8:	463b      	mov	r3, r7
 80025da:	2204      	movs	r2, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	@ (8002614 <MX_TIM3_Init+0xc4>)
 80025e0:	f008 feea 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80025ea:	f000 fa2f 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ee:	463b      	mov	r3, r7
 80025f0:	2208      	movs	r2, #8
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	@ (8002614 <MX_TIM3_Init+0xc4>)
 80025f6:	f008 fedf 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002600:	f000 fa24 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002604:	4803      	ldr	r0, [pc, #12]	@ (8002614 <MX_TIM3_Init+0xc4>)
 8002606:	f000 fded 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	@ 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200008e4 	.word	0x200008e4
 8002618:	40000400 	.word	0x40000400

0800261c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	463b      	mov	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002640:	4b21      	ldr	r3, [pc, #132]	@ (80026c8 <MX_TIM4_Init+0xac>)
 8002642:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <MX_TIM4_Init+0xb0>)
 8002644:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <MX_TIM4_Init+0xac>)
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <MX_TIM4_Init+0xac>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002652:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <MX_TIM4_Init+0xac>)
 8002654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002658:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265a:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <MX_TIM4_Init+0xac>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <MX_TIM4_Init+0xac>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002666:	4818      	ldr	r0, [pc, #96]	@ (80026c8 <MX_TIM4_Init+0xac>)
 8002668:	f008 fe4e 	bl	800b308 <HAL_TIM_PWM_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002672:	f000 f9eb 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	4810      	ldr	r0, [pc, #64]	@ (80026c8 <MX_TIM4_Init+0xac>)
 8002686:	f009 fb1b 	bl	800bcc0 <HAL_TIMEx_MasterConfigSynchronization>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002690:	f000 f9dc 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002694:	2360      	movs	r3, #96	@ 0x60
 8002696:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026a4:	463b      	mov	r3, r7
 80026a6:	220c      	movs	r2, #12
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	@ (80026c8 <MX_TIM4_Init+0xac>)
 80026ac:	f008 fe84 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80026b6:	f000 f9c9 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026ba:	4803      	ldr	r0, [pc, #12]	@ (80026c8 <MX_TIM4_Init+0xac>)
 80026bc:	f000 fd92 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	@ 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000930 	.word	0x20000930
 80026cc:	40000800 	.word	0x40000800

080026d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b096      	sub	sp, #88	@ 0x58
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	615a      	str	r2, [r3, #20]
 80026f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	222c      	movs	r2, #44	@ 0x2c
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00b f9ce 	bl	800da9e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002702:	4b33      	ldr	r3, [pc, #204]	@ (80027d0 <MX_TIM15_Init+0x100>)
 8002704:	4a33      	ldr	r2, [pc, #204]	@ (80027d4 <MX_TIM15_Init+0x104>)
 8002706:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002708:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <MX_TIM15_Init+0x100>)
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270e:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <MX_TIM15_Init+0x100>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002714:	4b2e      	ldr	r3, [pc, #184]	@ (80027d0 <MX_TIM15_Init+0x100>)
 8002716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800271a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271c:	4b2c      	ldr	r3, [pc, #176]	@ (80027d0 <MX_TIM15_Init+0x100>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002722:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <MX_TIM15_Init+0x100>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b29      	ldr	r3, [pc, #164]	@ (80027d0 <MX_TIM15_Init+0x100>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800272e:	4828      	ldr	r0, [pc, #160]	@ (80027d0 <MX_TIM15_Init+0x100>)
 8002730:	f008 fdea 	bl	800b308 <HAL_TIM_PWM_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800273a:	f000 f987 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002746:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800274a:	4619      	mov	r1, r3
 800274c:	4820      	ldr	r0, [pc, #128]	@ (80027d0 <MX_TIM15_Init+0x100>)
 800274e:	f009 fab7 	bl	800bcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002758:	f000 f978 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275c:	2360      	movs	r3, #96	@ 0x60
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002764:	2300      	movs	r3, #0
 8002766:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002768:	2300      	movs	r3, #0
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002778:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800277c:	2200      	movs	r2, #0
 800277e:	4619      	mov	r1, r3
 8002780:	4813      	ldr	r0, [pc, #76]	@ (80027d0 <MX_TIM15_Init+0x100>)
 8002782:	f008 fe19 	bl	800b3b8 <HAL_TIM_PWM_ConfigChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800278c:	f000 f95e 	bl	8002a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4807      	ldr	r0, [pc, #28]	@ (80027d0 <MX_TIM15_Init+0x100>)
 80027b4:	f009 fb0c 	bl	800bdd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80027be:	f000 f945 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80027c2:	4803      	ldr	r0, [pc, #12]	@ (80027d0 <MX_TIM15_Init+0x100>)
 80027c4:	f000 fd0e 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 80027c8:	bf00      	nop
 80027ca:	3758      	adds	r7, #88	@ 0x58
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000097c 	.word	0x2000097c
 80027d4:	40014000 	.word	0x40014000

080027d8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	@ 0x38
 80027ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027fe:	4b85      	ldr	r3, [pc, #532]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	4a84      	ldr	r2, [pc, #528]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280a:	4b82      	ldr	r3, [pc, #520]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	4b7f      	ldr	r3, [pc, #508]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002822:	4b7c      	ldr	r3, [pc, #496]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800282e:	4b79      	ldr	r3, [pc, #484]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	4a78      	ldr	r2, [pc, #480]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002834:	f043 0320 	orr.w	r3, r3, #32
 8002838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800283a:	4b76      	ldr	r3, [pc, #472]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002846:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	4a72      	ldr	r2, [pc, #456]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800284c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002852:	4b70      	ldr	r3, [pc, #448]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	4a6c      	ldr	r2, [pc, #432]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	4b67      	ldr	r3, [pc, #412]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	4a66      	ldr	r2, [pc, #408]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002882:	4b64      	ldr	r3, [pc, #400]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288e:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	4a60      	ldr	r2, [pc, #384]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289a:	4b5e      	ldr	r3, [pc, #376]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 80028ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b2:	4b58      	ldr	r3, [pc, #352]	@ (8002a14 <MX_GPIO_Init+0x22c>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80028be:	f005 f8d9 	bl	8007a74 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80028c8:	4853      	ldr	r0, [pc, #332]	@ (8002a18 <MX_GPIO_Init+0x230>)
 80028ca:	f004 fa13 	bl	8006cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 80028d4:	4851      	ldr	r0, [pc, #324]	@ (8002a1c <MX_GPIO_Init+0x234>)
 80028d6:	f004 fa0d 	bl	8006cf4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028da:	2310      	movs	r3, #16
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ea:	2305      	movs	r3, #5
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f2:	4619      	mov	r1, r3
 80028f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028f8:	f004 f852 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028fc:	23e0      	movs	r3, #224	@ 0xe0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002904:	2301      	movs	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800290c:	4619      	mov	r1, r3
 800290e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002912:	f004 f845 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002916:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800291c:	2311      	movs	r3, #17
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	483a      	ldr	r0, [pc, #232]	@ (8002a18 <MX_GPIO_Init+0x230>)
 8002930:	f004 f836 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002934:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293e:	2301      	movs	r3, #1
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294a:	4619      	mov	r1, r3
 800294c:	4833      	ldr	r0, [pc, #204]	@ (8002a1c <MX_GPIO_Init+0x234>)
 800294e:	f004 f827 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002952:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002958:	2311      	movs	r3, #17
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002968:	4619      	mov	r1, r3
 800296a:	482c      	ldr	r0, [pc, #176]	@ (8002a1c <MX_GPIO_Init+0x234>)
 800296c:	f004 f818 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002970:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002976:	2300      	movs	r3, #0
 8002978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297a:	2301      	movs	r3, #1
 800297c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002982:	4619      	mov	r1, r3
 8002984:	4826      	ldr	r0, [pc, #152]	@ (8002a20 <MX_GPIO_Init+0x238>)
 8002986:	f004 f80b 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800298a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800299c:	230c      	movs	r3, #12
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a4:	4619      	mov	r1, r3
 80029a6:	481f      	ldr	r0, [pc, #124]	@ (8002a24 <MX_GPIO_Init+0x23c>)
 80029a8:	f003 fffa 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029ac:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029be:	230a      	movs	r3, #10
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c6:	4619      	mov	r1, r3
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029cc:	f003 ffe8 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e8:	f003 ffda 	bl	80069a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ec:	2304      	movs	r3, #4
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80029fc:	230c      	movs	r3, #12
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a04:	4619      	mov	r1, r3
 8002a06:	4806      	ldr	r0, [pc, #24]	@ (8002a20 <MX_GPIO_Init+0x238>)
 8002a08:	f003 ffca 	bl	80069a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a0c:	bf00      	nop
 8002a0e:	3738      	adds	r7, #56	@ 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48001400 	.word	0x48001400
 8002a1c:	48001000 	.word	0x48001000
 8002a20:	48000c00 	.word	0x48000c00
 8002a24:	48000800 	.word	0x48000800

08002a28 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002a30:	1d39      	adds	r1, r7, #4
 8002a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a36:	2201      	movs	r2, #1
 8002a38:	4803      	ldr	r0, [pc, #12]	@ (8002a48 <__io_putchar+0x20>)
 8002a3a:	f009 fb5d 	bl	800c0f8 <HAL_UART_Transmit>
  return ch;
 8002a3e:	687b      	ldr	r3, [r7, #4]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000470 	.word	0x20000470

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <Error_Handler+0x8>

08002a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	4a08      	ldr	r2, [pc, #32]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_MspInit+0x44>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	@ 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <HAL_ADC_MspInit+0xd4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d154      	bne.n	8002b6c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ace:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	4a26      	ldr	r2, [pc, #152]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	4a20      	ldr	r2, [pc, #128]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b16:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <HAL_ADC_MspInit+0xd8>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b22:	233f      	movs	r3, #63	@ 0x3f
 8002b24:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b26:	230b      	movs	r3, #11
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4811      	ldr	r0, [pc, #68]	@ (8002b7c <HAL_ADC_MspInit+0xdc>)
 8002b36:	f003 ff33 	bl	80069a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b3e:	230b      	movs	r3, #11
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 031c 	add.w	r3, r7, #28
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b50:	f003 ff26 	bl	80069a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b58:	230b      	movs	r3, #11
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	4806      	ldr	r0, [pc, #24]	@ (8002b80 <HAL_ADC_MspInit+0xe0>)
 8002b68:	f003 ff1a 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b6c:	bf00      	nop
 8002b6e:	3730      	adds	r7, #48	@ 0x30
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	50040000 	.word	0x50040000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000400 	.word	0x48000400

08002b84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_CAN_MspInit+0x7c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d127      	bne.n	8002bf6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ba6:	4b17      	ldr	r3, [pc, #92]	@ (8002c04 <HAL_CAN_MspInit+0x80>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_CAN_MspInit+0x80>)
 8002bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb2:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_CAN_MspInit+0x80>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_CAN_MspInit+0x80>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <HAL_CAN_MspInit+0x80>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bca:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <HAL_CAN_MspInit+0x80>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be2:	2303      	movs	r3, #3
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002be6:	2309      	movs	r3, #9
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <HAL_CAN_MspInit+0x84>)
 8002bf2:	f003 fed5 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	@ 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40006400 	.word	0x40006400
 8002c04:	40021000 	.word	0x40021000
 8002c08:	48000c00 	.word	0x48000c00

08002c0c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	@ 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca4 <HAL_COMP_MspInit+0x98>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d118      	bne.n	8002c60 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <HAL_COMP_MspInit+0x9c>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <HAL_COMP_MspInit+0x9c>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_COMP_MspInit+0x9c>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c46:	2304      	movs	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	4814      	ldr	r0, [pc, #80]	@ (8002cac <HAL_COMP_MspInit+0xa0>)
 8002c5a:	f003 fea1 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002c5e:	e01c      	b.n	8002c9a <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <HAL_COMP_MspInit+0xa4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d117      	bne.n	8002c9a <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_COMP_MspInit+0x9c>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca8 <HAL_COMP_MspInit+0x9c>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <HAL_COMP_MspInit+0x9c>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c82:	23c0      	movs	r3, #192	@ 0xc0
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c86:	2303      	movs	r3, #3
 8002c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	@ (8002cac <HAL_COMP_MspInit+0xa0>)
 8002c96:	f003 fe83 	bl	80069a0 <HAL_GPIO_Init>
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	@ 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40010200 	.word	0x40010200
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	40010204 	.word	0x40010204

08002cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b0ae      	sub	sp, #184	@ 0xb8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	2294      	movs	r2, #148	@ 0x94
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00a fee2 	bl	800da9e <memset>
  if(hi2c->Instance==I2C1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a21      	ldr	r2, [pc, #132]	@ (8002d64 <HAL_I2C_MspInit+0xb0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d13b      	bne.n	8002d5c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ce4:	2340      	movs	r3, #64	@ 0x40
 8002ce6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 fda7 	bl	8008844 <HAL_RCCEx_PeriphCLKConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cfc:	f7ff fea6 	bl	8002a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_I2C_MspInit+0xb4>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d04:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <HAL_I2C_MspInit+0xb4>)
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0c:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <HAL_I2C_MspInit+0xb4>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d20:	2312      	movs	r3, #18
 8002d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d32:	2304      	movs	r3, #4
 8002d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480b      	ldr	r0, [pc, #44]	@ (8002d6c <HAL_I2C_MspInit+0xb8>)
 8002d40:	f003 fe2e 	bl	80069a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_I2C_MspInit+0xb4>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	4a07      	ldr	r2, [pc, #28]	@ (8002d68 <HAL_I2C_MspInit+0xb4>)
 8002d4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_I2C_MspInit+0xb4>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	37b8      	adds	r7, #184	@ 0xb8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40005400 	.word	0x40005400
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	48000400 	.word	0x48000400

08002d70 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0ae      	sub	sp, #184	@ 0xb8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	2294      	movs	r2, #148	@ 0x94
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f00a fe84 	bl	800da9e <memset>
  if(hsmbus->Instance==I2C2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	@ (8002e20 <HAL_SMBUS_MspInit+0xb0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d13a      	bne.n	8002e16 <HAL_SMBUS_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 fd49 	bl	8008844 <HAL_RCCEx_PeriphCLKConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002db8:	f7ff fe48 	bl	8002a4c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_SMBUS_MspInit+0xb4>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_SMBUS_MspInit+0xb4>)
 8002dc2:	f043 0320 	orr.w	r3, r3, #32
 8002dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc8:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <HAL_SMBUS_MspInit+0xb4>)
 8002dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dda:	2312      	movs	r3, #18
 8002ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dec:	2304      	movs	r3, #4
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002df6:	4619      	mov	r1, r3
 8002df8:	480b      	ldr	r0, [pc, #44]	@ (8002e28 <HAL_SMBUS_MspInit+0xb8>)
 8002dfa:	f003 fdd1 	bl	80069a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_SMBUS_MspInit+0xb4>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a08      	ldr	r2, [pc, #32]	@ (8002e24 <HAL_SMBUS_MspInit+0xb4>)
 8002e04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_SMBUS_MspInit+0xb4>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e16:	bf00      	nop
 8002e18:	37b8      	adds	r7, #184	@ 0xb8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40005800 	.word	0x40005800
 8002e24:	40021000 	.word	0x40021000
 8002e28:	48001400 	.word	0x48001400

08002e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0b2      	sub	sp, #200	@ 0xc8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e44:	f107 0320 	add.w	r3, r7, #32
 8002e48:	2294      	movs	r2, #148	@ 0x94
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00a fe26 	bl	800da9e <memset>
  if(huart->Instance==LPUART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a64      	ldr	r2, [pc, #400]	@ (8002fe8 <HAL_UART_MspInit+0x1bc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d13e      	bne.n	8002eda <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e60:	2300      	movs	r3, #0
 8002e62:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e64:	f107 0320 	add.w	r3, r7, #32
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fceb 	bl	8008844 <HAL_RCCEx_PeriphCLKConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e74:	f7ff fdea 	bl	8002a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e78:	4b5c      	ldr	r3, [pc, #368]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	4a5b      	ldr	r2, [pc, #364]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002e84:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e90:	4b56      	ldr	r3, [pc, #344]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e94:	4a55      	ldr	r2, [pc, #340]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e9c:	4b53      	ldr	r3, [pc, #332]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002ea8:	f004 fde4 	bl	8007a74 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002eac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ecc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4847      	ldr	r0, [pc, #284]	@ (8002ff0 <HAL_UART_MspInit+0x1c4>)
 8002ed4:	f003 fd64 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ed8:	e081      	b.n	8002fde <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <HAL_UART_MspInit+0x1c8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d13b      	bne.n	8002f5c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eec:	f107 0320 	add.w	r3, r7, #32
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f005 fca7 	bl	8008844 <HAL_RCCEx_PeriphCLKConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002efc:	f7ff fda6 	bl	8002a4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f00:	4b3a      	ldr	r3, [pc, #232]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a39      	ldr	r2, [pc, #228]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0c:	4b37      	ldr	r3, [pc, #220]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f18:	4b34      	ldr	r3, [pc, #208]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1c:	4a33      	ldr	r2, [pc, #204]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f1e:	f043 0308 	orr.w	r3, r3, #8
 8002f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002f30:	2378      	movs	r3, #120	@ 0x78
 8002f32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f52:	4619      	mov	r1, r3
 8002f54:	4828      	ldr	r0, [pc, #160]	@ (8002ff8 <HAL_UART_MspInit+0x1cc>)
 8002f56:	f003 fd23 	bl	80069a0 <HAL_GPIO_Init>
}
 8002f5a:	e040      	b.n	8002fde <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <HAL_UART_MspInit+0x1d0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d13b      	bne.n	8002fde <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f66:	2304      	movs	r3, #4
 8002f68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6e:	f107 0320 	add.w	r3, r7, #32
 8002f72:	4618      	mov	r0, r3
 8002f74:	f005 fc66 	bl	8008844 <HAL_RCCEx_PeriphCLKConfig>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8002f7e:	f7ff fd65 	bl	8002a4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f82:	4b1a      	ldr	r3, [pc, #104]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8e:	4b17      	ldr	r3, [pc, #92]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f9a:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_UART_MspInit+0x1c0>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fcc:	2307      	movs	r3, #7
 8002fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4807      	ldr	r0, [pc, #28]	@ (8002ff8 <HAL_UART_MspInit+0x1cc>)
 8002fda:	f003 fce1 	bl	80069a0 <HAL_GPIO_Init>
}
 8002fde:	bf00      	nop
 8002fe0:	37c8      	adds	r7, #200	@ 0xc8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40008000 	.word	0x40008000
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	48001800 	.word	0x48001800
 8002ff4:	40004400 	.word	0x40004400
 8002ff8:	48000c00 	.word	0x48000c00
 8002ffc:	40004800 	.word	0x40004800

08003000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	@ 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_SPI_MspInit+0x7c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d128      	bne.n	8003074 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003022:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HAL_SPI_MspInit+0x80>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_SPI_MspInit+0x80>)
 8003028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800302c:	6593      	str	r3, [r2, #88]	@ 0x58
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <HAL_SPI_MspInit+0x80>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <HAL_SPI_MspInit+0x80>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	4a10      	ldr	r2, [pc, #64]	@ (8003080 <HAL_SPI_MspInit+0x80>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <HAL_SPI_MspInit+0x80>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003052:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003064:	2306      	movs	r3, #6
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4805      	ldr	r0, [pc, #20]	@ (8003084 <HAL_SPI_MspInit+0x84>)
 8003070:	f003 fc96 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003074:	bf00      	nop
 8003076:	3728      	adds	r7, #40	@ 0x28
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40003c00 	.word	0x40003c00
 8003080:	40021000 	.word	0x40021000
 8003084:	48000800 	.word	0x48000800

08003088 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08e      	sub	sp, #56	@ 0x38
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a49      	ldr	r2, [pc, #292]	@ (80031cc <HAL_TIM_PWM_MspInit+0x144>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d129      	bne.n	80030fe <HAL_TIM_PWM_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030aa:	4b49      	ldr	r3, [pc, #292]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80030ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ae:	4a48      	ldr	r2, [pc, #288]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80030b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030b6:	4b46      	ldr	r3, [pc, #280]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030c2:	4b43      	ldr	r3, [pc, #268]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	4a42      	ldr	r2, [pc, #264]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80030c8:	f043 0310 	orr.w	r3, r3, #16
 80030cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ce:	4b40      	ldr	r3, [pc, #256]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80030da:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2300      	movs	r3, #0
 80030ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80030ec:	2303      	movs	r3, #3
 80030ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f4:	4619      	mov	r1, r3
 80030f6:	4837      	ldr	r0, [pc, #220]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x14c>)
 80030f8:	f003 fc52 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80030fc:	e062      	b.n	80031c4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003106:	d10c      	bne.n	8003122 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003108:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	4a30      	ldr	r2, [pc, #192]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6593      	str	r3, [r2, #88]	@ 0x58
 8003114:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	69bb      	ldr	r3, [r7, #24]
}
 8003120:	e050      	b.n	80031c4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2c      	ldr	r2, [pc, #176]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x150>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10c      	bne.n	8003146 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312c:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	4a27      	ldr	r2, [pc, #156]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	6593      	str	r3, [r2, #88]	@ 0x58
 8003138:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
}
 8003144:	e03e      	b.n	80031c4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM4)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a24      	ldr	r2, [pc, #144]	@ (80031dc <HAL_TIM_PWM_MspInit+0x154>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d128      	bne.n	80031a2 <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003150:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6593      	str	r3, [r2, #88]	@ 0x58
 800315c:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800316a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316c:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 800316e:	f043 0310 	orr.w	r3, r3, #16
 8003172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003174:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 8003176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003190:	2302      	movs	r3, #2
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003198:	4619      	mov	r1, r3
 800319a:	480e      	ldr	r0, [pc, #56]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x14c>)
 800319c:	f003 fc00 	bl	80069a0 <HAL_GPIO_Init>
}
 80031a0:	e010      	b.n	80031c4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM15)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0e      	ldr	r2, [pc, #56]	@ (80031e0 <HAL_TIM_PWM_MspInit+0x158>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10b      	bne.n	80031c4 <HAL_TIM_PWM_MspInit+0x13c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80031ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b0:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x148>)
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3738      	adds	r7, #56	@ 0x38
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	48001000 	.word	0x48001000
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40014000 	.word	0x40014000

080031e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	@ 0x38
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a73      	ldr	r2, [pc, #460]	@ (80033d0 <HAL_TIM_MspPostInit+0x1ec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11d      	bne.n	8003242 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003206:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320a:	4a72      	ldr	r2, [pc, #456]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003212:	4b70      	ldr	r3, [pc, #448]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800321e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003230:	2301      	movs	r3, #1
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003238:	4619      	mov	r1, r3
 800323a:	4867      	ldr	r0, [pc, #412]	@ (80033d8 <HAL_TIM_MspPostInit+0x1f4>)
 800323c:	f003 fbb0 	bl	80069a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003240:	e0c2      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324a:	d13a      	bne.n	80032c2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	4b61      	ldr	r3, [pc, #388]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003250:	4a60      	ldr	r2, [pc, #384]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003258:	4b5e      	ldr	r3, [pc, #376]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003264:	4b5b      	ldr	r3, [pc, #364]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003268:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003270:	4b58      	ldr	r3, [pc, #352]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800327c:	2301      	movs	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800328c:	2301      	movs	r3, #1
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003294:	4619      	mov	r1, r3
 8003296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800329a:	f003 fb81 	bl	80069a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800329e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032b0:	2301      	movs	r3, #1
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b8:	4619      	mov	r1, r3
 80032ba:	4848      	ldr	r0, [pc, #288]	@ (80033dc <HAL_TIM_MspPostInit+0x1f8>)
 80032bc:	f003 fb70 	bl	80069a0 <HAL_GPIO_Init>
}
 80032c0:	e082      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a46      	ldr	r2, [pc, #280]	@ (80033e0 <HAL_TIM_MspPostInit+0x1fc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d138      	bne.n	800333e <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032cc:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d0:	4a40      	ldr	r2, [pc, #256]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d8:	4b3e      	ldr	r3, [pc, #248]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e4:	4b3b      	ldr	r3, [pc, #236]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 80032e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e8:	4a3a      	ldr	r2, [pc, #232]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032f0:	4b38      	ldr	r3, [pc, #224]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 80032f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032fc:	2301      	movs	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800330c:	2302      	movs	r3, #2
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	4831      	ldr	r0, [pc, #196]	@ (80033dc <HAL_TIM_MspPostInit+0x1f8>)
 8003318:	f003 fb42 	bl	80069a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800332c:	2302      	movs	r3, #2
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003334:	4619      	mov	r1, r3
 8003336:	482b      	ldr	r0, [pc, #172]	@ (80033e4 <HAL_TIM_MspPostInit+0x200>)
 8003338:	f003 fb32 	bl	80069a0 <HAL_GPIO_Init>
}
 800333c:	e044      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a29      	ldr	r2, [pc, #164]	@ (80033e8 <HAL_TIM_MspPostInit+0x204>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11d      	bne.n	8003384 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003348:	4b22      	ldr	r3, [pc, #136]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334c:	4a21      	ldr	r2, [pc, #132]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800334e:	f043 0308 	orr.w	r3, r3, #8
 8003352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003354:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003372:	2302      	movs	r3, #2
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337a:	4619      	mov	r1, r3
 800337c:	481b      	ldr	r0, [pc, #108]	@ (80033ec <HAL_TIM_MspPostInit+0x208>)
 800337e:	f003 fb0f 	bl	80069a0 <HAL_GPIO_Init>
}
 8003382:	e021      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <HAL_TIM_MspPostInit+0x20c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d11c      	bne.n	80033c8 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338e:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	4a10      	ldr	r2, [pc, #64]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800339a:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <HAL_TIM_MspPostInit+0x1f0>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b4:	2300      	movs	r3, #0
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80033b8:	230e      	movs	r3, #14
 80033ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	4806      	ldr	r0, [pc, #24]	@ (80033dc <HAL_TIM_MspPostInit+0x1f8>)
 80033c4:	f003 faec 	bl	80069a0 <HAL_GPIO_Init>
}
 80033c8:	bf00      	nop
 80033ca:	3738      	adds	r7, #56	@ 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	48001000 	.word	0x48001000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	40000400 	.word	0x40000400
 80033e4:	48000800 	.word	0x48000800
 80033e8:	40000800 	.word	0x40000800
 80033ec:	48000c00 	.word	0x48000c00
 80033f0:	40014000 	.word	0x40014000

080033f4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a50      	ldr	r2, [pc, #320]	@ (8003544 <HAL_SAI_MspInit+0x150>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d124      	bne.n	8003450 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003406:	4b50      	ldr	r3, [pc, #320]	@ (8003548 <HAL_SAI_MspInit+0x154>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800340e:	4b4f      	ldr	r3, [pc, #316]	@ (800354c <HAL_SAI_MspInit+0x158>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003412:	4a4e      	ldr	r2, [pc, #312]	@ (800354c <HAL_SAI_MspInit+0x158>)
 8003414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003418:	6613      	str	r3, [r2, #96]	@ 0x60
 800341a:	4b4c      	ldr	r3, [pc, #304]	@ (800354c <HAL_SAI_MspInit+0x158>)
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003426:	4b48      	ldr	r3, [pc, #288]	@ (8003548 <HAL_SAI_MspInit+0x154>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	4a46      	ldr	r2, [pc, #280]	@ (8003548 <HAL_SAI_MspInit+0x154>)
 800342e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003430:	2374      	movs	r3, #116	@ 0x74
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003440:	230d      	movs	r3, #13
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4841      	ldr	r0, [pc, #260]	@ (8003550 <HAL_SAI_MspInit+0x15c>)
 800344c:	f003 faa8 	bl	80069a0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3f      	ldr	r2, [pc, #252]	@ (8003554 <HAL_SAI_MspInit+0x160>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d135      	bne.n	80034c6 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800345a:	4b3b      	ldr	r3, [pc, #236]	@ (8003548 <HAL_SAI_MspInit+0x154>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003462:	4b3a      	ldr	r3, [pc, #232]	@ (800354c <HAL_SAI_MspInit+0x158>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	4a39      	ldr	r2, [pc, #228]	@ (800354c <HAL_SAI_MspInit+0x158>)
 8003468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800346c:	6613      	str	r3, [r2, #96]	@ 0x60
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <HAL_SAI_MspInit+0x158>)
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800347a:	4b33      	ldr	r3, [pc, #204]	@ (8003548 <HAL_SAI_MspInit+0x154>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <HAL_SAI_MspInit+0x154>)
 8003482:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003484:	2308      	movs	r3, #8
 8003486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003494:	230d      	movs	r3, #13
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4619      	mov	r1, r3
 800349e:	482c      	ldr	r0, [pc, #176]	@ (8003550 <HAL_SAI_MspInit+0x15c>)
 80034a0:	f003 fa7e 	bl	80069a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80034a4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80034a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80034b6:	230d      	movs	r3, #13
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	4825      	ldr	r0, [pc, #148]	@ (8003558 <HAL_SAI_MspInit+0x164>)
 80034c2:	f003 fa6d 	bl	80069a0 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a24      	ldr	r2, [pc, #144]	@ (800355c <HAL_SAI_MspInit+0x168>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d135      	bne.n	800353c <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80034d0:	4b23      	ldr	r3, [pc, #140]	@ (8003560 <HAL_SAI_MspInit+0x16c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034d8:	4b1c      	ldr	r3, [pc, #112]	@ (800354c <HAL_SAI_MspInit+0x158>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_SAI_MspInit+0x158>)
 80034de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_SAI_MspInit+0x158>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80034f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003560 <HAL_SAI_MspInit+0x16c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003560 <HAL_SAI_MspInit+0x16c>)
 80034f8:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80034fa:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80034fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800350c:	230d      	movs	r3, #13
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4619      	mov	r1, r3
 8003516:	4813      	ldr	r0, [pc, #76]	@ (8003564 <HAL_SAI_MspInit+0x170>)
 8003518:	f003 fa42 	bl	80069a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800351c:	2340      	movs	r3, #64	@ 0x40
 800351e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800352c:	230d      	movs	r3, #13
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4619      	mov	r1, r3
 8003536:	480c      	ldr	r0, [pc, #48]	@ (8003568 <HAL_SAI_MspInit+0x174>)
 8003538:	f003 fa32 	bl	80069a0 <HAL_GPIO_Init>

    }
}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	@ 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40015404 	.word	0x40015404
 8003548:	200009c8 	.word	0x200009c8
 800354c:	40021000 	.word	0x40021000
 8003550:	48001000 	.word	0x48001000
 8003554:	40015424 	.word	0x40015424
 8003558:	48001400 	.word	0x48001400
 800355c:	40015804 	.word	0x40015804
 8003560:	200009cc 	.word	0x200009cc
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800

0800356c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <NMI_Handler+0x4>

08003574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <HardFault_Handler+0x4>

0800357c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <MemManage_Handler+0x4>

08003584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <BusFault_Handler+0x4>

0800358c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <UsageFault_Handler+0x4>

08003594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c2:	f001 ff4b 	bl	800545c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}

080035ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  return 1;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <_kill>:

int _kill(int pid, int sig)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e4:	f00a fabe 	bl	800db64 <__errno>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2216      	movs	r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
  return -1;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_exit>:

void _exit (int status)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003602:	f04f 31ff 	mov.w	r1, #4294967295
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffe7 	bl	80035da <_kill>
  while (1) {}    /* Make sure we hang here */
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <_exit+0x12>

08003610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e00a      	b.n	8003638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003622:	f3af 8000 	nop.w
 8003626:	4601      	mov	r1, r0
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	60ba      	str	r2, [r7, #8]
 800362e:	b2ca      	uxtb	r2, r1
 8003630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	dbf0      	blt.n	8003622 <_read+0x12>
  }

  return len;
 8003640:	687b      	ldr	r3, [r7, #4]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e009      	b.n	8003670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	60ba      	str	r2, [r7, #8]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f9df 	bl	8002a28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	dbf1      	blt.n	800365c <_write+0x12>
  }
  return len;
 8003678:	687b      	ldr	r3, [r7, #4]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_close>:

int _close(int file)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036aa:	605a      	str	r2, [r3, #4]
  return 0;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_isatty>:

int _isatty(int file)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036c2:	2301      	movs	r3, #1
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f4:	4a14      	ldr	r2, [pc, #80]	@ (8003748 <_sbrk+0x5c>)
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <_sbrk+0x60>)
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003700:	4b13      	ldr	r3, [pc, #76]	@ (8003750 <_sbrk+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003708:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <_sbrk+0x64>)
 800370a:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <_sbrk+0x68>)
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <_sbrk+0x64>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	429a      	cmp	r2, r3
 800371a:	d207      	bcs.n	800372c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800371c:	f00a fa22 	bl	800db64 <__errno>
 8003720:	4603      	mov	r3, r0
 8003722:	220c      	movs	r2, #12
 8003724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	e009      	b.n	8003740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800372c:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <_sbrk+0x64>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	4a05      	ldr	r2, [pc, #20]	@ (8003750 <_sbrk+0x64>)
 800373c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800373e:	68fb      	ldr	r3, [r7, #12]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200a0000 	.word	0x200a0000
 800374c:	00000400 	.word	0x00000400
 8003750:	200009d0 	.word	0x200009d0
 8003754:	20000b40 	.word	0x20000b40

08003758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <SystemInit+0x20>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <SystemInit+0x20>)
 8003764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800378e:	89fb      	ldrh	r3, [r7, #14]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b21a      	sxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b21b      	sxth	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b21b      	sxth	r3, r3
 800379e:	b29b      	uxth	r3, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2204      	movs	r2, #4
 80037c6:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b21a      	sxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	b21a      	sxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 8003872:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800387c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e010      	b.n	80038c2 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	330a      	adds	r3, #10
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	2200      	movs	r2, #0
 80038ac:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	330a      	adds	r3, #10
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	2200      	movs	r2, #0
 80038ba:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	3301      	adds	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d9eb      	bls.n	80038a0 <UG_Init+0xf4>
   }

   gui = g;
 80038c8:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <UG_Init+0x130>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
   return 1;
 80038ce:	2301      	movs	r3, #1
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	200009d4 	.word	0x200009d4

080038e0 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80038e8:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <UG_FontSelect+0x1c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	200009d4 	.word	0x200009d4

08003900 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800390a:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <UG_FillScreen+0x44>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	b21a      	sxth	r2, r3
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <UG_FillScreen+0x44>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	b219      	sxth	r1, r3
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	460b      	mov	r3, r1
 8003934:	2100      	movs	r1, #0
 8003936:	2000      	movs	r0, #0
 8003938:	f000 f806 	bl	8003948 <UG_FillFrame>
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	200009d4 	.word	0x200009d4

08003948 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	4604      	mov	r4, r0
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4623      	mov	r3, r4
 8003958:	80fb      	strh	r3, [r7, #6]
 800395a:	4603      	mov	r3, r0
 800395c:	80bb      	strh	r3, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	807b      	strh	r3, [r7, #2]
 8003962:	4613      	mov	r3, r2
 8003964:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8003966:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800396a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800396e:	429a      	cmp	r2, r3
 8003970:	da05      	bge.n	800397e <UG_FillFrame+0x36>
     swap(x1,x2);
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	80fb      	strh	r3, [r7, #6]
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800397e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003982:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	da05      	bge.n	8003996 <UG_FillFrame+0x4e>
     swap(y1,y2);
 800398a:	88bb      	ldrh	r3, [r7, #4]
 800398c:	813b      	strh	r3, [r7, #8]
 800398e:	883b      	ldrh	r3, [r7, #0]
 8003990:	80bb      	strh	r3, [r7, #4]
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 8003996:	88bb      	ldrh	r3, [r7, #4]
 8003998:	81bb      	strh	r3, [r7, #12]
 800399a:	e01e      	b.n	80039da <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	81fb      	strh	r3, [r7, #14]
 80039a0:	e00f      	b.n	80039c2 <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <UG_FillFrame+0xa8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	8c3a      	ldrh	r2, [r7, #32]
 80039ac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80039b0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80039b4:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80039b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	81fb      	strh	r3, [r7, #14]
 80039c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80039c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	dde9      	ble.n	80039a2 <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 80039ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	81bb      	strh	r3, [r7, #12]
 80039da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80039de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	ddda      	ble.n	800399c <UG_FillFrame+0x54>
      }
   }
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	200009d4 	.word	0x200009d4

080039f4 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	80fb      	strh	r3, [r7, #6]
 8003a06:	4603      	mov	r3, r0
 8003a08:	80bb      	strh	r3, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	807b      	strh	r3, [r7, #2]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8003a12:	4b67      	ldr	r3, [pc, #412]	@ (8003bb0 <UG_DrawLine+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d013      	beq.n	8003a4a <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8003a22:	4b63      	ldr	r3, [pc, #396]	@ (8003bb0 <UG_DrawLine+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	461d      	mov	r5, r3
 8003a2a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003a2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003a32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a3a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4623      	mov	r3, r4
 8003a40:	47a8      	blx	r5
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80ae 	beq.w	8003ba6 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8003a54:	883a      	ldrh	r2, [r7, #0]
 8003a56:	88bb      	ldrh	r3, [r7, #4]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8003a5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bfb8      	it	lt
 8003a66:	425b      	neglt	r3, r3
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8003a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfb8      	it	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8003a7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	dd01      	ble.n	8003a86 <UG_DrawLine+0x92>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e001      	b.n	8003a8a <UG_DrawLine+0x96>
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8003a8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dd01      	ble.n	8003a98 <UG_DrawLine+0xa4>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e001      	b.n	8003a9c <UG_DrawLine+0xa8>
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8003a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aa2:	105b      	asrs	r3, r3, #1
 8003aa4:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8003aa6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003aaa:	105b      	asrs	r3, r3, #1
 8003aac:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8003ab2:	88bb      	ldrh	r3, [r7, #4]
 8003ab4:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8003ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb0 <UG_DrawLine+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003ac0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003ac4:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003ac8:	4798      	blx	r3

   if( dxabs >= dyabs )
 8003aca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003ace:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	db33      	blt.n	8003b3e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	83fb      	strh	r3, [r7, #30]
 8003ada:	e029      	b.n	8003b30 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8003adc:	8b7a      	ldrh	r2, [r7, #26]
 8003ade:	89fb      	ldrh	r3, [r7, #14]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8003ae6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003aea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	db09      	blt.n	8003b06 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8003af2:	8b7a      	ldrh	r2, [r7, #26]
 8003af4:	8a3b      	ldrh	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8003afc:	8afa      	ldrh	r2, [r7, #22]
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	4413      	add	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8003b06:	8b3a      	ldrh	r2, [r7, #24]
 8003b08:	89bb      	ldrh	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8003b10:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <UG_DrawLine+0x1bc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003b1a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003b1e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003b22:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8003b24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	83fb      	strh	r3, [r7, #30]
 8003b30:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003b34:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	dbcf      	blt.n	8003adc <UG_DrawLine+0xe8>
 8003b3c:	e034      	b.n	8003ba8 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8003b3e:	2300      	movs	r3, #0
 8003b40:	83fb      	strh	r3, [r7, #30]
 8003b42:	e029      	b.n	8003b98 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8003b44:	8bba      	ldrh	r2, [r7, #28]
 8003b46:	8a3b      	ldrh	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8003b4e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	db09      	blt.n	8003b6e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8003b5a:	8bba      	ldrh	r2, [r7, #28]
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8003b64:	8b3a      	ldrh	r2, [r7, #24]
 8003b66:	89bb      	ldrh	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8003b6e:	8afa      	ldrh	r2, [r7, #22]
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	4413      	add	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8003b78:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <UG_DrawLine+0x1bc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003b82:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003b86:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003b8a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8003b8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	83fb      	strh	r3, [r7, #30]
 8003b98:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	dbcf      	blt.n	8003b44 <UG_DrawLine+0x150>
 8003ba4:	e000      	b.n	8003ba8 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8003ba6:	bf00      	nop
      }
   }  
}
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bdb0      	pop	{r4, r5, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200009d4 	.word	0x200009d4

08003bb4 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	4603      	mov	r3, r0
 8003bbc:	603a      	str	r2, [r7, #0]
 8003bbe:	80fb      	strh	r3, [r7, #6]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8003bc8:	88bb      	ldrh	r3, [r7, #4]
 8003bca:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8003bcc:	4b44      	ldr	r3, [pc, #272]	@ (8003ce0 <UG_PutString+0x12c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fae4 	bl	80041a0 <_UG_FontSelect>
   while ( *str != 0 )
 8003bd8:	e064      	b.n	8003ca4 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003bda:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <UG_PutString+0x12c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8003be6:	463b      	mov	r3, r7
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f915 	bl	8003e18 <_UG_DecodeUTF8>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	817b      	strh	r3, [r7, #10]
 8003bf2:	e004      	b.n	8003bfe <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	603a      	str	r2, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	2b0a      	cmp	r3, #10
 8003c02:	d105      	bne.n	8003c10 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8003c04:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	81fb      	strh	r3, [r7, #14]
         continue;
 8003c0e:	e049      	b.n	8003ca4 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f977 	bl	8003f08 <_UG_GetCharData>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8003c1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d03c      	beq.n	8003ca2 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8003c28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4299      	cmp	r1, r3
 8003c40:	dc11      	bgt.n	8003c66 <UG_PutString+0xb2>
      {
         xp = x;
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8003c46:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003c4e:	b21b      	sxth	r3, r3
 8003c50:	4a23      	ldr	r2, [pc, #140]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 8003c58:	4413      	add	r3, r2
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	89bb      	ldrh	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8003c66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8003c76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c7a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003c7e:	8978      	ldrh	r0, [r7, #10]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4623      	mov	r3, r4
 8003c84:	f000 fb0e 	bl	80042a4 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <UG_PutString+0x12c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	893b      	ldrh	r3, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	81fb      	strh	r3, [r7, #14]
 8003ca0:	e000      	b.n	8003ca4 <UG_PutString+0xf0>
      if(cw==-1) continue;
 8003ca2:	bf00      	nop
   while ( *str != 0 )
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d196      	bne.n	8003bda <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8003cac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <UG_PutString+0x12c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8003cbc:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <UG_PutString+0x12c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc2:	461c      	mov	r4, r3
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	47a0      	blx	r4
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200009d4 	.word	0x200009d4

08003ce4 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	80fb      	strh	r3, [r7, #6]
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80bb      	strh	r3, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	807b      	strh	r3, [r7, #2]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 8003d02:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <UG_PutChar+0x74>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fa49 	bl	80041a0 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 8003d0e:	883c      	ldrh	r4, [r7, #0]
 8003d10:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d18:	88f8      	ldrh	r0, [r7, #6]
 8003d1a:	8b3b      	ldrh	r3, [r7, #24]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4623      	mov	r3, r4
 8003d20:	f000 fac0 	bl	80042a4 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <UG_PutChar+0x74>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8003d34:	4b08      	ldr	r3, [pc, #32]	@ (8003d58 <UG_PutChar+0x74>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	f04f 31ff 	mov.w	r1, #4294967295
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	47a0      	blx	r4
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200009d4 	.word	0x200009d4

08003d5c <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8003d66:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <UG_SetForecolor+0x20>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	200009d4 	.word	0x200009d4

08003d80 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8003d8a:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <UG_SetBackcolor+0x20>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200009d4 	.word	0x200009d4

08003da4 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <UG_FontSetHSpace+0x24>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	b252      	sxtb	r2, r2
 8003db6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	200009d4 	.word	0x200009d4

08003dcc <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <UG_FontSetVSpace+0x24>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	b252      	sxtb	r2, r2
 8003dde:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	200009d4 	.word	0x200009d4

08003df4 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8003dfe:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <UG_FontSetTransparency+0x20>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	79fa      	ldrb	r2, [r7, #7]
 8003e04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	200009d4 	.word	0x200009d4

08003e18 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  char c=**str;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8003e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db07      	blt.n	8003e40 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
    return c;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	e05c      	b.n	8003efa <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8003e48:	e04f      	b.n	8003eea <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8003e5c:	7bbb      	ldrb	r3, [r7, #14]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d130      	bne.n	8003ec4 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2bdf      	cmp	r3, #223	@ 0xdf
 8003e66:	d806      	bhi.n	8003e76 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e023      	b.n	8003ebe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2bef      	cmp	r3, #239	@ 0xef
 8003e7a:	d806      	bhi.n	8003e8a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e019      	b.n	8003ebe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2bf7      	cmp	r3, #247	@ 0xf7
 8003e8e:	d806      	bhi.n	8003e9e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8003e90:	2303      	movs	r3, #3
 8003e92:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e00f      	b.n	8003ebe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2bfb      	cmp	r3, #251	@ 0xfb
 8003ea2:	d806      	bhi.n	8003eb2 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e005      	b.n	8003ebe <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	81bb      	strh	r3, [r7, #12]
 8003ec2:	e012      	b.n	8003eea <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8003ec4:	89bb      	ldrh	r3, [r7, #12]
 8003ec6:	019b      	lsls	r3, r3, #6
 8003ec8:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	b21b      	sxth	r3, r3
 8003ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ed2:	b21a      	sxth	r2, r3
 8003ed4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	73bb      	strb	r3, [r7, #14]
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <_UG_DecodeUTF8+0xde>
  while(**str)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1aa      	bne.n	8003e4a <_UG_DecodeUTF8+0x32>
 8003ef4:	e000      	b.n	8003ef8 <_UG_DecodeUTF8+0xe0>
        break;
 8003ef6:	bf00      	nop
    }
  }
  return encoding;
 8003ef8:	89bb      	ldrh	r3, [r7, #12]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8003f28:	4b98      	ldr	r3, [pc, #608]	@ (800418c <_UG_GetCharData+0x284>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f2e:	4b98      	ldr	r3, [pc, #608]	@ (8004190 <_UG_GetCharData+0x288>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10f      	bne.n	8003f56 <_UG_GetCharData+0x4e>
 8003f36:	4b97      	ldr	r3, [pc, #604]	@ (8004194 <_UG_GetCharData+0x28c>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d10a      	bne.n	8003f56 <_UG_GetCharData+0x4e>
    if(p){
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8003f46:	4b94      	ldr	r3, [pc, #592]	@ (8004198 <_UG_GetCharData+0x290>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8003f4e:	4b93      	ldr	r3, [pc, #588]	@ (800419c <_UG_GetCharData+0x294>)
 8003f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f54:	e116      	b.n	8004184 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8003f56:	4b8d      	ldr	r3, [pc, #564]	@ (800418c <_UG_GetCharData+0x284>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80cc 	beq.w	80040fc <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	2bfc      	cmp	r3, #252	@ 0xfc
 8003f68:	f300 80c8 	bgt.w	80040fc <_UG_GetCharData+0x1f4>
 8003f6c:	2bd6      	cmp	r3, #214	@ 0xd6
 8003f6e:	da09      	bge.n	8003f84 <_UG_GetCharData+0x7c>
 8003f70:	2bc4      	cmp	r3, #196	@ 0xc4
 8003f72:	d06c      	beq.n	800404e <_UG_GetCharData+0x146>
 8003f74:	2bc4      	cmp	r3, #196	@ 0xc4
 8003f76:	f300 80c1 	bgt.w	80040fc <_UG_GetCharData+0x1f4>
 8003f7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8003f7c:	d06d      	beq.n	800405a <_UG_GetCharData+0x152>
 8003f7e:	2bb5      	cmp	r3, #181	@ 0xb5
 8003f80:	d068      	beq.n	8004054 <_UG_GetCharData+0x14c>
 8003f82:	e06e      	b.n	8004062 <_UG_GetCharData+0x15a>
 8003f84:	3bd6      	subs	r3, #214	@ 0xd6
 8003f86:	2b26      	cmp	r3, #38	@ 0x26
 8003f88:	f200 80b8 	bhi.w	80040fc <_UG_GetCharData+0x1f4>
 8003f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f94 <_UG_GetCharData+0x8c>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08004037 	.word	0x08004037
 8003f98:	080040fd 	.word	0x080040fd
 8003f9c:	080040fd 	.word	0x080040fd
 8003fa0:	080040fd 	.word	0x080040fd
 8003fa4:	080040fd 	.word	0x080040fd
 8003fa8:	080040fd 	.word	0x080040fd
 8003fac:	08004043 	.word	0x08004043
 8003fb0:	080040fd 	.word	0x080040fd
 8003fb4:	080040fd 	.word	0x080040fd
 8003fb8:	080040fd 	.word	0x080040fd
 8003fbc:	080040fd 	.word	0x080040fd
 8003fc0:	080040fd 	.word	0x080040fd
 8003fc4:	080040fd 	.word	0x080040fd
 8003fc8:	080040fd 	.word	0x080040fd
 8003fcc:	08004049 	.word	0x08004049
 8003fd0:	080040fd 	.word	0x080040fd
 8003fd4:	080040fd 	.word	0x080040fd
 8003fd8:	080040fd 	.word	0x080040fd
 8003fdc:	080040fd 	.word	0x080040fd
 8003fe0:	080040fd 	.word	0x080040fd
 8003fe4:	080040fd 	.word	0x080040fd
 8003fe8:	080040fd 	.word	0x080040fd
 8003fec:	080040fd 	.word	0x080040fd
 8003ff0:	080040fd 	.word	0x080040fd
 8003ff4:	080040fd 	.word	0x080040fd
 8003ff8:	080040fd 	.word	0x080040fd
 8003ffc:	080040fd 	.word	0x080040fd
 8004000:	080040fd 	.word	0x080040fd
 8004004:	080040fd 	.word	0x080040fd
 8004008:	080040fd 	.word	0x080040fd
 800400c:	080040fd 	.word	0x080040fd
 8004010:	080040fd 	.word	0x080040fd
 8004014:	08004031 	.word	0x08004031
 8004018:	080040fd 	.word	0x080040fd
 800401c:	080040fd 	.word	0x080040fd
 8004020:	080040fd 	.word	0x080040fd
 8004024:	080040fd 	.word	0x080040fd
 8004028:	080040fd 	.word	0x080040fd
 800402c:	0800403d 	.word	0x0800403d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8004030:	2394      	movs	r3, #148	@ 0x94
 8004032:	80fb      	strh	r3, [r7, #6]
 8004034:	e015      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8004036:	2399      	movs	r3, #153	@ 0x99
 8004038:	80fb      	strh	r3, [r7, #6]
 800403a:	e012      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800403c:	2381      	movs	r3, #129	@ 0x81
 800403e:	80fb      	strh	r3, [r7, #6]
 8004040:	e00f      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8004042:	239a      	movs	r3, #154	@ 0x9a
 8004044:	80fb      	strh	r3, [r7, #6]
 8004046:	e00c      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8004048:	2384      	movs	r3, #132	@ 0x84
 800404a:	80fb      	strh	r3, [r7, #6]
 800404c:	e009      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 800404e:	238e      	movs	r3, #142	@ 0x8e
 8004050:	80fb      	strh	r3, [r7, #6]
 8004052:	e006      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8004054:	23e6      	movs	r3, #230	@ 0xe6
 8004056:	80fb      	strh	r3, [r7, #6]
 8004058:	e003      	b.n	8004062 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 800405a:	23f8      	movs	r3, #248	@ 0xf8
 800405c:	80fb      	strh	r3, [r7, #6]
 800405e:	bf00      	nop
 8004060:	e04c      	b.n	80040fc <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004062:	e04b      	b.n	80040fc <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8004064:	4b49      	ldr	r3, [pc, #292]	@ (800418c <_UG_GetCharData+0x284>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	8a7a      	ldrh	r2, [r7, #18]
 800406c:	0052      	lsls	r2, r2, #1
 800406e:	4413      	add	r3, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fb83 	bl	800377c <ptr_8to16>
 8004076:	4603      	mov	r3, r0
 8004078:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800407a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da06      	bge.n	8004090 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004088:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800408a:	2301      	movs	r3, #1
 800408c:	747b      	strb	r3, [r7, #17]
 800408e:	e032      	b.n	80040f6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8004090:	7c7b      	ldrb	r3, [r7, #17]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d021      	beq.n	80040da <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	8afb      	ldrh	r3, [r7, #22]
 800409a:	429a      	cmp	r2, r3
 800409c:	d30d      	bcc.n	80040ba <_UG_GetCharData+0x1b2>
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	89fb      	ldrh	r3, [r7, #14]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d809      	bhi.n	80040ba <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	8afb      	ldrh	r3, [r7, #22]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	8abb      	ldrh	r3, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	82bb      	strh	r3, [r7, #20]
        found=1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	743b      	strb	r3, [r7, #16]
        break;
 80040b8:	e02a      	b.n	8004110 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	8afb      	ldrh	r3, [r7, #22]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d323      	bcc.n	800410a <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80040c2:	89fa      	ldrh	r2, [r7, #14]
 80040c4:	8afb      	ldrh	r3, [r7, #22]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	8abb      	ldrh	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	82bb      	strh	r3, [r7, #20]
      range=0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	747b      	strb	r3, [r7, #17]
 80040d8:	e00d      	b.n	80040f6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	89fb      	ldrh	r3, [r7, #14]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d102      	bne.n	80040e8 <_UG_GetCharData+0x1e0>
      {
        found=1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	743b      	strb	r3, [r7, #16]
        break;
 80040e6:	e013      	b.n	8004110 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	89fb      	ldrh	r3, [r7, #14]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d30e      	bcc.n	800410e <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80040f0:	8abb      	ldrh	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80040f6:	8a7b      	ldrh	r3, [r7, #18]
 80040f8:	3301      	adds	r3, #1
 80040fa:	827b      	strh	r3, [r7, #18]
 80040fc:	4b23      	ldr	r3, [pc, #140]	@ (800418c <_UG_GetCharData+0x284>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004102:	8a7a      	ldrh	r2, [r7, #18]
 8004104:	429a      	cmp	r2, r3
 8004106:	d3ad      	bcc.n	8004064 <_UG_GetCharData+0x15c>
 8004108:	e002      	b.n	8004110 <_UG_GetCharData+0x208>
        break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <_UG_GetCharData+0x208>
        break;
 800410e:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8004110:	7c3b      	ldrb	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d034      	beq.n	8004180 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8004116:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <_UG_GetCharData+0x284>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411c:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <_UG_GetCharData+0x288>)
 800411e:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8004120:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <_UG_GetCharData+0x28c>)
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8004126:	4b19      	ldr	r3, [pc, #100]	@ (800418c <_UG_GetCharData+0x284>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	8aba      	ldrh	r2, [r7, #20]
 800412e:	4917      	ldr	r1, [pc, #92]	@ (800418c <_UG_GetCharData+0x284>)
 8004130:	6809      	ldr	r1, [r1, #0]
 8004132:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 8004134:	fb01 f202 	mul.w	r2, r1, r2
 8004138:	4413      	add	r3, r2
 800413a:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <_UG_GetCharData+0x290>)
 800413c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800413e:	4b13      	ldr	r3, [pc, #76]	@ (800418c <_UG_GetCharData+0x284>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8004148:	4b10      	ldr	r3, [pc, #64]	@ (800418c <_UG_GetCharData+0x284>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414e:	8abb      	ldrh	r3, [r7, #20]
 8004150:	4413      	add	r3, r2
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b21a      	sxth	r2, r3
 8004156:	4b11      	ldr	r3, [pc, #68]	@ (800419c <_UG_GetCharData+0x294>)
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e006      	b.n	800416a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <_UG_GetCharData+0x284>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004164:	b21a      	sxth	r2, r3
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <_UG_GetCharData+0x294>)
 8004168:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <_UG_GetCharData+0x290>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8004178:	4b08      	ldr	r3, [pc, #32]	@ (800419c <_UG_GetCharData+0x294>)
 800417a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800417e:	e001      	b.n	8004184 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200009d4 	.word	0x200009d4
 8004190:	200009d8 	.word	0x200009d8
 8004194:	200009dc 	.word	0x200009dc
 8004198:	200009e0 	.word	0x200009e0
 800419c:	200009e4 	.word	0x200009e4

080041a0 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80041a8:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <_UG_FontSelect+0x100>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d070      	beq.n	8004296 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80041b4:	4b3a      	ldr	r3, [pc, #232]	@ (80042a0 <_UG_FontSelect+0x100>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <_UG_FontSelect+0x100>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da01      	bge.n	80041e0 <_UG_FontSelect+0x40>
 80041dc:	2201      	movs	r2, #1
 80041de:	e000      	b.n	80041e2 <_UG_FontSelect+0x42>
 80041e0:	2200      	movs	r2, #0
 80041e2:	4b2f      	ldr	r3, [pc, #188]	@ (80042a0 <_UG_FontSelect+0x100>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	@ (80042a0 <_UG_FontSelect+0x100>)
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	4a27      	ldr	r2, [pc, #156]	@ (80042a0 <_UG_FontSelect+0x100>)
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 800420c:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <_UG_FontSelect+0x100>)
 800420e:	681c      	ldr	r4, [r3, #0]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fab3 	bl	800377c <ptr_8to16>
 8004216:	4603      	mov	r3, r0
 8004218:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3302      	adds	r3, #2
 800421e:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8004220:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <_UG_FontSelect+0x100>)
 8004222:	681c      	ldr	r4, [r3, #0]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff faa9 	bl	800377c <ptr_8to16>
 800422a:	4603      	mov	r3, r0
 800422c:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3302      	adds	r3, #2
 8004232:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8004234:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <_UG_FontSelect+0x100>)
 8004236:	681c      	ldr	r4, [r3, #0]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fa9f 	bl	800377c <ptr_8to16>
 800423e:	4603      	mov	r3, r0
 8004240:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3302      	adds	r3, #2
 8004246:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <_UG_FontSelect+0x100>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800425c:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <_UG_FontSelect+0x100>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	e003      	b.n	8004274 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <_UG_FontSelect+0x100>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8004274:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <_UG_FontSelect+0x100>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800427c:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <_UG_FontSelect+0x100>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800428c:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <_UG_FontSelect+0x100>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40
 8004294:	e000      	b.n	8004298 <_UG_FontSelect+0xf8>
    return;
 8004296:	bf00      	nop
}
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bd90      	pop	{r4, r7, pc}
 800429e:	bf00      	nop
 80042a0:	200009d4 	.word	0x200009d4

080042a4 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b08c      	sub	sp, #48	@ 0x30
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	80fb      	strh	r3, [r7, #6]
 80042b6:	4603      	mov	r3, r0
 80042b8:	80bb      	strh	r3, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	807b      	strh	r3, [r7, #2]
 80042be:	4613      	mov	r3, r2
 80042c0:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80042c6:	2300      	movs	r3, #0
 80042c8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80042ca:	2300      	movs	r3, #0
 80042cc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80042ce:	2300      	movs	r3, #0
 80042d0:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80042d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004500 <_UG_PutChar+0x25c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80042da:	75fb      	strb	r3, [r7, #23]
 80042dc:	4b88      	ldr	r3, [pc, #544]	@ (8004500 <_UG_PutChar+0x25c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80042ee:	f107 0208 	add.w	r2, r7, #8
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fe06 	bl	8003f08 <_UG_GetCharData>
 80042fc:	4603      	mov	r3, r0
 80042fe:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8004300:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d102      	bne.n	8004310 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e224      	b.n	800475a <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 8004310:	4b7b      	ldr	r3, [pc, #492]	@ (8004500 <_UG_PutChar+0x25c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004318:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 800431a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <_UG_PutChar+0x80>
     return 0;
 8004320:	2300      	movs	r3, #0
 8004322:	e21a      	b.n	800475a <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8004324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800432a:	4b75      	ldr	r3, [pc, #468]	@ (8004500 <_UG_PutChar+0x25c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <_UG_PutChar+0x9e>
 800433c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800433e:	3301      	adds	r3, #1
 8004340:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8004342:	7dbb      	ldrb	r3, [r7, #22]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01c      	beq.n	8004382 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8004348:	4b6d      	ldr	r3, [pc, #436]	@ (8004500 <_UG_PutChar+0x25c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800434e:	461c      	mov	r4, r3
 8004350:	88ba      	ldrh	r2, [r7, #4]
 8004352:	8abb      	ldrh	r3, [r7, #20]
 8004354:	4413      	add	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	b21a      	sxth	r2, r3
 800435e:	4b68      	ldr	r3, [pc, #416]	@ (8004500 <_UG_PutChar+0x25c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004366:	4619      	mov	r1, r3
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	440b      	add	r3, r1
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	b21b      	sxth	r3, r3
 8004374:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004378:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800437c:	47a0      	blx	r4
 800437e:	4603      	mov	r3, r0
 8004380:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8004382:	4b5f      	ldr	r3, [pc, #380]	@ (8004500 <_UG_PutChar+0x25c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 8171 	bne.w	8004672 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004390:	2300      	movs	r3, #0
 8004392:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004394:	e0eb      	b.n	800456e <_UG_PutChar+0x2ca>
     {
       c=0;
 8004396:	2300      	movs	r3, #0
 8004398:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800439a:	2300      	movs	r3, #0
 800439c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800439e:	e0de      	b.n	800455e <_UG_PutChar+0x2ba>
       {
         b = *data++;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	60ba      	str	r2, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80043aa:	2300      	movs	r3, #0
 80043ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80043ae:	e0c9      	b.n	8004544 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80043b0:	7f7b      	ldrb	r3, [r7, #29]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d033      	beq.n	8004422 <_UG_PutChar+0x17e>
           {
             if(driver)
 80043ba:	7dbb      	ldrb	r3, [r7, #22]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80043c0:	8c3b      	ldrh	r3, [r7, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <_UG_PutChar+0x138>
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80043cc:	8c3a      	ldrh	r2, [r7, #32]
 80043ce:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4610      	mov	r0, r2
 80043d6:	4798      	blx	r3
                 bpixels=0;
 80043d8:	2300      	movs	r3, #0
 80043da:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80043dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <_UG_PutChar+0x154>
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 80043e8:	88ba      	ldrh	r2, [r7, #4]
 80043ea:	8bfb      	ldrh	r3, [r7, #30]
 80043ec:	4413      	add	r3, r2
 80043ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 80043f0:	887a      	ldrh	r2, [r7, #2]
 80043f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80043f4:	4413      	add	r3, r2
 80043f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80043f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043fa:	3301      	adds	r3, #1
 80043fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80043fe:	e095      	b.n	800452c <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8004400:	4b3f      	ldr	r3, [pc, #252]	@ (8004500 <_UG_PutChar+0x25c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	88b9      	ldrh	r1, [r7, #4]
 800440a:	8bfa      	ldrh	r2, [r7, #30]
 800440c:	440a      	add	r2, r1
 800440e:	b292      	uxth	r2, r2
 8004410:	b210      	sxth	r0, r2
 8004412:	8879      	ldrh	r1, [r7, #2]
 8004414:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004416:	440a      	add	r2, r1
 8004418:	b292      	uxth	r2, r2
 800441a:	b211      	sxth	r1, r2
 800441c:	883a      	ldrh	r2, [r7, #0]
 800441e:	4798      	blx	r3
 8004420:	e084      	b.n	800452c <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8004422:	7dbb      	ldrb	r3, [r7, #22]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d06d      	beq.n	8004504 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8004428:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800442a:	2b00      	cmp	r3, #0
 800442c:	d064      	beq.n	80044f8 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d15e      	bne.n	80044f2 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8004434:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004436:	8839      	ldrh	r1, [r7, #0]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4610      	mov	r0, r2
 800443c:	4798      	blx	r3
                   fpixels=0;
 800443e:	2300      	movs	r3, #0
 8004440:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004442:	e059      	b.n	80044f8 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8004444:	88ba      	ldrh	r2, [r7, #4]
 8004446:	8abb      	ldrh	r3, [r7, #20]
 8004448:	4413      	add	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8004452:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004454:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d003      	beq.n	8004464 <_UG_PutChar+0x1c0>
 800445c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800445e:	89fb      	ldrh	r3, [r7, #14]
 8004460:	429a      	cmp	r2, r3
 8004462:	d224      	bcs.n	80044ae <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8004464:	4b26      	ldr	r3, [pc, #152]	@ (8004500 <_UG_PutChar+0x25c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446a:	461d      	mov	r5, r3
 800446c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004470:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004474:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004476:	89fb      	ldrh	r3, [r7, #14]
 8004478:	4413      	add	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29b      	uxth	r3, r3
 8004480:	b21c      	sxth	r4, r3
 8004482:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004484:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004488:	fb92 f3f3 	sdiv	r3, r2, r3
 800448c:	b29a      	uxth	r2, r3
 800448e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004490:	4413      	add	r3, r2
 8004492:	b29b      	uxth	r3, r3
 8004494:	b21b      	sxth	r3, r3
 8004496:	4622      	mov	r2, r4
 8004498:	47a8      	blx	r5
 800449a:	4603      	mov	r3, r0
 800449c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800449e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80044a0:	8839      	ldrh	r1, [r7, #0]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4610      	mov	r0, r2
 80044a6:	4798      	blx	r3
                       fpixels=0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044ac:	e021      	b.n	80044f2 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80044ae:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <_UG_PutChar+0x25c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b4:	461c      	mov	r4, r3
 80044b6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80044ba:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80044be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80044c0:	89fb      	ldrh	r3, [r7, #14]
 80044c2:	4413      	add	r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	b21a      	sxth	r2, r3
 80044cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80044d0:	47a0      	blx	r4
 80044d2:	4603      	mov	r3, r0
 80044d4:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80044d6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80044d8:	8839      	ldrh	r1, [r7, #0]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	4610      	mov	r0, r2
 80044de:	4798      	blx	r3
                       fpixels -= width;
 80044e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80044e2:	89fb      	ldrh	r3, [r7, #14]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 80044e8:	88bb      	ldrh	r3, [r7, #4]
 80044ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 80044ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80044ee:	3301      	adds	r3, #1
 80044f0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 80044f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1a5      	bne.n	8004444 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 80044f8:	8c3b      	ldrh	r3, [r7, #32]
 80044fa:	3301      	adds	r3, #1
 80044fc:	843b      	strh	r3, [r7, #32]
 80044fe:	e015      	b.n	800452c <_UG_PutChar+0x288>
 8004500:	200009d4 	.word	0x200009d4
             }
             else if(!trans)                           // Not accelerated output
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d110      	bne.n	800452c <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 800450a:	4b96      	ldr	r3, [pc, #600]	@ (8004764 <_UG_PutChar+0x4c0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	88b9      	ldrh	r1, [r7, #4]
 8004514:	8bfa      	ldrh	r2, [r7, #30]
 8004516:	440a      	add	r2, r1
 8004518:	b292      	uxth	r2, r2
 800451a:	b210      	sxth	r0, r2
 800451c:	8879      	ldrh	r1, [r7, #2]
 800451e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004520:	440a      	add	r2, r1
 8004522:	b292      	uxth	r2, r2
 8004524:	b211      	sxth	r1, r2
 8004526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800452a:	4798      	blx	r3
             }
           }
           b >>= 1;
 800452c:	7f7b      	ldrb	r3, [r7, #29]
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	777b      	strb	r3, [r7, #29]
           c++;
 8004532:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004536:	b29b      	uxth	r3, r3
 8004538:	3301      	adds	r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800453e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004540:	3301      	adds	r3, #1
 8004542:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004544:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004546:	2b07      	cmp	r3, #7
 8004548:	d806      	bhi.n	8004558 <_UG_PutChar+0x2b4>
 800454a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800454e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004552:	429a      	cmp	r2, r3
 8004554:	f6ff af2c 	blt.w	80043b0 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 8004558:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800455a:	3301      	adds	r3, #1
 800455c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800455e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004562:	429a      	cmp	r2, r3
 8004564:	f4ff af1c 	bcc.w	80043a0 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004568:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800456a:	3301      	adds	r3, #1
 800456c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800456e:	4b7d      	ldr	r3, [pc, #500]	@ (8004764 <_UG_PutChar+0x4c0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004576:	461a      	mov	r2, r3
 8004578:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800457a:	4293      	cmp	r3, r2
 800457c:	f4ff af0b 	bcc.w	8004396 <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8004580:	7dbb      	ldrb	r3, [r7, #22]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80e7 	beq.w	8004756 <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8004588:	8c3b      	ldrh	r3, [r7, #32]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <_UG_PutChar+0x2fe>
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8004594:	8c3a      	ldrh	r2, [r7, #32]
 8004596:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4610      	mov	r0, r2
 800459e:	4798      	blx	r3
 80045a0:	e0d9      	b.n	8004756 <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 80045a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80d6 	beq.w	8004756 <_UG_PutChar+0x4b2>
       {
         if(!trans)
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d15c      	bne.n	800466a <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 80045b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045b2:	8839      	ldrh	r1, [r7, #0]
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4610      	mov	r0, r2
 80045b8:	4798      	blx	r3
 80045ba:	e0cc      	b.n	8004756 <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80045bc:	88ba      	ldrh	r2, [r7, #4]
 80045be:	8abb      	ldrh	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80045ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80045cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d003      	beq.n	80045dc <_UG_PutChar+0x338>
 80045d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045d6:	8a3b      	ldrh	r3, [r7, #16]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d224      	bcs.n	8004626 <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80045dc:	4b61      	ldr	r3, [pc, #388]	@ (8004764 <_UG_PutChar+0x4c0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e2:	461d      	mov	r5, r3
 80045e4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80045e8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80045ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80045ee:	8a3b      	ldrh	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	b21c      	sxth	r4, r3
 80045fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004600:	fb92 f3f3 	sdiv	r3, r2, r3
 8004604:	b29a      	uxth	r2, r3
 8004606:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004608:	4413      	add	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	b21b      	sxth	r3, r3
 800460e:	4622      	mov	r2, r4
 8004610:	47a8      	blx	r5
 8004612:	4603      	mov	r3, r0
 8004614:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8004616:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004618:	8839      	ldrh	r1, [r7, #0]
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	4610      	mov	r0, r2
 800461e:	4798      	blx	r3
               fpixels=0;
 8004620:	2300      	movs	r3, #0
 8004622:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004624:	e021      	b.n	800466a <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8004626:	4b4f      	ldr	r3, [pc, #316]	@ (8004764 <_UG_PutChar+0x4c0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462c:	461c      	mov	r4, r3
 800462e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004632:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004636:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004638:	8a3b      	ldrh	r3, [r7, #16]
 800463a:	4413      	add	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	b21a      	sxth	r2, r3
 8004644:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004648:	47a0      	blx	r4
 800464a:	4603      	mov	r3, r0
 800464c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800464e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004650:	8839      	ldrh	r1, [r7, #0]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	4610      	mov	r0, r2
 8004656:	4798      	blx	r3
               fpixels -= width;
 8004658:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800465a:	8a3b      	ldrh	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8004660:	88bb      	ldrh	r3, [r7, #4]
 8004662:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8004664:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004666:	3301      	adds	r3, #1
 8004668:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 800466a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1a5      	bne.n	80045bc <_UG_PutChar+0x318>
 8004670:	e071      	b.n	8004756 <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8004672:	4b3c      	ldr	r3, [pc, #240]	@ (8004764 <_UG_PutChar+0x4c0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d16b      	bne.n	8004756 <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800467e:	2300      	movs	r3, #0
 8004680:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004682:	e060      	b.n	8004746 <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8004684:	2300      	movs	r3, #0
 8004686:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004688:	e04a      	b.n	8004720 <_UG_PutChar+0x47c>
       {
         b = *data++;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	60ba      	str	r2, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8004694:	883b      	ldrh	r3, [r7, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	7f7a      	ldrb	r2, [r7, #29]
 800469a:	fb03 f202 	mul.w	r2, r3, r2
 800469e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	7f79      	ldrb	r1, [r7, #29]
 80046a6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	121b      	asrs	r3, r3, #8
 80046b2:	b21b      	sxth	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80046b8:	883b      	ldrh	r3, [r7, #0]
 80046ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80046be:	7f79      	ldrb	r1, [r7, #29]
 80046c0:	fb03 f101 	mul.w	r1, r3, r1
 80046c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80046cc:	7f78      	ldrb	r0, [r7, #29]
 80046ce:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80046d2:	fb00 f303 	mul.w	r3, r0, r3
 80046d6:	440b      	add	r3, r1
 80046d8:	121b      	asrs	r3, r3, #8
 80046da:	b21b      	sxth	r3, r3
 80046dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046e0:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80046e2:	4313      	orrs	r3, r2
 80046e4:	b21b      	sxth	r3, r3
 80046e6:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80046e8:	7dbb      	ldrb	r3, [r7, #22]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80046ee:	8a7a      	ldrh	r2, [r7, #18]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4611      	mov	r1, r2
 80046f4:	2001      	movs	r0, #1
 80046f6:	4798      	blx	r3
 80046f8:	e00f      	b.n	800471a <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80046fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <_UG_PutChar+0x4c0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	88b9      	ldrh	r1, [r7, #4]
 8004704:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004706:	440a      	add	r2, r1
 8004708:	b292      	uxth	r2, r2
 800470a:	b210      	sxth	r0, r2
 800470c:	8879      	ldrh	r1, [r7, #2]
 800470e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004710:	440a      	add	r2, r1
 8004712:	b292      	uxth	r2, r2
 8004714:	b211      	sxth	r1, r2
 8004716:	8a7a      	ldrh	r2, [r7, #18]
 8004718:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800471a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800471c:	3301      	adds	r3, #1
 800471e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004720:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004726:	429a      	cmp	r2, r3
 8004728:	dbaf      	blt.n	800468a <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a0d      	ldr	r2, [pc, #52]	@ (8004764 <_UG_PutChar+0x4c0>)
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004734:	4611      	mov	r1, r2
 8004736:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800473a:	1a8a      	subs	r2, r1, r2
 800473c:	4413      	add	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004740:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004742:	3301      	adds	r3, #1
 8004744:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004746:	4b07      	ldr	r3, [pc, #28]	@ (8004764 <_UG_PutChar+0x4c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800474e:	461a      	mov	r2, r3
 8004750:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004752:	4293      	cmp	r3, r2
 8004754:	d396      	bcc.n	8004684 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 8004756:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3730      	adds	r7, #48	@ 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bdb0      	pop	{r4, r5, r7, pc}
 8004762:	bf00      	nop
 8004764:	200009d4 	.word	0x200009d4

08004768 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	@ 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8004770:	4b57      	ldr	r3, [pc, #348]	@ (80048d0 <_UG_ProcessTouchData+0x168>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	88db      	ldrh	r3, [r3, #6]
 8004776:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8004778:	4b55      	ldr	r3, [pc, #340]	@ (80048d0 <_UG_ProcessTouchData+0x168>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	891b      	ldrh	r3, [r3, #8]
 800477e:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8004780:	4b53      	ldr	r3, [pc, #332]	@ (80048d0 <_UG_ProcessTouchData+0x168>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	791b      	ldrb	r3, [r3, #4]
 8004786:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	83fb      	strh	r3, [r7, #30]
 8004792:	e090      	b.n	80048b6 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	8bfb      	ldrh	r3, [r7, #30]
 800479a:	015b      	lsls	r3, r3, #5
 800479c:	4413      	add	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d179      	bne.n	80048aa <_UG_ProcessTouchData+0x142>
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d074      	beq.n	80048aa <_UG_ProcessTouchData+0x142>
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d06f      	beq.n	80048aa <_UG_ProcessTouchData+0x142>
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d16a      	bne.n	80048aa <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d047      	beq.n	800486a <_UG_ProcessTouchData+0x102>
 80047da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d042      	beq.n	800486a <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80047e4:	7f7b      	ldrb	r3, [r7, #29]
 80047e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d107      	bne.n	80047fe <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80047ee:	7f7b      	ldrb	r3, [r7, #29]
 80047f0:	f043 0305 	orr.w	r3, r3, #5
 80047f4:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80047f6:	7f7b      	ldrb	r3, [r7, #29]
 80047f8:	f023 0318 	bic.w	r3, r3, #24
 80047fc:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80047fe:	7f7b      	ldrb	r3, [r7, #29]
 8004800:	f023 0320 	bic.w	r3, r3, #32
 8004804:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800480c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004810:	429a      	cmp	r2, r3
 8004812:	db25      	blt.n	8004860 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800481a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800481e:	429a      	cmp	r2, r3
 8004820:	dc1e      	bgt.n	8004860 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004828:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	db17      	blt.n	8004860 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004836:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800483a:	429a      	cmp	r2, r3
 800483c:	dc10      	bgt.n	8004860 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800483e:	7f7b      	ldrb	r3, [r7, #29]
 8004840:	f043 0320 	orr.w	r3, r3, #32
 8004844:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8004846:	7f7b      	ldrb	r3, [r7, #29]
 8004848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8004850:	7f7b      	ldrb	r3, [r7, #29]
 8004852:	f023 0304 	bic.w	r3, r3, #4
 8004856:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8004858:	7f7b      	ldrb	r3, [r7, #29]
 800485a:	f043 0302 	orr.w	r3, r3, #2
 800485e:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8004860:	7f7b      	ldrb	r3, [r7, #29]
 8004862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004866:	777b      	strb	r3, [r7, #29]
 8004868:	e01f      	b.n	80048aa <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800486a:	7f7b      	ldrb	r3, [r7, #29]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01a      	beq.n	80048aa <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8004874:	7f7b      	ldrb	r3, [r7, #29]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 800487e:	7f7b      	ldrb	r3, [r7, #29]
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	777b      	strb	r3, [r7, #29]
 8004886:	e003      	b.n	8004890 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8004888:	7f7b      	ldrb	r3, [r7, #29]
 800488a:	f043 0310 	orr.w	r3, r3, #16
 800488e:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8004890:	7f7b      	ldrb	r3, [r7, #29]
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800489a:	7f7b      	ldrb	r3, [r7, #29]
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80048a2:	7f7b      	ldrb	r3, [r7, #29]
 80048a4:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 80048a8:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	7f7a      	ldrb	r2, [r7, #29]
 80048ae:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80048b0:	8bfb      	ldrh	r3, [r7, #30]
 80048b2:	3301      	adds	r3, #1
 80048b4:	83fb      	strh	r3, [r7, #30]
 80048b6:	8bfa      	ldrh	r2, [r7, #30]
 80048b8:	8abb      	ldrh	r3, [r7, #20]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	f4ff af6a 	bcc.w	8004794 <_UG_ProcessTouchData+0x2c>
   }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3724      	adds	r7, #36	@ 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	200009d4 	.word	0x200009d4

080048d4 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	82fb      	strh	r3, [r7, #22]
 80048e6:	e035      	b.n	8004954 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	8afb      	ldrh	r3, [r7, #22]
 80048ee:	015b      	lsls	r3, r3, #5
 80048f0:	4413      	add	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d121      	bne.n	800494e <_UG_UpdateObjects+0x7a>
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01c      	beq.n	800494e <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	6939      	ldr	r1, [r7, #16]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <_UG_UpdateObjects+0x7a>
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	da09      	bge.n	800494e <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 800493a:	7bbb      	ldrb	r3, [r7, #14]
 800493c:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	3301      	adds	r3, #1
 8004952:	82fb      	strh	r3, [r7, #22]
 8004954:	8afa      	ldrh	r2, [r7, #22]
 8004956:	8abb      	ldrh	r3, [r7, #20]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3c5      	bcc.n	80048e8 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8004970:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <_UG_HandleEvents+0x94>)
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8004976:	4b21      	ldr	r3, [pc, #132]	@ (80049fc <_UG_HandleEvents+0x94>)
 8004978:	2202      	movs	r2, #2
 800497a:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	82fb      	strh	r3, [r7, #22]
 8004986:	e02f      	b.n	80049e8 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	8afb      	ldrh	r3, [r7, #22]
 800498e:	015b      	lsls	r3, r3, #5
 8004990:	4413      	add	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11e      	bne.n	80049e2 <_UG_HandleEvents+0x7a>
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d019      	beq.n	80049e2 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	7e9b      	ldrb	r3, [r3, #26]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d015      	beq.n	80049e2 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80049b6:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <_UG_HandleEvents+0x94>)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	7e1a      	ldrb	r2, [r3, #24]
 80049c0:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <_UG_HandleEvents+0x94>)
 80049c2:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	7e5a      	ldrb	r2, [r3, #25]
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <_UG_HandleEvents+0x94>)
 80049ca:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	7e9a      	ldrb	r2, [r3, #26]
 80049d0:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <_UG_HandleEvents+0x94>)
 80049d2:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	4808      	ldr	r0, [pc, #32]	@ (80049fc <_UG_HandleEvents+0x94>)
 80049da:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2200      	movs	r2, #0
 80049e0:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80049e2:	8afb      	ldrh	r3, [r7, #22]
 80049e4:	3301      	adds	r3, #1
 80049e6:	82fb      	strh	r3, [r7, #22]
 80049e8:	8afa      	ldrh	r2, [r7, #22]
 80049ea:	8abb      	ldrh	r3, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d3cb      	bcc.n	8004988 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200009e8 	.word	0x200009e8

08004a00 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b08f      	sub	sp, #60	@ 0x3c
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 812c 	beq.w	8004c6a <_UG_PutText+0x26a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8127 	beq.w	8004c6a <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	89db      	ldrh	r3, [r3, #14]
 8004a20:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	895b      	ldrh	r3, [r3, #10]
 8004a26:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8004a32:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004a36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004a3a:	1ad2      	subs	r2, r2, r3
 8004a3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	f2c0 8114 	blt.w	8004c6e <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	891b      	ldrh	r3, [r3, #8]
 8004a4a:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	899b      	ldrh	r3, [r3, #12]
 8004a50:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7d1b      	ldrb	r3, [r3, #20]
 8004a56:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8adb      	ldrh	r3, [r3, #22]
 8004a5c:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8b1b      	ldrh	r3, [r3, #24]
 8004a62:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fb94 	bl	80041a0 <_UG_FontSelect>

   rc=1;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004a80:	4b80      	ldr	r3, [pc, #512]	@ (8004c84 <_UG_PutText+0x284>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f9c1 	bl	8003e18 <_UG_DecodeUTF8>
 8004a96:	4603      	mov	r3, r0
 8004a98:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004a9a:	e004      	b.n	8004aa6 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	60ba      	str	r2, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8004aa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8004aac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004aae:	2b0a      	cmp	r3, #10
 8004ab0:	d1e6      	bne.n	8004a80 <_UG_PutText+0x80>
 8004ab2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004ab8:	e7e2      	b.n	8004a80 <_UG_PutText+0x80>
     if(!chr) break;
 8004aba:	bf00      	nop
   }

   yp = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8004ac0:	7e7b      	ldrb	r3, [r7, #25]
 8004ac2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01f      	beq.n	8004b0a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8004aca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004acc:	8c3b      	ldrh	r3, [r7, #32]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8004ad8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004ada:	8bfb      	ldrh	r3, [r7, #30]
 8004adc:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8004ade:	fb11 f303 	smulbb	r3, r1, r3
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 8004aea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004aec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b299      	uxth	r1, r3
 8004af2:	8abb      	ldrh	r3, [r7, #20]
 8004af4:	fb11 f303 	smulbb	r3, r1, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 8004b00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f2c0 80b4 	blt.w	8004c72 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8004b0a:	7e7b      	ldrb	r3, [r7, #25]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <_UG_PutText+0x11c>
 8004b14:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004b18:	105b      	asrs	r3, r3, #1
 8004b1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 8004b1c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004b1e:	8c3b      	ldrh	r3, [r7, #32]
 8004b20:	4413      	add	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004b32:	4b54      	ldr	r3, [pc, #336]	@ (8004c84 <_UG_PutText+0x284>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d107      	bne.n	8004b4e <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff f968 	bl	8003e18 <_UG_DecodeUTF8>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b4c:	e004      	b.n	8004b58 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	60ba      	str	r2, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8004b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01b      	beq.n	8004b96 <_UG_PutText+0x196>
 8004b5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b60:	2b0a      	cmp	r3, #10
 8004b62:	d018      	beq.n	8004b96 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8004b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff f9cd 	bl	8003f08 <_UG_GetCharData>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8004b72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d00a      	beq.n	8004b92 <_UG_PutText+0x192>
         sl++;
 8004b7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004b7e:	3301      	adds	r3, #1
 8004b80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 8004b82:	8a7a      	ldrh	r2, [r7, #18]
 8004b84:	8afb      	ldrh	r3, [r7, #22]
 8004b86:	4413      	add	r3, r2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004b8c:	4413      	add	r3, r2
 8004b8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004b90:	e7cf      	b.n	8004b32 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8004b92:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004b94:	e7cd      	b.n	8004b32 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 8004b9e:	8b7a      	ldrh	r2, [r7, #26]
 8004ba0:	8bbb      	ldrh	r3, [r7, #28]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8004bac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004bae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 8004bb6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db5b      	blt.n	8004c76 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8004bbe:	7e7b      	ldrb	r3, [r7, #25]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <_UG_PutText+0x1ce>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004bcc:	e008      	b.n	8004be0 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8004bce:	7e7b      	ldrb	r3, [r7, #25]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <_UG_PutText+0x1e0>
 8004bd8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004bdc:	105b      	asrs	r3, r3, #1
 8004bde:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8004be0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004be2:	8bbb      	ldrh	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004bea:	4b26      	ldr	r3, [pc, #152]	@ (8004c84 <_UG_PutText+0x284>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d107      	bne.n	8004c06 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f90c 	bl	8003e18 <_UG_DecodeUTF8>
 8004c00:	4603      	mov	r3, r0
 8004c02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004c04:	e004      	b.n	8004c10 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	60fa      	str	r2, [r7, #12]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8004c10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d031      	beq.n	8004c7a <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8004c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c18:	2b0a      	cmp	r3, #10
 8004c1a:	d01c      	beq.n	8004c56 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8a1c      	ldrh	r4, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8a5b      	ldrh	r3, [r3, #18]
 8004c24:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004c28:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8004c2c:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4623      	mov	r3, r4
 8004c32:	f7ff fb37 	bl	80042a4 <_UG_PutChar>
 8004c36:	4603      	mov	r3, r0
 8004c38:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8004c3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d0d2      	beq.n	8004bea <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8004c44:	8a7a      	ldrh	r2, [r7, #18]
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	4413      	add	r3, r2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c4e:	4413      	add	r3, r2
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004c54:	e7c9      	b.n	8004bea <_UG_PutText+0x1ea>
           break;
 8004c56:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8004c58:	8bfa      	ldrh	r2, [r7, #30]
 8004c5a:	8abb      	ldrh	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c62:	4413      	add	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8004c68:	e75d      	b.n	8004b26 <_UG_PutText+0x126>
     return;
 8004c6a:	bf00      	nop
 8004c6c:	e006      	b.n	8004c7c <_UG_PutText+0x27c>
     return;
 8004c6e:	bf00      	nop
 8004c70:	e004      	b.n	8004c7c <_UG_PutText+0x27c>
        return;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <_UG_PutText+0x27c>
           return;
 8004c7a:	bf00      	nop
   }
}
 8004c7c:	3734      	adds	r7, #52	@ 0x34
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd90      	pop	{r4, r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200009d4 	.word	0x200009d4

08004c88 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8004c88:	b5b0      	push	{r4, r5, r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	80fb      	strh	r3, [r7, #6]
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	80bb      	strh	r3, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	807b      	strh	r3, [r7, #2]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	b21c      	sxth	r4, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	1c9a      	adds	r2, r3, #2
 8004cb2:	61ba      	str	r2, [r7, #24]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004cba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004cbe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	f7fe fe94 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8004ccc:	88bb      	ldrh	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b219      	sxth	r1, r3
 8004cd4:	883b      	ldrh	r3, [r7, #0]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b21c      	sxth	r4, r3
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	61ba      	str	r2, [r7, #24]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ce8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4623      	mov	r3, r4
 8004cf0:	f7fe fe80 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1c9a      	adds	r2, r3, #2
 8004cf8:	61ba      	str	r2, [r7, #24]
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004d00:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004d04:	f9b7 1000 	ldrsh.w	r1, [r7]
 8004d08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	4623      	mov	r3, r4
 8004d10:	f7fe fe70 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8004d14:	883b      	ldrh	r3, [r7, #0]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	b21c      	sxth	r4, r3
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	61ba      	str	r2, [r7, #24]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004d28:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d2c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4623      	mov	r3, r4
 8004d34:	f7fe fe5e 	bl	80039f4 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	b218      	sxth	r0, r3
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	b219      	sxth	r1, r3
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	3b02      	subs	r3, #2
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	b21c      	sxth	r4, r3
 8004d50:	88bb      	ldrh	r3, [r7, #4]
 8004d52:	3301      	adds	r3, #1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	b21d      	sxth	r5, r3
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	61ba      	str	r2, [r7, #24]
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	462b      	mov	r3, r5
 8004d64:	4622      	mov	r2, r4
 8004d66:	f7fe fe45 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	b218      	sxth	r0, r3
 8004d72:	88bb      	ldrh	r3, [r7, #4]
 8004d74:	3302      	adds	r3, #2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b219      	sxth	r1, r3
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	b21c      	sxth	r4, r3
 8004d82:	883b      	ldrh	r3, [r7, #0]
 8004d84:	3b02      	subs	r3, #2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	b21d      	sxth	r5, r3
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	61ba      	str	r2, [r7, #24]
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	462b      	mov	r3, r5
 8004d96:	4622      	mov	r2, r4
 8004d98:	f7fe fe2c 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	b218      	sxth	r0, r3
 8004da4:	883b      	ldrh	r3, [r7, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b219      	sxth	r1, r3
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b21c      	sxth	r4, r3
 8004db4:	883b      	ldrh	r3, [r7, #0]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b21d      	sxth	r5, r3
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	61ba      	str	r2, [r7, #24]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	4622      	mov	r2, r4
 8004dca:	f7fe fe13 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b218      	sxth	r0, r3
 8004dd6:	88bb      	ldrh	r3, [r7, #4]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	b219      	sxth	r1, r3
 8004dde:	887b      	ldrh	r3, [r7, #2]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	b21c      	sxth	r4, r3
 8004de6:	883b      	ldrh	r3, [r7, #0]
 8004de8:	3b02      	subs	r3, #2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	b21d      	sxth	r5, r3
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	61ba      	str	r2, [r7, #24]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	462b      	mov	r3, r5
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	f7fe fdfa 	bl	80039f4 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	3302      	adds	r3, #2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b218      	sxth	r0, r3
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b219      	sxth	r1, r3
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	3b03      	subs	r3, #3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b21c      	sxth	r4, r3
 8004e18:	88bb      	ldrh	r3, [r7, #4]
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	b21d      	sxth	r5, r3
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	61ba      	str	r2, [r7, #24]
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	f7fe fde1 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	3302      	adds	r3, #2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	b218      	sxth	r0, r3
 8004e3a:	88bb      	ldrh	r3, [r7, #4]
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	b219      	sxth	r1, r3
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	3302      	adds	r3, #2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	b21c      	sxth	r4, r3
 8004e4a:	883b      	ldrh	r3, [r7, #0]
 8004e4c:	3b03      	subs	r3, #3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b21d      	sxth	r5, r3
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	61ba      	str	r2, [r7, #24]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	4622      	mov	r2, r4
 8004e60:	f7fe fdc8 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	3302      	adds	r3, #2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	b218      	sxth	r0, r3
 8004e6c:	883b      	ldrh	r3, [r7, #0]
 8004e6e:	3b02      	subs	r3, #2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b219      	sxth	r1, r3
 8004e74:	887b      	ldrh	r3, [r7, #2]
 8004e76:	3b02      	subs	r3, #2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	b21c      	sxth	r4, r3
 8004e7c:	883b      	ldrh	r3, [r7, #0]
 8004e7e:	3b02      	subs	r3, #2
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	b21d      	sxth	r5, r3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1c9a      	adds	r2, r3, #2
 8004e88:	61ba      	str	r2, [r7, #24]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	462b      	mov	r3, r5
 8004e90:	4622      	mov	r2, r4
 8004e92:	f7fe fdaf 	bl	80039f4 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	3b02      	subs	r3, #2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	b218      	sxth	r0, r3
 8004e9e:	88bb      	ldrh	r3, [r7, #4]
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	b219      	sxth	r1, r3
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	3b02      	subs	r3, #2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	b21a      	sxth	r2, r3
 8004eae:	883b      	ldrh	r3, [r7, #0]
 8004eb0:	3b03      	subs	r3, #3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	b21c      	sxth	r4, r3
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	f7fe fd99 	bl	80039f4 <UG_DrawLine>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004ecc <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6039      	str	r1, [r7, #0]
 8004ed6:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d810      	bhi.n	8004f00 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8004ede:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <UG_DriverRegister+0x40>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	330a      	adds	r3, #10
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8004eee:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <UG_DriverRegister+0x40>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	330a      	adds	r3, #10
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	2203      	movs	r2, #3
 8004efc:	721a      	strb	r2, [r3, #8]
 8004efe:	e000      	b.n	8004f02 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8004f00:	bf00      	nop
}
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	200009d4 	.word	0x200009d4

08004f10 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8004f16:	4b5e      	ldr	r3, [pc, #376]	@ (8005090 <UG_Update+0x180>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UG_Update+0x2c>
 8004f26:	4b5a      	ldr	r3, [pc, #360]	@ (8005090 <UG_Update+0x180>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 8004f2e:	4b58      	ldr	r3, [pc, #352]	@ (8005090 <UG_Update+0x180>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8004f3c:	4b54      	ldr	r3, [pc, #336]	@ (8005090 <UG_Update+0x180>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <UG_Update+0x180>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d071      	beq.n	8005030 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8004f4c:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <UG_Update+0x180>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d06c      	beq.n	8005030 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8004f56:	4b4e      	ldr	r3, [pc, #312]	@ (8005090 <UG_Update+0x180>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005090 <UG_Update+0x180>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6912      	ldr	r2, [r2, #16]
 8004f60:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8004f62:	4b4b      	ldr	r3, [pc, #300]	@ (8005090 <UG_Update+0x180>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b4a      	ldr	r3, [pc, #296]	@ (8005090 <UG_Update+0x180>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68d2      	ldr	r2, [r2, #12]
 8004f6c:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8004f6e:	4b48      	ldr	r3, [pc, #288]	@ (8005090 <UG_Update+0x180>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d045      	beq.n	8005004 <UG_Update+0xf4>
 8004f78:	4b45      	ldr	r3, [pc, #276]	@ (8005090 <UG_Update+0x180>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	7d9b      	ldrb	r3, [r3, #22]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d03d      	beq.n	8005004 <UG_Update+0xf4>
 8004f88:	4b41      	ldr	r3, [pc, #260]	@ (8005090 <UG_Update+0x180>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	7a1b      	ldrb	r3, [r3, #8]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d035      	beq.n	8005004 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8004f98:	4b3d      	ldr	r3, [pc, #244]	@ (8005090 <UG_Update+0x180>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <UG_Update+0x180>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d123      	bne.n	8004ff8 <UG_Update+0xe8>
 8004fb0:	4b37      	ldr	r3, [pc, #220]	@ (8005090 <UG_Update+0x180>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004fba:	4b35      	ldr	r3, [pc, #212]	@ (8005090 <UG_Update+0x180>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d117      	bne.n	8004ff8 <UG_Update+0xe8>
 8004fc8:	4b31      	ldr	r3, [pc, #196]	@ (8005090 <UG_Update+0x180>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005090 <UG_Update+0x180>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d10b      	bne.n	8004ff8 <UG_Update+0xe8>
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <UG_Update+0x180>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <UG_Update+0x180>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d005      	beq.n	8005004 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8004ff8:	4b25      	ldr	r3, [pc, #148]	@ (8005090 <UG_Update+0x180>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f848 	bl	8005094 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8005004:	4b22      	ldr	r3, [pc, #136]	@ (8005090 <UG_Update+0x180>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	7a1a      	ldrb	r2, [r3, #8]
 800500c:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <UG_Update+0x180>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <UG_Update+0x180>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	7a1a      	ldrb	r2, [r3, #8]
 8005022:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <UG_Update+0x180>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8005030:	4b17      	ldr	r3, [pc, #92]	@ (8005090 <UG_Update+0x180>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01b      	beq.n	8005072 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 800503a:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <UG_Update+0x180>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	7a1b      	ldrb	r3, [r3, #8]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f8c8 	bl	80051e4 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	7a1b      	ldrb	r3, [r3, #8]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fb81 	bl	8004768 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fc34 	bl	80048d4 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff fc7b 	bl	8004968 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8005072:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <UG_Update+0x180>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <UG_Update+0x178>
     gui->device->flush();
 800507e:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <UG_Update+0x180>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4798      	blx	r3
   }
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200009d4 	.word	0x200009d4

08005094 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b08f      	sub	sp, #60	@ 0x3c
 8005098:	af02      	add	r7, sp, #8
 800509a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8098 	beq.w	80051d4 <_UG_WindowDrawTitle+0x140>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7a1b      	ldrb	r3, [r3, #8]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8091 	beq.w	80051d4 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	89db      	ldrh	r3, [r3, #14]
 80050b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8a1b      	ldrh	r3, [r3, #16]
 80050bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8a5b      	ldrh	r3, [r3, #18]
 80050c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8a9b      	ldrh	r3, [r3, #20]
 80050c8:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	7d9b      	ldrb	r3, [r3, #22]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80050d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050d8:	3303      	adds	r3, #3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 80050de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80050e0:	3303      	adds	r3, #3
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 80050e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80050e8:	3b03      	subs	r3, #3
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 80050ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80050f0:	3b03      	subs	r3, #3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80050f6:	4b3a      	ldr	r3, [pc, #232]	@ (80051e0 <_UG_WindowDrawTitle+0x14c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d106      	bne.n	8005110 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005106:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800510c:	83bb      	strh	r3, [r7, #28]
 800510e:	e005      	b.n	800511c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005114:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005122:	461a      	mov	r2, r3
 8005124:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005126:	4413      	add	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	b21c      	sxth	r4, r3
 8005130:	8bfb      	ldrh	r3, [r7, #30]
 8005132:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8005136:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800513a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4623      	mov	r3, r4
 8005142:	f7fe fc01 	bl	8003948 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8005152:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005154:	3303      	adds	r3, #3
 8005156:	b29b      	uxth	r3, r3
 8005158:	b21b      	sxth	r3, r3
 800515a:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 800515c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800515e:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8005160:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005162:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800516a:	461a      	mov	r2, r3
 800516c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800516e:	4413      	add	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	b21b      	sxth	r3, r3
 8005178:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005180:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800518a:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8005192:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fc31 	bl	8004a00 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80051a4:	461a      	mov	r2, r3
 80051a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80051a8:	4413      	add	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	b219      	sxth	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80051b4:	461a      	mov	r2, r3
 80051b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80051b8:	4413      	add	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	b21b      	sxth	r3, r3
 80051be:	f649 5413 	movw	r4, #40211	@ 0x9d13
 80051c2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80051c6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80051ca:	9400      	str	r4, [sp, #0]
 80051cc:	f7fe fc12 	bl	80039f4 <UG_DrawLine>
      return UG_RESULT_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e001      	b.n	80051d8 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3734      	adds	r7, #52	@ 0x34
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	200009d4 	.word	0x200009d4

080051e4 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	89db      	ldrh	r3, [r3, #14]
 80051f0:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8a1b      	ldrh	r3, [r3, #16]
 80051f6:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8a5b      	ldrh	r3, [r3, #18]
 80051fc:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8a9b      	ldrh	r3, [r3, #20]
 8005202:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7a1b      	ldrb	r3, [r3, #8]
 8005208:	f023 0320 	bic.w	r3, r3, #32
 800520c:	b2da      	uxtb	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7a1b      	ldrb	r3, [r3, #8]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8084 	beq.w	8005328 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7d9b      	ldrb	r3, [r3, #22]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d021      	beq.n	8005270 <_UG_WindowUpdate+0x8c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7a1b      	ldrb	r3, [r3, #8]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11b      	bne.n	8005270 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8005238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800523c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005240:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8005244:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005248:	4c43      	ldr	r4, [pc, #268]	@ (8005358 <_UG_WindowUpdate+0x174>)
 800524a:	9400      	str	r4, [sp, #0]
 800524c:	f7ff fd1c 	bl	8004c88 <_UG_DrawObjectFrame>
         xs+=3;
 8005250:	8abb      	ldrh	r3, [r7, #20]
 8005252:	3303      	adds	r3, #3
 8005254:	b29b      	uxth	r3, r3
 8005256:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8005258:	8a7b      	ldrh	r3, [r7, #18]
 800525a:	3303      	adds	r3, #3
 800525c:	b29b      	uxth	r3, r3
 800525e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8005260:	8a3b      	ldrh	r3, [r7, #16]
 8005262:	3b03      	subs	r3, #3
 8005264:	b29b      	uxth	r3, r3
 8005266:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8005268:	89fb      	ldrh	r3, [r7, #14]
 800526a:	3b03      	subs	r3, #3
 800526c:	b29b      	uxth	r3, r3
 800526e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7d9b      	ldrb	r3, [r3, #22]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01a      	beq.n	80052b2 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff09 	bl	8005094 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005288:	461a      	mov	r2, r3
 800528a:	8a7b      	ldrh	r3, [r7, #18]
 800528c:	4413      	add	r3, r2
 800528e:	b29b      	uxth	r3, r3
 8005290:	3301      	adds	r3, #1
 8005292:	b29b      	uxth	r3, r3
 8005294:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7a1b      	ldrb	r3, [r3, #8]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7a1b      	ldrb	r3, [r3, #8]
 80052a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	721a      	strb	r2, [r3, #8]
            return;
 80052b0:	e04e      	b.n	8005350 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	899b      	ldrh	r3, [r3, #12]
 80052b6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80052ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80052be:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80052c2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	4623      	mov	r3, r4
 80052ca:	f7fe fb3d 	bl	8003948 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	82fb      	strh	r3, [r7, #22]
 80052d8:	e021      	b.n	800531e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	8afb      	ldrh	r3, [r7, #22]
 80052e0:	015b      	lsls	r3, r3, #5
 80052e2:	4413      	add	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d112      	bne.n	8005318 <_UG_WindowUpdate+0x134>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <_UG_WindowUpdate+0x134>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <_UG_WindowUpdate+0x134>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	3301      	adds	r3, #1
 800531c:	82fb      	strh	r3, [r7, #22]
 800531e:	8afa      	ldrh	r2, [r7, #22]
 8005320:	89bb      	ldrh	r3, [r7, #12]
 8005322:	429a      	cmp	r2, r3
 8005324:	d3d9      	bcc.n	80052da <_UG_WindowUpdate+0xf6>
 8005326:	e013      	b.n	8005350 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8005340:	4b06      	ldr	r3, [pc, #24]	@ (800535c <_UG_WindowUpdate+0x178>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4623      	mov	r3, r4
 800534c:	f7fe fafc 	bl	8003948 <UG_FillFrame>
   }
}
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd90      	pop	{r4, r7, pc}
 8005356:	bf00      	nop
 8005358:	08014cbc 	.word	0x08014cbc
 800535c:	200009d4 	.word	0x200009d4

08005360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005364:	f7fe f9f8 	bl	8003758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005368:	480c      	ldr	r0, [pc, #48]	@ (800539c <LoopForever+0x6>)
  ldr r1, =_edata
 800536a:	490d      	ldr	r1, [pc, #52]	@ (80053a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800536c:	4a0d      	ldr	r2, [pc, #52]	@ (80053a4 <LoopForever+0xe>)
  movs r3, #0
 800536e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005370:	e002      	b.n	8005378 <LoopCopyDataInit>

08005372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005376:	3304      	adds	r3, #4

08005378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800537a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800537c:	d3f9      	bcc.n	8005372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800537e:	4a0a      	ldr	r2, [pc, #40]	@ (80053a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005380:	4c0a      	ldr	r4, [pc, #40]	@ (80053ac <LoopForever+0x16>)
  movs r3, #0
 8005382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005384:	e001      	b.n	800538a <LoopFillZerobss>

08005386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005388:	3204      	adds	r2, #4

0800538a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800538a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800538c:	d3fb      	bcc.n	8005386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800538e:	f008 fbef 	bl	800db70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005392:	f7fc fb09 	bl	80019a8 <main>

08005396 <LoopForever>:

LoopForever:
    b LoopForever
 8005396:	e7fe      	b.n	8005396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005398:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800539c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053a0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80053a4:	08015080 	.word	0x08015080
  ldr r2, =_sbss
 80053a8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80053ac:	20000b40 	.word	0x20000b40

080053b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053b0:	e7fe      	b.n	80053b0 <ADC1_IRQHandler>

080053b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053bc:	2003      	movs	r0, #3
 80053be:	f001 fabb 	bl	8006938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053c2:	2000      	movs	r0, #0
 80053c4:	f000 f80e 	bl	80053e4 <HAL_InitTick>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	71fb      	strb	r3, [r7, #7]
 80053d2:	e001      	b.n	80053d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80053d4:	f7fd fb40 	bl	8002a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053d8:	79fb      	ldrb	r3, [r7, #7]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80053f0:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <HAL_InitTick+0x6c>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d023      	beq.n	8005440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80053f8:	4b16      	ldr	r3, [pc, #88]	@ (8005454 <HAL_InitTick+0x70>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b14      	ldr	r3, [pc, #80]	@ (8005450 <HAL_InitTick+0x6c>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	4619      	mov	r1, r3
 8005402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005406:	fbb3 f3f1 	udiv	r3, r3, r1
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	4618      	mov	r0, r3
 8005410:	f001 fab9 	bl	8006986 <HAL_SYSTICK_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d809      	bhi.n	8005434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005420:	2200      	movs	r2, #0
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	f001 fa91 	bl	800694e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800542c:	4a0a      	ldr	r2, [pc, #40]	@ (8005458 <HAL_InitTick+0x74>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e007      	b.n	8005444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
 8005438:	e004      	b.n	8005444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
 800543e:	e001      	b.n	8005444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000028 	.word	0x20000028
 8005454:	20000020 	.word	0x20000020
 8005458:	20000024 	.word	0x20000024

0800545c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_IncTick+0x20>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <HAL_IncTick+0x24>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4413      	add	r3, r2
 800546c:	4a04      	ldr	r2, [pc, #16]	@ (8005480 <HAL_IncTick+0x24>)
 800546e:	6013      	str	r3, [r2, #0]
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000028 	.word	0x20000028
 8005480:	200009f0 	.word	0x200009f0

08005484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return uwTick;
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <HAL_GetTick+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	200009f0 	.word	0x200009f0

0800549c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054a4:	f7ff ffee 	bl	8005484 <HAL_GetTick>
 80054a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d005      	beq.n	80054c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80054b6:	4b0a      	ldr	r3, [pc, #40]	@ (80054e0 <HAL_Delay+0x44>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054c2:	bf00      	nop
 80054c4:	f7ff ffde 	bl	8005484 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d8f7      	bhi.n	80054c4 <HAL_Delay+0x28>
  {
  }
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000028 	.word	0x20000028

080054e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	609a      	str	r2, [r3, #8]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3360      	adds	r3, #96	@ 0x60
 800555e:	461a      	mov	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b08      	ldr	r3, [pc, #32]	@ (8005590 <LL_ADC_SetOffset+0x44>)
 800556e:	4013      	ands	r3, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	4313      	orrs	r3, r2
 800557c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	03fff000 	.word	0x03fff000

08005594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3360      	adds	r3, #96	@ 0x60
 80055a2:	461a      	mov	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3360      	adds	r3, #96	@ 0x60
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	615a      	str	r2, [r3, #20]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3330      	adds	r3, #48	@ 0x30
 800562c:	461a      	mov	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	f003 030c 	and.w	r3, r3, #12
 8005638:	4413      	add	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	211f      	movs	r1, #31
 8005648:	fa01 f303 	lsl.w	r3, r1, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	401a      	ands	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0e9b      	lsrs	r3, r3, #26
 8005654:	f003 011f 	and.w	r1, r3, #31
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	431a      	orrs	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3314      	adds	r3, #20
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0e5b      	lsrs	r3, r3, #25
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	0d1b      	lsrs	r3, r3, #20
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	2107      	movs	r1, #7
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	401a      	ands	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	0d1b      	lsrs	r3, r3, #20
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	fa01 f303 	lsl.w	r3, r1, r3
 80056b8:	431a      	orrs	r2, r3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e4:	43db      	mvns	r3, r3
 80056e6:	401a      	ands	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f003 0318 	and.w	r3, r3, #24
 80056ee:	4908      	ldr	r1, [pc, #32]	@ (8005710 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056f0:	40d9      	lsrs	r1, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	400b      	ands	r3, r1
 80056f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	0007ffff 	.word	0x0007ffff

08005714 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6093      	str	r3, [r2, #8]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574c:	d101      	bne.n	8005752 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005774:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800579c:	d101      	bne.n	80057a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <LL_ADC_IsEnabled+0x18>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <LL_ADC_IsEnabled+0x1a>
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d101      	bne.n	80057ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b08      	cmp	r3, #8
 800580e:	d101      	bne.n	8005814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e129      	b.n	8005a92 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fd f927 	bl	8002aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff ff67 	bl	8005738 <LL_ADC_IsDeepPowerDownEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff ff4d 	bl	8005714 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ff82 	bl	8005788 <LL_ADC_IsInternalRegulatorEnabled>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d115      	bne.n	80058b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff ff66 	bl	8005760 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005894:	4b81      	ldr	r3, [pc, #516]	@ (8005a9c <HAL_ADC_Init+0x278>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	4a81      	ldr	r2, [pc, #516]	@ (8005aa0 <HAL_ADC_Init+0x27c>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	3301      	adds	r3, #1
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80058a8:	e002      	b.n	80058b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f9      	bne.n	80058aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff ff64 	bl	8005788 <LL_ADC_IsInternalRegulatorEnabled>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	f043 0210 	orr.w	r2, r3, #16
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ff75 	bl	80057d6 <LL_ADC_REG_IsConversionOngoing>
 80058ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f040 80c2 	bne.w	8005a80 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 80be 	bne.w	8005a80 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005908:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800590c:	f043 0202 	orr.w	r2, r3, #2
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff ff49 	bl	80057b0 <LL_ADC_IsEnabled>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005924:	485f      	ldr	r0, [pc, #380]	@ (8005aa4 <HAL_ADC_Init+0x280>)
 8005926:	f7ff ff43 	bl	80057b0 <LL_ADC_IsEnabled>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4619      	mov	r1, r3
 8005936:	485c      	ldr	r0, [pc, #368]	@ (8005aa8 <HAL_ADC_Init+0x284>)
 8005938:	f7ff fdd4 	bl	80054e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7e5b      	ldrb	r3, [r3, #25]
 8005940:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005946:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800594c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005952:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800595a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d106      	bne.n	8005978 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	3b01      	subs	r3, #1
 8005970:	045b      	lsls	r3, r3, #17
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	4b44      	ldr	r3, [pc, #272]	@ (8005aac <HAL_ADC_Init+0x288>)
 800599c:	4013      	ands	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	69b9      	ldr	r1, [r7, #24]
 80059a4:	430b      	orrs	r3, r1
 80059a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff ff25 	bl	80057fc <LL_ADC_INJ_IsConversionOngoing>
 80059b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d140      	bne.n	8005a3c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d13d      	bne.n	8005a3c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7e1b      	ldrb	r3, [r3, #24]
 80059c8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80059ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059e2:	f023 0306 	bic.w	r3, r3, #6
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	69b9      	ldr	r1, [r7, #24]
 80059ec:	430b      	orrs	r3, r1
 80059ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d118      	bne.n	8005a2c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a16:	4311      	orrs	r1, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	e007      	b.n	8005a3c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10c      	bne.n	8005a5e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f023 010f 	bic.w	r1, r3, #15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	1e5a      	subs	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a5c:	e007      	b.n	8005a6e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 020f 	bic.w	r2, r2, #15
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	f043 0201 	orr.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a7e:	e007      	b.n	8005a90 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a84:	f043 0210 	orr.w	r2, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000020 	.word	0x20000020
 8005aa0:	053e2d63 	.word	0x053e2d63
 8005aa4:	50040000 	.word	0x50040000
 8005aa8:	50040300 	.word	0x50040300
 8005aac:	fff0c007 	.word	0xfff0c007

08005ab0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0b6      	sub	sp, #216	@ 0xd8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_ADC_ConfigChannel+0x22>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e3d5      	b.n	800627e <HAL_ADC_ConfigChannel+0x7ce>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fe79 	bl	80057d6 <LL_ADC_REG_IsConversionOngoing>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 83ba 	bne.w	8006260 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b05      	cmp	r3, #5
 8005afa:	d824      	bhi.n	8005b46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	3b02      	subs	r3, #2
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d81b      	bhi.n	8005b3e <HAL_ADC_ConfigChannel+0x8e>
 8005b06:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <HAL_ADC_ConfigChannel+0x5c>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b25 	.word	0x08005b25
 8005b14:	08005b2d 	.word	0x08005b2d
 8005b18:	08005b35 	.word	0x08005b35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005b22:	e010      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005b24:	2312      	movs	r3, #18
 8005b26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005b2a:	e00c      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005b2c:	2318      	movs	r3, #24
 8005b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005b32:	e008      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005b3c:	e003      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005b3e:	2306      	movs	r3, #6
 8005b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005b44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005b54:	f7ff fd62 	bl	800561c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fe3a 	bl	80057d6 <LL_ADC_REG_IsConversionOngoing>
 8005b62:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fe46 	bl	80057fc <LL_ADC_INJ_IsConversionOngoing>
 8005b70:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 81bf 	bne.w	8005efc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f040 81ba 	bne.w	8005efc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b90:	d10f      	bne.n	8005bb2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f7ff fd69 	bl	8005674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fd23 	bl	80055f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005bb0:	e00e      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6819      	ldr	r1, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7ff fd58 	bl	8005674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fd13 	bl	80055f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00a      	beq.n	8005c08 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6919      	ldr	r1, [r3, #16]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c02:	f7ff fca3 	bl	800554c <LL_ADC_SetOffset>
 8005c06:	e179      	b.n	8005efc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fcc0 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x184>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fcb5 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	0e9b      	lsrs	r3, r3, #26
 8005c2e:	f003 021f 	and.w	r2, r3, #31
 8005c32:	e01e      	b.n	8005c72 <HAL_ADC_ConfigChannel+0x1c2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fcaa 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8005c62:	2320      	movs	r3, #32
 8005c64:	e004      	b.n	8005c70 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8005c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c6a:	fab3 f383 	clz	r3, r3
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <HAL_ADC_ConfigChannel+0x1da>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	0e9b      	lsrs	r3, r3, #26
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	e018      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x20c>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c96:	fa93 f3a3 	rbit	r3, r3
 8005c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8005cae:	2320      	movs	r3, #32
 8005cb0:	e004      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8005cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cb6:	fab3 f383 	clz	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d106      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fc79 	bl	80055c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fc5d 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x24a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2101      	movs	r1, #1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fc52 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	0e9b      	lsrs	r3, r3, #26
 8005cf4:	f003 021f 	and.w	r2, r3, #31
 8005cf8:	e01e      	b.n	8005d38 <HAL_ADC_ConfigChannel+0x288>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fc47 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d10:	fa93 f3a3 	rbit	r3, r3
 8005d14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005d20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8005d28:	2320      	movs	r3, #32
 8005d2a:	e004      	b.n	8005d36 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8005d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d30:	fab3 f383 	clz	r3, r3
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x2a0>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	0e9b      	lsrs	r3, r3, #26
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	e018      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x2d2>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8005d74:	2320      	movs	r3, #32
 8005d76:	e004      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8005d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d7c:	fab3 f383 	clz	r3, r3
 8005d80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d106      	bne.n	8005d94 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fc16 	bl	80055c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2102      	movs	r1, #2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fbfa 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <HAL_ADC_ConfigChannel+0x310>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2102      	movs	r1, #2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fbef 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005db6:	4603      	mov	r3, r0
 8005db8:	0e9b      	lsrs	r3, r3, #26
 8005dba:	f003 021f 	and.w	r2, r3, #31
 8005dbe:	e01e      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x34e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fbe4 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dd6:	fa93 f3a3 	rbit	r3, r3
 8005dda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8005dee:	2320      	movs	r3, #32
 8005df0:	e004      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8005df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x366>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	0e9b      	lsrs	r3, r3, #26
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	e014      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x390>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e1e:	fa93 f3a3 	rbit	r3, r3
 8005e22:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8005e32:	2320      	movs	r3, #32
 8005e34:	e004      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8005e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e3a:	fab3 f383 	clz	r3, r3
 8005e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d106      	bne.n	8005e52 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fbb7 	bl	80055c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2103      	movs	r1, #3
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fb9b 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_ADC_ConfigChannel+0x3ce>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2103      	movs	r1, #3
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fb90 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005e74:	4603      	mov	r3, r0
 8005e76:	0e9b      	lsrs	r3, r3, #26
 8005e78:	f003 021f 	and.w	r2, r3, #31
 8005e7c:	e017      	b.n	8005eae <HAL_ADC_ConfigChannel+0x3fe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2103      	movs	r1, #3
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fb85 	bl	8005594 <LL_ADC_GetOffsetChannel>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e90:	fa93 f3a3 	rbit	r3, r3
 8005e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e98:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	e003      	b.n	8005eac <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8005ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea6:	fab3 f383 	clz	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <HAL_ADC_ConfigChannel+0x416>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	0e9b      	lsrs	r3, r3, #26
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	e011      	b.n	8005eea <HAL_ADC_ConfigChannel+0x43a>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ece:	fa93 f3a3 	rbit	r3, r3
 8005ed2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005ed8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8005ede:	2320      	movs	r3, #32
 8005ee0:	e003      	b.n	8005eea <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8005ee2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ee4:	fab3 f383 	clz	r3, r3
 8005ee8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d106      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2103      	movs	r1, #3
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fb62 	bl	80055c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fc55 	bl	80057b0 <LL_ADC_IsEnabled>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f040 813f 	bne.w	800618c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7ff fbd6 	bl	80056cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a8e      	ldr	r2, [pc, #568]	@ (8006160 <HAL_ADC_ConfigChannel+0x6b0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f040 8130 	bne.w	800618c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x4a4>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	0e9b      	lsrs	r3, r3, #26
 8005f42:	3301      	adds	r3, #1
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	bf94      	ite	ls
 8005f4c:	2301      	movls	r3, #1
 8005f4e:	2300      	movhi	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e019      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x4d8>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f5c:	fa93 f3a3 	rbit	r3, r3
 8005f60:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	e003      	b.n	8005f78 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8005f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f72:	fab3 f383 	clz	r3, r3
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	3301      	adds	r3, #1
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	bf94      	ite	ls
 8005f82:	2301      	movls	r3, #1
 8005f84:	2300      	movhi	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d079      	beq.n	8006080 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d107      	bne.n	8005fa8 <HAL_ADC_ConfigChannel+0x4f8>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	0e9b      	lsrs	r3, r3, #26
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	069b      	lsls	r3, r3, #26
 8005fa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fa6:	e015      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x524>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fb0:	fa93 f3a3 	rbit	r3, r3
 8005fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	e003      	b.n	8005fcc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8005fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc6:	fab3 f383 	clz	r3, r3
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	069b      	lsls	r3, r3, #26
 8005fd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_ADC_ConfigChannel+0x544>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0e9b      	lsrs	r3, r3, #26
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2101      	movs	r1, #1
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	e017      	b.n	8006024 <HAL_ADC_ConfigChannel+0x574>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ffc:	fa93 f3a3 	rbit	r3, r3
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006004:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800600c:	2320      	movs	r3, #32
 800600e:	e003      	b.n	8006018 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8006010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006012:	fab3 f383 	clz	r3, r3
 8006016:	b2db      	uxtb	r3, r3
 8006018:	3301      	adds	r3, #1
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2101      	movs	r1, #1
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	ea42 0103 	orr.w	r1, r2, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <HAL_ADC_ConfigChannel+0x59a>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	0e9b      	lsrs	r3, r3, #26
 800603a:	3301      	adds	r3, #1
 800603c:	f003 021f 	and.w	r2, r3, #31
 8006040:	4613      	mov	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	051b      	lsls	r3, r3, #20
 8006048:	e018      	b.n	800607c <HAL_ADC_ConfigChannel+0x5cc>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006052:	fa93 f3a3 	rbit	r3, r3
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800605c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8006062:	2320      	movs	r3, #32
 8006064:	e003      	b.n	800606e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	fab3 f383 	clz	r3, r3
 800606c:	b2db      	uxtb	r3, r3
 800606e:	3301      	adds	r3, #1
 8006070:	f003 021f 	and.w	r2, r3, #31
 8006074:	4613      	mov	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800607c:	430b      	orrs	r3, r1
 800607e:	e080      	b.n	8006182 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006088:	2b00      	cmp	r3, #0
 800608a:	d107      	bne.n	800609c <HAL_ADC_ConfigChannel+0x5ec>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	0e9b      	lsrs	r3, r3, #26
 8006092:	3301      	adds	r3, #1
 8006094:	069b      	lsls	r3, r3, #26
 8006096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800609a:	e015      	b.n	80060c8 <HAL_ADC_ConfigChannel+0x618>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	fa93 f3a3 	rbit	r3, r3
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80060ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80060b4:	2320      	movs	r3, #32
 80060b6:	e003      	b.n	80060c0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ba:	fab3 f383 	clz	r3, r3
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	3301      	adds	r3, #1
 80060c2:	069b      	lsls	r3, r3, #26
 80060c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <HAL_ADC_ConfigChannel+0x638>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	0e9b      	lsrs	r3, r3, #26
 80060da:	3301      	adds	r3, #1
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2101      	movs	r1, #1
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	e017      	b.n	8006118 <HAL_ADC_ConfigChannel+0x668>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	fa93 f3a3 	rbit	r3, r3
 80060f4:	61bb      	str	r3, [r7, #24]
  return result;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006100:	2320      	movs	r3, #32
 8006102:	e003      	b.n	800610c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	fab3 f383 	clz	r3, r3
 800610a:	b2db      	uxtb	r3, r3
 800610c:	3301      	adds	r3, #1
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2101      	movs	r1, #1
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	ea42 0103 	orr.w	r1, r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x694>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0e9b      	lsrs	r3, r3, #26
 800612e:	3301      	adds	r3, #1
 8006130:	f003 021f 	and.w	r2, r3, #31
 8006134:	4613      	mov	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	4413      	add	r3, r2
 800613a:	3b1e      	subs	r3, #30
 800613c:	051b      	lsls	r3, r3, #20
 800613e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006142:	e01d      	b.n	8006180 <HAL_ADC_ConfigChannel+0x6d0>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	fa93 f3a3 	rbit	r3, r3
 8006150:	60fb      	str	r3, [r7, #12]
  return result;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d103      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800615c:	2320      	movs	r3, #32
 800615e:	e005      	b.n	800616c <HAL_ADC_ConfigChannel+0x6bc>
 8006160:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	fab3 f383 	clz	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3301      	adds	r3, #1
 800616e:	f003 021f 	and.w	r2, r3, #31
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	3b1e      	subs	r3, #30
 800617a:	051b      	lsls	r3, r3, #20
 800617c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006180:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006186:	4619      	mov	r1, r3
 8006188:	f7ff fa74 	bl	8005674 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b3d      	ldr	r3, [pc, #244]	@ (8006288 <HAL_ADC_ConfigChannel+0x7d8>)
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d06c      	beq.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006198:	483c      	ldr	r0, [pc, #240]	@ (800628c <HAL_ADC_ConfigChannel+0x7dc>)
 800619a:	f7ff f9c9 	bl	8005530 <LL_ADC_GetCommonPathInternalCh>
 800619e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	@ (8006290 <HAL_ADC_ConfigChannel+0x7e0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d127      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d121      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a35      	ldr	r2, [pc, #212]	@ (8006294 <HAL_ADC_ConfigChannel+0x7e4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d157      	bne.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061ca:	4619      	mov	r1, r3
 80061cc:	482f      	ldr	r0, [pc, #188]	@ (800628c <HAL_ADC_ConfigChannel+0x7dc>)
 80061ce:	f7ff f99c 	bl	800550a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061d2:	4b31      	ldr	r3, [pc, #196]	@ (8006298 <HAL_ADC_ConfigChannel+0x7e8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	099b      	lsrs	r3, r3, #6
 80061d8:	4a30      	ldr	r2, [pc, #192]	@ (800629c <HAL_ADC_ConfigChannel+0x7ec>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	4613      	mov	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80061ec:	e002      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f9      	bne.n	80061ee <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061fa:	e03a      	b.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a27      	ldr	r2, [pc, #156]	@ (80062a0 <HAL_ADC_ConfigChannel+0x7f0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d113      	bne.n	800622e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800620a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10d      	bne.n	800622e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1f      	ldr	r2, [pc, #124]	@ (8006294 <HAL_ADC_ConfigChannel+0x7e4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d12a      	bne.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800621c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006220:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006224:	4619      	mov	r1, r3
 8006226:	4819      	ldr	r0, [pc, #100]	@ (800628c <HAL_ADC_ConfigChannel+0x7dc>)
 8006228:	f7ff f96f 	bl	800550a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800622c:	e021      	b.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1c      	ldr	r2, [pc, #112]	@ (80062a4 <HAL_ADC_ConfigChannel+0x7f4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d11c      	bne.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800623c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d116      	bne.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a12      	ldr	r2, [pc, #72]	@ (8006294 <HAL_ADC_ConfigChannel+0x7e4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d111      	bne.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800624e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006256:	4619      	mov	r1, r3
 8006258:	480c      	ldr	r0, [pc, #48]	@ (800628c <HAL_ADC_ConfigChannel+0x7dc>)
 800625a:	f7ff f956 	bl	800550a <LL_ADC_SetCommonPathInternalCh>
 800625e:	e008      	b.n	8006272 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800627a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800627e:	4618      	mov	r0, r3
 8006280:	37d8      	adds	r7, #216	@ 0xd8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	80080000 	.word	0x80080000
 800628c:	50040300 	.word	0x50040300
 8006290:	c7520000 	.word	0xc7520000
 8006294:	50040000 	.word	0x50040000
 8006298:	20000020 	.word	0x20000020
 800629c:	053e2d63 	.word	0x053e2d63
 80062a0:	cb840000 	.word	0xcb840000
 80062a4:	80000001 	.word	0x80000001

080062a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e0ed      	b.n	8006496 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fc fc5c 	bl	8002b84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062dc:	f7ff f8d2 	bl	8005484 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80062e2:	e012      	b.n	800630a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80062e4:	f7ff f8ce 	bl	8005484 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b0a      	cmp	r3, #10
 80062f0:	d90b      	bls.n	800630a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2205      	movs	r2, #5
 8006302:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e0c5      	b.n	8006496 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0e5      	beq.n	80062e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0202 	bic.w	r2, r2, #2
 8006326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006328:	f7ff f8ac 	bl	8005484 <HAL_GetTick>
 800632c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800632e:	e012      	b.n	8006356 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006330:	f7ff f8a8 	bl	8005484 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b0a      	cmp	r3, #10
 800633c:	d90b      	bls.n	8006356 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2205      	movs	r2, #5
 800634e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e09f      	b.n	8006496 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7e1b      	ldrb	r3, [r3, #24]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d108      	bne.n	800637e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e007      	b.n	800638e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800638c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7e5b      	ldrb	r3, [r3, #25]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d108      	bne.n	80063a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e007      	b.n	80063b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7e9b      	ldrb	r3, [r3, #26]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d108      	bne.n	80063d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0220 	orr.w	r2, r2, #32
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e007      	b.n	80063e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0220 	bic.w	r2, r2, #32
 80063e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	7edb      	ldrb	r3, [r3, #27]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d108      	bne.n	80063fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0210 	bic.w	r2, r2, #16
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e007      	b.n	800640c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0210 	orr.w	r2, r2, #16
 800640a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7f1b      	ldrb	r3, [r3, #28]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d108      	bne.n	8006426 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0208 	orr.w	r2, r2, #8
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e007      	b.n	8006436 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0208 	bic.w	r2, r2, #8
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	7f5b      	ldrb	r3, [r3, #29]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d108      	bne.n	8006450 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0204 	orr.w	r2, r2, #4
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e007      	b.n	8006460 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0204 	bic.w	r2, r2, #4
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	ea42 0103 	orr.w	r1, r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4904      	ldr	r1, [pc, #16]	@ (80064c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40010400 	.word	0x40010400

080064c4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80064cc:	4b06      	ldr	r3, [pc, #24]	@ (80064e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	43db      	mvns	r3, r3
 80064d4:	4904      	ldr	r1, [pc, #16]	@ (80064e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010400 	.word	0x40010400

080064ec <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <LL_EXTI_EnableEvent_0_31+0x20>)
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	4904      	ldr	r1, [pc, #16]	@ (800650c <LL_EXTI_EnableEvent_0_31+0x20>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	604b      	str	r3, [r1, #4]

}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40010400 	.word	0x40010400

08006510 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006518:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <LL_EXTI_DisableEvent_0_31+0x24>)
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	43db      	mvns	r3, r3
 8006520:	4904      	ldr	r1, [pc, #16]	@ (8006534 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006522:	4013      	ands	r3, r2
 8006524:	604b      	str	r3, [r1, #4]
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010400 	.word	0x40010400

08006538 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006540:	4b05      	ldr	r3, [pc, #20]	@ (8006558 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	4904      	ldr	r1, [pc, #16]	@ (8006558 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4313      	orrs	r3, r2
 800654a:	608b      	str	r3, [r1, #8]

}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40010400 	.word	0x40010400

0800655c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	43db      	mvns	r3, r3
 800656c:	4904      	ldr	r1, [pc, #16]	@ (8006580 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800656e:	4013      	ands	r3, r2
 8006570:	608b      	str	r3, [r1, #8]

}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010400 	.word	0x40010400

08006584 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800658c:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	4904      	ldr	r1, [pc, #16]	@ (80065a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4313      	orrs	r3, r2
 8006596:	60cb      	str	r3, [r1, #12]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	40010400 	.word	0x40010400

080065a8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80065b0:	4b06      	ldr	r3, [pc, #24]	@ (80065cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	43db      	mvns	r3, r3
 80065b8:	4904      	ldr	r1, [pc, #16]	@ (80065cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	60cb      	str	r3, [r1, #12]
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40010400 	.word	0x40010400

080065d0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80065d8:	4a04      	ldr	r2, [pc, #16]	@ (80065ec <LL_EXTI_ClearFlag_0_31+0x1c>)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6153      	str	r3, [r2, #20]
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010400 	.word	0x40010400

080065f0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e0d1      	b.n	80067b0 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800661a:	d102      	bne.n	8006622 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e0c6      	b.n	80067b0 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d115      	bne.n	800665a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 800663c:	4b5f      	ldr	r3, [pc, #380]	@ (80067bc <HAL_COMP_Init+0x1cc>)
 800663e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006640:	4a5e      	ldr	r2, [pc, #376]	@ (80067bc <HAL_COMP_Init+0x1cc>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6613      	str	r3, [r2, #96]	@ 0x60
 8006648:	4b5c      	ldr	r3, [pc, #368]	@ (80067bc <HAL_COMP_Init+0x1cc>)
 800664a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fc fad9 	bl	8002c0c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006664:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b4b      	ldr	r3, [pc, #300]	@ (80067c0 <HAL_COMP_Init+0x1d0>)
 8006692:	4013      	ands	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	6979      	ldr	r1, [r7, #20]
 800669a:	430b      	orrs	r3, r1
 800669c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a6:	d106      	bne.n	80066b6 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80066a8:	4b46      	ldr	r3, [pc, #280]	@ (80067c4 <HAL_COMP_Init+0x1d4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a45      	ldr	r2, [pc, #276]	@ (80067c4 <HAL_COMP_Init+0x1d4>)
 80066ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	e005      	b.n	80066c2 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80066b6:	4b43      	ldr	r3, [pc, #268]	@ (80067c4 <HAL_COMP_Init+0x1d4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a42      	ldr	r2, [pc, #264]	@ (80067c4 <HAL_COMP_Init+0x1d4>)
 80066bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066c0:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <HAL_COMP_Init+0x10e>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d113      	bne.n	80066fe <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066d6:	4b3c      	ldr	r3, [pc, #240]	@ (80067c8 <HAL_COMP_Init+0x1d8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	099b      	lsrs	r3, r3, #6
 80066dc:	4a3b      	ldr	r2, [pc, #236]	@ (80067cc <HAL_COMP_Init+0x1dc>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80066f0:	e002      	b.n	80066f8 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f9      	bne.n	80066f2 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a33      	ldr	r2, [pc, #204]	@ (80067d0 <HAL_COMP_Init+0x1e0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d102      	bne.n	800670e <HAL_COMP_Init+0x11e>
 8006708:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800670c:	e001      	b.n	8006712 <HAL_COMP_Init+0x122>
 800670e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006712:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d037      	beq.n	8006790 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800672c:	6938      	ldr	r0, [r7, #16]
 800672e:	f7ff ff03 	bl	8006538 <LL_EXTI_EnableRisingTrig_0_31>
 8006732:	e002      	b.n	800673a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006734:	6938      	ldr	r0, [r7, #16]
 8006736:	f7ff ff11 	bl	800655c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f7ff ff1c 	bl	8006584 <LL_EXTI_EnableFallingTrig_0_31>
 800674c:	e002      	b.n	8006754 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	f7ff ff2a 	bl	80065a8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006754:	6938      	ldr	r0, [r7, #16]
 8006756:	f7ff ff3b 	bl	80065d0 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006766:	6938      	ldr	r0, [r7, #16]
 8006768:	f7ff fec0 	bl	80064ec <LL_EXTI_EnableEvent_0_31>
 800676c:	e002      	b.n	8006774 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800676e:	6938      	ldr	r0, [r7, #16]
 8006770:	f7ff fece 	bl	8006510 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006780:	6938      	ldr	r0, [r7, #16]
 8006782:	f7ff fe8d 	bl	80064a0 <LL_EXTI_EnableIT_0_31>
 8006786:	e009      	b.n	800679c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006788:	6938      	ldr	r0, [r7, #16]
 800678a:	f7ff fe9b 	bl	80064c4 <LL_EXTI_DisableIT_0_31>
 800678e:	e005      	b.n	800679c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006790:	6938      	ldr	r0, [r7, #16]
 8006792:	f7ff febd 	bl	8006510 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f7ff fe94 	bl	80064c4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80067b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000
 80067c0:	ff207d03 	.word	0xff207d03
 80067c4:	40010204 	.word	0x40010204
 80067c8:	20000020 	.word	0x20000020
 80067cc:	053e2d63 	.word	0x053e2d63
 80067d0:	40010200 	.word	0x40010200

080067d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006818 <__NVIC_SetPriorityGrouping+0x44>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80067f0:	4013      	ands	r3, r2
 80067f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006806:	4a04      	ldr	r2, [pc, #16]	@ (8006818 <__NVIC_SetPriorityGrouping+0x44>)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	60d3      	str	r3, [r2, #12]
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006820:	4b04      	ldr	r3, [pc, #16]	@ (8006834 <__NVIC_GetPriorityGrouping+0x18>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	f003 0307 	and.w	r3, r3, #7
}
 800682a:	4618      	mov	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	e000ed00 	.word	0xe000ed00

08006838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	6039      	str	r1, [r7, #0]
 8006842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006848:	2b00      	cmp	r3, #0
 800684a:	db0a      	blt.n	8006862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	b2da      	uxtb	r2, r3
 8006850:	490c      	ldr	r1, [pc, #48]	@ (8006884 <__NVIC_SetPriority+0x4c>)
 8006852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006856:	0112      	lsls	r2, r2, #4
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	440b      	add	r3, r1
 800685c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006860:	e00a      	b.n	8006878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	b2da      	uxtb	r2, r3
 8006866:	4908      	ldr	r1, [pc, #32]	@ (8006888 <__NVIC_SetPriority+0x50>)
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	3b04      	subs	r3, #4
 8006870:	0112      	lsls	r2, r2, #4
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	440b      	add	r3, r1
 8006876:	761a      	strb	r2, [r3, #24]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	e000e100 	.word	0xe000e100
 8006888:	e000ed00 	.word	0xe000ed00

0800688c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800688c:	b480      	push	{r7}
 800688e:	b089      	sub	sp, #36	@ 0x24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	f1c3 0307 	rsb	r3, r3, #7
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	bf28      	it	cs
 80068aa:	2304      	movcs	r3, #4
 80068ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	3304      	adds	r3, #4
 80068b2:	2b06      	cmp	r3, #6
 80068b4:	d902      	bls.n	80068bc <NVIC_EncodePriority+0x30>
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3b03      	subs	r3, #3
 80068ba:	e000      	b.n	80068be <NVIC_EncodePriority+0x32>
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068c0:	f04f 32ff 	mov.w	r2, #4294967295
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	43da      	mvns	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	401a      	ands	r2, r3
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068d4:	f04f 31ff 	mov.w	r1, #4294967295
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	fa01 f303 	lsl.w	r3, r1, r3
 80068de:	43d9      	mvns	r1, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e4:	4313      	orrs	r3, r2
         );
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3724      	adds	r7, #36	@ 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3b01      	subs	r3, #1
 8006900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006904:	d301      	bcc.n	800690a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006906:	2301      	movs	r3, #1
 8006908:	e00f      	b.n	800692a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800690a:	4a0a      	ldr	r2, [pc, #40]	@ (8006934 <SysTick_Config+0x40>)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3b01      	subs	r3, #1
 8006910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006912:	210f      	movs	r1, #15
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	f7ff ff8e 	bl	8006838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800691c:	4b05      	ldr	r3, [pc, #20]	@ (8006934 <SysTick_Config+0x40>)
 800691e:	2200      	movs	r2, #0
 8006920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006922:	4b04      	ldr	r3, [pc, #16]	@ (8006934 <SysTick_Config+0x40>)
 8006924:	2207      	movs	r2, #7
 8006926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	e000e010 	.word	0xe000e010

08006938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff47 	bl	80067d4 <__NVIC_SetPriorityGrouping>
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b086      	sub	sp, #24
 8006952:	af00      	add	r7, sp, #0
 8006954:	4603      	mov	r3, r0
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006960:	f7ff ff5c 	bl	800681c <__NVIC_GetPriorityGrouping>
 8006964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	f7ff ff8e 	bl	800688c <NVIC_EncodePriority>
 8006970:	4602      	mov	r2, r0
 8006972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006976:	4611      	mov	r1, r2
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff ff5d 	bl	8006838 <__NVIC_SetPriority>
}
 800697e:	bf00      	nop
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ffb0 	bl	80068f4 <SysTick_Config>
 8006994:	4603      	mov	r3, r0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069ae:	e166      	b.n	8006c7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2101      	movs	r1, #1
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	fa01 f303 	lsl.w	r3, r1, r3
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8158 	beq.w	8006c78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d005      	beq.n	80069e0 <HAL_GPIO_Init+0x40>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d130      	bne.n	8006a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	2203      	movs	r2, #3
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a16:	2201      	movs	r2, #1
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	091b      	lsrs	r3, r3, #4
 8006a2c:	f003 0201 	and.w	r2, r3, #1
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d017      	beq.n	8006a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	2203      	movs	r2, #3
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4013      	ands	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d123      	bne.n	8006ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	08da      	lsrs	r2, r3, #3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3208      	adds	r2, #8
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	220f      	movs	r2, #15
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	08da      	lsrs	r2, r3, #3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3208      	adds	r2, #8
 8006acc:	6939      	ldr	r1, [r7, #16]
 8006ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	2203      	movs	r2, #3
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80b2 	beq.w	8006c78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b14:	4b61      	ldr	r3, [pc, #388]	@ (8006c9c <HAL_GPIO_Init+0x2fc>)
 8006b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b18:	4a60      	ldr	r2, [pc, #384]	@ (8006c9c <HAL_GPIO_Init+0x2fc>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b20:	4b5e      	ldr	r3, [pc, #376]	@ (8006c9c <HAL_GPIO_Init+0x2fc>)
 8006b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ca0 <HAL_GPIO_Init+0x300>)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	089b      	lsrs	r3, r3, #2
 8006b32:	3302      	adds	r3, #2
 8006b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	220f      	movs	r2, #15
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006b56:	d02b      	beq.n	8006bb0 <HAL_GPIO_Init+0x210>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a52      	ldr	r2, [pc, #328]	@ (8006ca4 <HAL_GPIO_Init+0x304>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d025      	beq.n	8006bac <HAL_GPIO_Init+0x20c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a51      	ldr	r2, [pc, #324]	@ (8006ca8 <HAL_GPIO_Init+0x308>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01f      	beq.n	8006ba8 <HAL_GPIO_Init+0x208>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a50      	ldr	r2, [pc, #320]	@ (8006cac <HAL_GPIO_Init+0x30c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d019      	beq.n	8006ba4 <HAL_GPIO_Init+0x204>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a4f      	ldr	r2, [pc, #316]	@ (8006cb0 <HAL_GPIO_Init+0x310>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <HAL_GPIO_Init+0x200>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a4e      	ldr	r2, [pc, #312]	@ (8006cb4 <HAL_GPIO_Init+0x314>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00d      	beq.n	8006b9c <HAL_GPIO_Init+0x1fc>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a4d      	ldr	r2, [pc, #308]	@ (8006cb8 <HAL_GPIO_Init+0x318>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <HAL_GPIO_Init+0x1f8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8006cbc <HAL_GPIO_Init+0x31c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d101      	bne.n	8006b94 <HAL_GPIO_Init+0x1f4>
 8006b90:	2307      	movs	r3, #7
 8006b92:	e00e      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006b94:	2308      	movs	r3, #8
 8006b96:	e00c      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006b98:	2306      	movs	r3, #6
 8006b9a:	e00a      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006b9c:	2305      	movs	r3, #5
 8006b9e:	e008      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	e006      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e004      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e002      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <HAL_GPIO_Init+0x212>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	f002 0203 	and.w	r2, r2, #3
 8006bb8:	0092      	lsls	r2, r2, #2
 8006bba:	4093      	lsls	r3, r2
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006bc2:	4937      	ldr	r1, [pc, #220]	@ (8006ca0 <HAL_GPIO_Init+0x300>)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bf4:	4a32      	ldr	r2, [pc, #200]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006bfa:	4b31      	ldr	r3, [pc, #196]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	43db      	mvns	r3, r3
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4013      	ands	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c1e:	4a28      	ldr	r2, [pc, #160]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006c24:	4b26      	ldr	r3, [pc, #152]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c48:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	43db      	mvns	r3, r3
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c72:	4a13      	ldr	r2, [pc, #76]	@ (8006cc0 <HAL_GPIO_Init+0x320>)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f47f ae91 	bne.w	80069b0 <HAL_GPIO_Init+0x10>
  }
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	48000400 	.word	0x48000400
 8006ca8:	48000800 	.word	0x48000800
 8006cac:	48000c00 	.word	0x48000c00
 8006cb0:	48001000 	.word	0x48001000
 8006cb4:	48001400 	.word	0x48001400
 8006cb8:	48001800 	.word	0x48001800
 8006cbc:	48001c00 	.word	0x48001c00
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	e001      	b.n	8006ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
 8006d00:	4613      	mov	r3, r2
 8006d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d04:	787b      	ldrb	r3, [r7, #1]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d0a:	887a      	ldrh	r2, [r7, #2]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d10:	e002      	b.n	8006d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d12:	887a      	ldrh	r2, [r7, #2]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e08d      	b.n	8006e52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb ffb2 	bl	8002cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	@ 0x24
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0201 	bic.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d107      	bne.n	8006d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d9a:	609a      	str	r2, [r3, #8]
 8006d9c:	e006      	b.n	8006dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d108      	bne.n	8006dc6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dc2:	605a      	str	r2, [r3, #4]
 8006dc4:	e007      	b.n	8006dd6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69d9      	ldr	r1, [r3, #28]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	461a      	mov	r2, r3
 8006e68:	460b      	mov	r3, r1
 8006e6a:	817b      	strh	r3, [r7, #10]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	f040 80fd 	bne.w	8007078 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_I2C_Master_Transmit+0x30>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e0f6      	b.n	800707a <HAL_I2C_Master_Transmit+0x21e>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e94:	f7fe faf6 	bl	8005484 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	2319      	movs	r3, #25
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fa0a 	bl	80072c0 <I2C_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0e1      	b.n	800707a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2221      	movs	r2, #33	@ 0x21
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2210      	movs	r2, #16
 8006ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	893a      	ldrh	r2, [r7, #8]
 8006ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2bff      	cmp	r3, #255	@ 0xff
 8006ee6:	d906      	bls.n	8006ef6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	22ff      	movs	r2, #255	@ 0xff
 8006eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e007      	b.n	8006f06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d024      	beq.n	8006f58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	3301      	adds	r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	8979      	ldrh	r1, [r7, #10]
 8006f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8007084 <HAL_I2C_Master_Transmit+0x228>)
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fbf1 	bl	8007738 <I2C_TransferConfig>
 8006f56:	e066      	b.n	8007026 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	8979      	ldrh	r1, [r7, #10]
 8006f60:	4b48      	ldr	r3, [pc, #288]	@ (8007084 <HAL_I2C_Master_Transmit+0x228>)
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fbe6 	bl	8007738 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006f6c:	e05b      	b.n	8007026 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	6a39      	ldr	r1, [r7, #32]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f9f3 	bl	800735e <I2C_WaitOnTXISFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e07b      	b.n	800707a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d034      	beq.n	8007026 <HAL_I2C_Master_Transmit+0x1ca>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d130      	bne.n	8007026 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2180      	movs	r1, #128	@ 0x80
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f976 	bl	80072c0 <I2C_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e04d      	b.n	800707a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2bff      	cmp	r3, #255	@ 0xff
 8006fe6:	d90e      	bls.n	8007006 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	22ff      	movs	r2, #255	@ 0xff
 8006fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	8979      	ldrh	r1, [r7, #10]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fb9a 	bl	8007738 <I2C_TransferConfig>
 8007004:	e00f      	b.n	8007026 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007014:	b2da      	uxtb	r2, r3
 8007016:	8979      	ldrh	r1, [r7, #10]
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fb89 	bl	8007738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d19e      	bne.n	8006f6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	6a39      	ldr	r1, [r7, #32]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f9d9 	bl	80073ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e01a      	b.n	800707a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2220      	movs	r2, #32
 800704a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6859      	ldr	r1, [r3, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <HAL_I2C_Master_Transmit+0x22c>)
 8007058:	400b      	ands	r3, r1
 800705a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	80002000 	.word	0x80002000
 8007088:	fe00e800 	.word	0xfe00e800

0800708c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	461a      	mov	r2, r3
 8007098:	460b      	mov	r3, r1
 800709a:	817b      	strh	r3, [r7, #10]
 800709c:	4613      	mov	r3, r2
 800709e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	f040 80db 	bne.w	8007264 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_I2C_Master_Receive+0x30>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e0d4      	b.n	8007266 <HAL_I2C_Master_Receive+0x1da>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070c4:	f7fe f9de 	bl	8005484 <HAL_GetTick>
 80070c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2319      	movs	r3, #25
 80070d0:	2201      	movs	r2, #1
 80070d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f8f2 	bl	80072c0 <I2C_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e0bf      	b.n	8007266 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2222      	movs	r2, #34	@ 0x22
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2210      	movs	r2, #16
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	893a      	ldrh	r2, [r7, #8]
 8007106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007112:	b29b      	uxth	r3, r3
 8007114:	2bff      	cmp	r3, #255	@ 0xff
 8007116:	d90e      	bls.n	8007136 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	22ff      	movs	r2, #255	@ 0xff
 800711c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007122:	b2da      	uxtb	r2, r3
 8007124:	8979      	ldrh	r1, [r7, #10]
 8007126:	4b52      	ldr	r3, [pc, #328]	@ (8007270 <HAL_I2C_Master_Receive+0x1e4>)
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fb02 	bl	8007738 <I2C_TransferConfig>
 8007134:	e06d      	b.n	8007212 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007144:	b2da      	uxtb	r2, r3
 8007146:	8979      	ldrh	r1, [r7, #10]
 8007148:	4b49      	ldr	r3, [pc, #292]	@ (8007270 <HAL_I2C_Master_Receive+0x1e4>)
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 faf1 	bl	8007738 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007156:	e05c      	b.n	8007212 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	6a39      	ldr	r1, [r7, #32]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f989 	bl	8007474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e07c      	b.n	8007266 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d034      	beq.n	8007212 <HAL_I2C_Master_Receive+0x186>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d130      	bne.n	8007212 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	2200      	movs	r2, #0
 80071b8:	2180      	movs	r1, #128	@ 0x80
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f880 	bl	80072c0 <I2C_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e04d      	b.n	8007266 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2bff      	cmp	r3, #255	@ 0xff
 80071d2:	d90e      	bls.n	80071f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	22ff      	movs	r2, #255	@ 0xff
 80071d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	8979      	ldrh	r1, [r7, #10]
 80071e2:	2300      	movs	r3, #0
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 faa4 	bl	8007738 <I2C_TransferConfig>
 80071f0:	e00f      	b.n	8007212 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007200:	b2da      	uxtb	r2, r3
 8007202:	8979      	ldrh	r1, [r7, #10]
 8007204:	2300      	movs	r3, #0
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fa93 	bl	8007738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d19d      	bne.n	8007158 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	6a39      	ldr	r1, [r7, #32]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f8e3 	bl	80073ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e01a      	b.n	8007266 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2220      	movs	r2, #32
 8007236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6859      	ldr	r1, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <HAL_I2C_Master_Receive+0x1e8>)
 8007244:	400b      	ands	r3, r1
 8007246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	e000      	b.n	8007266 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007264:	2302      	movs	r3, #2
  }
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	80002400 	.word	0x80002400
 8007274:	fe00e800 	.word	0xfe00e800

08007278 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d103      	bne.n	8007296 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d007      	beq.n	80072b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	619a      	str	r2, [r3, #24]
  }
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d0:	e031      	b.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d02d      	beq.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072da:	f7fe f8d3 	bl	8005484 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d122      	bne.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4013      	ands	r3, r2
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	429a      	cmp	r2, r3
 800730c:	d113      	bne.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e00f      	b.n	8007356 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699a      	ldr	r2, [r3, #24]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0be      	beq.n	80072d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800736a:	e033      	b.n	80073d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f901 	bl	8007578 <I2C_IsErrorOccurred>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e031      	b.n	80073e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	d025      	beq.n	80073d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007388:	f7fe f87c 	bl	8005484 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	429a      	cmp	r2, r3
 8007396:	d302      	bcc.n	800739e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11a      	bne.n	80073d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d013      	beq.n	80073d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e007      	b.n	80073e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d1c4      	bne.n	800736c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f8:	e02f      	b.n	800745a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f8ba 	bl	8007578 <I2C_IsErrorOccurred>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e02d      	b.n	800746a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fe f839 	bl	8005484 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11a      	bne.n	800745a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d013      	beq.n	800745a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007436:	f043 0220 	orr.w	r2, r3, #32
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e007      	b.n	800746a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b20      	cmp	r3, #32
 8007466:	d1c8      	bne.n	80073fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007480:	e06b      	b.n	800755a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f876 	bl	8007578 <I2C_IsErrorOccurred>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e069      	b.n	800756a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d138      	bne.n	8007516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d105      	bne.n	80074be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e055      	b.n	800756a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d107      	bne.n	80074dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2210      	movs	r2, #16
 80074d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2204      	movs	r2, #4
 80074d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80074da:	e002      	b.n	80074e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2220      	movs	r2, #32
 80074e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6859      	ldr	r1, [r3, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	4b1f      	ldr	r3, [pc, #124]	@ (8007574 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80074f6:	400b      	ands	r3, r1
 80074f8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e029      	b.n	800756a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007516:	f7fd ffb5 	bl	8005484 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d116      	bne.n	800755a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b04      	cmp	r3, #4
 8007538:	d00f      	beq.n	800755a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e007      	b.n	800756a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d18c      	bne.n	8007482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	fe00e800 	.word	0xfe00e800

08007578 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	@ 0x28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d068      	beq.n	8007676 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2210      	movs	r2, #16
 80075aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80075ac:	e049      	b.n	8007642 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d045      	beq.n	8007642 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80075b6:	f7fd ff65 	bl	8005484 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d302      	bcc.n	80075cc <I2C_IsErrorOccurred+0x54>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d13a      	bne.n	8007642 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ee:	d121      	bne.n	8007634 <I2C_IsErrorOccurred+0xbc>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075f6:	d01d      	beq.n	8007634 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80075f8:	7cfb      	ldrb	r3, [r7, #19]
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d01a      	beq.n	8007634 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800760c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800760e:	f7fd ff39 	bl	8005484 <HAL_GetTick>
 8007612:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007614:	e00e      	b.n	8007634 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007616:	f7fd ff35 	bl	8005484 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b19      	cmp	r3, #25
 8007622:	d907      	bls.n	8007634 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	f043 0320 	orr.w	r3, r3, #32
 800762a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007632:	e006      	b.n	8007642 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b20      	cmp	r3, #32
 8007640:	d1e9      	bne.n	8007616 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b20      	cmp	r3, #32
 800764e:	d003      	beq.n	8007658 <I2C_IsErrorOccurred+0xe0>
 8007650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0aa      	beq.n	80075ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2220      	movs	r2, #32
 8007666:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	f043 0304 	orr.w	r3, r3, #4
 800766e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007698:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	f043 0308 	orr.w	r3, r3, #8
 80076b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80076ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	f043 0302 	orr.w	r3, r3, #2
 80076d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80076e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01c      	beq.n	8007726 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fdc3 	bl	8007278 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6859      	ldr	r1, [r3, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <I2C_IsErrorOccurred+0x1bc>)
 80076fe:	400b      	ands	r3, r1
 8007700:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	431a      	orrs	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800772a:	4618      	mov	r0, r3
 800772c:	3728      	adds	r7, #40	@ 0x28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	fe00e800 	.word	0xfe00e800

08007738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	817b      	strh	r3, [r7, #10]
 8007746:	4613      	mov	r3, r2
 8007748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800774a:	897b      	ldrh	r3, [r7, #10]
 800774c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007750:	7a7b      	ldrb	r3, [r7, #9]
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007758:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	4313      	orrs	r3, r2
 8007762:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007766:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	0d5b      	lsrs	r3, r3, #21
 8007772:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007776:	4b08      	ldr	r3, [pc, #32]	@ (8007798 <I2C_TransferConfig+0x60>)
 8007778:	430b      	orrs	r3, r1
 800777a:	43db      	mvns	r3, r3
 800777c:	ea02 0103 	and.w	r1, r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	430a      	orrs	r2, r1
 8007788:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	03ff63ff 	.word	0x03ff63ff

0800779c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d138      	bne.n	8007824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077bc:	2302      	movs	r3, #2
 80077be:	e032      	b.n	8007826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	@ 0x24
 80077cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0201 	bic.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0201 	orr.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b20      	cmp	r3, #32
 8007846:	d139      	bne.n	80078bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007852:	2302      	movs	r3, #2
 8007854:	e033      	b.n	80078be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	@ 0x24
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007884:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	e000      	b.n	80078be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078bc:	2302      	movs	r3, #2
  }
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078d0:	4b05      	ldr	r3, [pc, #20]	@ (80078e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a04      	ldr	r2, [pc, #16]	@ (80078e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078da:	6013      	str	r3, [r2, #0]
}
 80078dc:	bf00      	nop
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40007000 	.word	0x40007000

080078ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <HAL_PWREx_GetVoltageRange+0x3c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fc:	d102      	bne.n	8007904 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80078fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007902:	e00b      	b.n	800791c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007904:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007912:	d102      	bne.n	800791a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007918:	e000      	b.n	800791c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800791a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800791c:	4618      	mov	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40007000 	.word	0x40007000

0800792c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d141      	bne.n	80079be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800793a:	4b4b      	ldr	r3, [pc, #300]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007946:	d131      	bne.n	80079ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007948:	4b47      	ldr	r3, [pc, #284]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800794a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800794e:	4a46      	ldr	r2, [pc, #280]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007958:	4b43      	ldr	r3, [pc, #268]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007960:	4a41      	ldr	r2, [pc, #260]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007968:	4b40      	ldr	r3, [pc, #256]	@ (8007a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2232      	movs	r2, #50	@ 0x32
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	4a3f      	ldr	r2, [pc, #252]	@ (8007a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	0c9b      	lsrs	r3, r3, #18
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800797e:	e002      	b.n	8007986 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b01      	subs	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007986:	4b38      	ldr	r3, [pc, #224]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800798e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007992:	d102      	bne.n	800799a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1f2      	bne.n	8007980 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800799a:	4b33      	ldr	r3, [pc, #204]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a6:	d158      	bne.n	8007a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e057      	b.n	8007a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80079bc:	e04d      	b.n	8007a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c4:	d141      	bne.n	8007a4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079c6:	4b28      	ldr	r3, [pc, #160]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80079ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d2:	d131      	bne.n	8007a38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079d4:	4b24      	ldr	r3, [pc, #144]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079da:	4a23      	ldr	r2, [pc, #140]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80079e4:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80079f4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2232      	movs	r2, #50	@ 0x32
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a00:	fba2 2303 	umull	r2, r3, r2, r3
 8007a04:	0c9b      	lsrs	r3, r3, #18
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a0a:	e002      	b.n	8007a12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a12:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a1e:	d102      	bne.n	8007a26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f2      	bne.n	8007a0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a32:	d112      	bne.n	8007a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e011      	b.n	8007a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a38:	4b0b      	ldr	r3, [pc, #44]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a48:	e007      	b.n	8007a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a4a:	4b07      	ldr	r3, [pc, #28]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a52:	4a05      	ldr	r2, [pc, #20]	@ (8007a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a58:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40007000 	.word	0x40007000
 8007a6c:	20000020 	.word	0x20000020
 8007a70:	431bde83 	.word	0x431bde83

08007a74 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4a04      	ldr	r2, [pc, #16]	@ (8007a90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a82:	6053      	str	r3, [r2, #4]
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40007000 	.word	0x40007000

08007a94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f000 bc08 	b.w	80082b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aa8:	4b96      	ldr	r3, [pc, #600]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 030c 	and.w	r3, r3, #12
 8007ab0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ab2:	4b94      	ldr	r3, [pc, #592]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80e4 	beq.w	8007c92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x4c>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	2b0c      	cmp	r3, #12
 8007ad4:	f040 808b 	bne.w	8007bee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	f040 8087 	bne.w	8007bee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007ae0:	4b88      	ldr	r3, [pc, #544]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCC_OscConfig+0x64>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e3df      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1a      	ldr	r2, [r3, #32]
 8007afc:	4b81      	ldr	r3, [pc, #516]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <HAL_RCC_OscConfig+0x7e>
 8007b08:	4b7e      	ldr	r3, [pc, #504]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b10:	e005      	b.n	8007b1e <HAL_RCC_OscConfig+0x8a>
 8007b12:	4b7c      	ldr	r3, [pc, #496]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b18:	091b      	lsrs	r3, r3, #4
 8007b1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d223      	bcs.n	8007b6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fdcc 	bl	80086c4 <RCC_SetFlashLatencyFromMSIRange>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e3c0      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b36:	4b73      	ldr	r3, [pc, #460]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a72      	ldr	r2, [pc, #456]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b3c:	f043 0308 	orr.w	r3, r3, #8
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	4b70      	ldr	r3, [pc, #448]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	496d      	ldr	r1, [pc, #436]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b54:	4b6b      	ldr	r3, [pc, #428]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	4968      	ldr	r1, [pc, #416]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	604b      	str	r3, [r1, #4]
 8007b68:	e025      	b.n	8007bb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b6a:	4b66      	ldr	r3, [pc, #408]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a65      	ldr	r2, [pc, #404]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b70:	f043 0308 	orr.w	r3, r3, #8
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	4b63      	ldr	r3, [pc, #396]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	4960      	ldr	r1, [pc, #384]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b88:	4b5e      	ldr	r3, [pc, #376]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	495b      	ldr	r1, [pc, #364]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fd8c 	bl	80086c4 <RCC_SetFlashLatencyFromMSIRange>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e380      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bb6:	f000 fcc1 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b51      	ldr	r3, [pc, #324]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	4950      	ldr	r1, [pc, #320]	@ (8007d08 <HAL_RCC_OscConfig+0x274>)
 8007bc8:	5ccb      	ldrb	r3, [r1, r3]
 8007bca:	f003 031f 	and.w	r3, r3, #31
 8007bce:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8007d0c <HAL_RCC_OscConfig+0x278>)
 8007bd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8007d10 <HAL_RCC_OscConfig+0x27c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fc02 	bl	80053e4 <HAL_InitTick>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d052      	beq.n	8007c90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	e364      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d032      	beq.n	8007c5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007bf6:	4b43      	ldr	r3, [pc, #268]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a42      	ldr	r2, [pc, #264]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007bfc:	f043 0301 	orr.w	r3, r3, #1
 8007c00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c02:	f7fd fc3f 	bl	8005484 <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c0a:	f7fd fc3b 	bl	8005484 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e34d      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c1c:	4b39      	ldr	r3, [pc, #228]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0f0      	beq.n	8007c0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c28:	4b36      	ldr	r3, [pc, #216]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a35      	ldr	r2, [pc, #212]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c2e:	f043 0308 	orr.w	r3, r3, #8
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	4b33      	ldr	r3, [pc, #204]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	4930      	ldr	r1, [pc, #192]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c46:	4b2f      	ldr	r3, [pc, #188]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	492b      	ldr	r1, [pc, #172]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	604b      	str	r3, [r1, #4]
 8007c5a:	e01a      	b.n	8007c92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007c5c:	4b29      	ldr	r3, [pc, #164]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a28      	ldr	r2, [pc, #160]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c68:	f7fd fc0c 	bl	8005484 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c70:	f7fd fc08 	bl	8005484 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e31a      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007c82:	4b20      	ldr	r3, [pc, #128]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f0      	bne.n	8007c70 <HAL_RCC_OscConfig+0x1dc>
 8007c8e:	e000      	b.n	8007c92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d073      	beq.n	8007d86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d005      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x21c>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2b0c      	cmp	r3, #12
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d10b      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb0:	4b14      	ldr	r3, [pc, #80]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d063      	beq.n	8007d84 <HAL_RCC_OscConfig+0x2f0>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d15f      	bne.n	8007d84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e2f7      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd0:	d106      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x24c>
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e025      	b.n	8007d2c <HAL_RCC_OscConfig+0x298>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ce8:	d114      	bne.n	8007d14 <HAL_RCC_OscConfig+0x280>
 8007cea:	4b06      	ldr	r3, [pc, #24]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a05      	ldr	r2, [pc, #20]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	4b03      	ldr	r3, [pc, #12]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a02      	ldr	r2, [pc, #8]	@ (8007d04 <HAL_RCC_OscConfig+0x270>)
 8007cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e013      	b.n	8007d2c <HAL_RCC_OscConfig+0x298>
 8007d04:	40021000 	.word	0x40021000
 8007d08:	08014c74 	.word	0x08014c74
 8007d0c:	20000020 	.word	0x20000020
 8007d10:	20000024 	.word	0x20000024
 8007d14:	4ba0      	ldr	r3, [pc, #640]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a9f      	ldr	r2, [pc, #636]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4b9d      	ldr	r3, [pc, #628]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a9c      	ldr	r2, [pc, #624]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d013      	beq.n	8007d5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fd fba6 	bl	8005484 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d3c:	f7fd fba2 	bl	8005484 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	@ 0x64
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e2b4      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d4e:	4b92      	ldr	r3, [pc, #584]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f0      	beq.n	8007d3c <HAL_RCC_OscConfig+0x2a8>
 8007d5a:	e014      	b.n	8007d86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5c:	f7fd fb92 	bl	8005484 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d64:	f7fd fb8e 	bl	8005484 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	@ 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e2a0      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d76:	4b88      	ldr	r3, [pc, #544]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <HAL_RCC_OscConfig+0x2d0>
 8007d82:	e000      	b.n	8007d86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d060      	beq.n	8007e54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_OscConfig+0x310>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b0c      	cmp	r3, #12
 8007d9c:	d119      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d116      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007da4:	4b7c      	ldr	r3, [pc, #496]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <HAL_RCC_OscConfig+0x328>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e27d      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dbc:	4b76      	ldr	r3, [pc, #472]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	061b      	lsls	r3, r3, #24
 8007dca:	4973      	ldr	r1, [pc, #460]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dd0:	e040      	b.n	8007e54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d023      	beq.n	8007e22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dda:	4b6f      	ldr	r3, [pc, #444]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6e      	ldr	r2, [pc, #440]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de6:	f7fd fb4d 	bl	8005484 <HAL_GetTick>
 8007dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dec:	e008      	b.n	8007e00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dee:	f7fd fb49 	bl	8005484 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e25b      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e00:	4b65      	ldr	r3, [pc, #404]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0f0      	beq.n	8007dee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0c:	4b62      	ldr	r3, [pc, #392]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	495f      	ldr	r1, [pc, #380]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	604b      	str	r3, [r1, #4]
 8007e20:	e018      	b.n	8007e54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e22:	4b5d      	ldr	r3, [pc, #372]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a5c      	ldr	r2, [pc, #368]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2e:	f7fd fb29 	bl	8005484 <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e36:	f7fd fb25 	bl	8005484 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e237      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e48:	4b53      	ldr	r3, [pc, #332]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f0      	bne.n	8007e36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d03c      	beq.n	8007eda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e68:	4b4b      	ldr	r3, [pc, #300]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e78:	f7fd fb04 	bl	8005484 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e80:	f7fd fb00 	bl	8005484 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e212      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e92:	4b41      	ldr	r3, [pc, #260]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0ef      	beq.n	8007e80 <HAL_RCC_OscConfig+0x3ec>
 8007ea0:	e01b      	b.n	8007eda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007eaa:	f023 0301 	bic.w	r3, r3, #1
 8007eae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb2:	f7fd fae7 	bl	8005484 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eba:	f7fd fae3 	bl	8005484 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e1f5      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ecc:	4b32      	ldr	r3, [pc, #200]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1ef      	bne.n	8007eba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80a6 	beq.w	8008034 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007eec:	4b2a      	ldr	r3, [pc, #168]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10d      	bne.n	8007f14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ef8:	4b27      	ldr	r3, [pc, #156]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efc:	4a26      	ldr	r2, [pc, #152]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f04:	4b24      	ldr	r3, [pc, #144]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f10:	2301      	movs	r3, #1
 8007f12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f14:	4b21      	ldr	r3, [pc, #132]	@ (8007f9c <HAL_RCC_OscConfig+0x508>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d118      	bne.n	8007f52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f20:	4b1e      	ldr	r3, [pc, #120]	@ (8007f9c <HAL_RCC_OscConfig+0x508>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1d      	ldr	r2, [pc, #116]	@ (8007f9c <HAL_RCC_OscConfig+0x508>)
 8007f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f2c:	f7fd faaa 	bl	8005484 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f34:	f7fd faa6 	bl	8005484 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e1b8      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f46:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <HAL_RCC_OscConfig+0x508>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d108      	bne.n	8007f6c <HAL_RCC_OscConfig+0x4d8>
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f60:	4a0d      	ldr	r2, [pc, #52]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f6a:	e029      	b.n	8007fc0 <HAL_RCC_OscConfig+0x52c>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d115      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x50c>
 8007f74:	4b08      	ldr	r3, [pc, #32]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7a:	4a07      	ldr	r2, [pc, #28]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f7c:	f043 0304 	orr.w	r3, r3, #4
 8007f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f84:	4b04      	ldr	r3, [pc, #16]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8a:	4a03      	ldr	r2, [pc, #12]	@ (8007f98 <HAL_RCC_OscConfig+0x504>)
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f94:	e014      	b.n	8007fc0 <HAL_RCC_OscConfig+0x52c>
 8007f96:	bf00      	nop
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	40007000 	.word	0x40007000
 8007fa0:	4b9d      	ldr	r3, [pc, #628]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa6:	4a9c      	ldr	r2, [pc, #624]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fb0:	4b99      	ldr	r3, [pc, #612]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8007fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb6:	4a98      	ldr	r2, [pc, #608]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8007fb8:	f023 0304 	bic.w	r3, r3, #4
 8007fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d016      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc8:	f7fd fa5c 	bl	8005484 <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fce:	e00a      	b.n	8007fe6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fd0:	f7fd fa58 	bl	8005484 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e168      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fe6:	4b8c      	ldr	r3, [pc, #560]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8007fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0ed      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x53c>
 8007ff4:	e015      	b.n	8008022 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff6:	f7fd fa45 	bl	8005484 <HAL_GetTick>
 8007ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ffc:	e00a      	b.n	8008014 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffe:	f7fd fa41 	bl	8005484 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800800c:	4293      	cmp	r3, r2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e151      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008014:	4b80      	ldr	r3, [pc, #512]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1ed      	bne.n	8007ffe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008022:	7ffb      	ldrb	r3, [r7, #31]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008028:	4b7b      	ldr	r3, [pc, #492]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 800802a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802c:	4a7a      	ldr	r2, [pc, #488]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 800802e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008032:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d03c      	beq.n	80080ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01c      	beq.n	8008082 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008048:	4b73      	ldr	r3, [pc, #460]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 800804a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800804e:	4a72      	ldr	r2, [pc, #456]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008058:	f7fd fa14 	bl	8005484 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008060:	f7fd fa10 	bl	8005484 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e122      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008072:	4b69      	ldr	r3, [pc, #420]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0ef      	beq.n	8008060 <HAL_RCC_OscConfig+0x5cc>
 8008080:	e01b      	b.n	80080ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008082:	4b65      	ldr	r3, [pc, #404]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008088:	4a63      	ldr	r2, [pc, #396]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008092:	f7fd f9f7 	bl	8005484 <HAL_GetTick>
 8008096:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800809a:	f7fd f9f3 	bl	8005484 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e105      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80080ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1ef      	bne.n	800809a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80f9 	beq.w	80082b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	f040 80cf 	bne.w	800826c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80080ce:	4b52      	ldr	r3, [pc, #328]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f003 0203 	and.w	r2, r3, #3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d12c      	bne.n	800813c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ec:	3b01      	subs	r3, #1
 80080ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d123      	bne.n	800813c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d11b      	bne.n	800813c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008110:	429a      	cmp	r2, r3
 8008112:	d113      	bne.n	800813c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	3b01      	subs	r3, #1
 8008122:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008124:	429a      	cmp	r2, r3
 8008126:	d109      	bne.n	800813c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	3b01      	subs	r3, #1
 8008136:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008138:	429a      	cmp	r2, r3
 800813a:	d071      	beq.n	8008220 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b0c      	cmp	r3, #12
 8008140:	d068      	beq.n	8008214 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008142:	4b35      	ldr	r3, [pc, #212]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d105      	bne.n	800815a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800814e:	4b32      	ldr	r3, [pc, #200]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e0ac      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800815e:	4b2e      	ldr	r3, [pc, #184]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a2d      	ldr	r2, [pc, #180]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008168:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800816a:	f7fd f98b 	bl	8005484 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008172:	f7fd f987 	bl	8005484 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e099      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008184:	4b24      	ldr	r3, [pc, #144]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008190:	4b21      	ldr	r3, [pc, #132]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	4b21      	ldr	r3, [pc, #132]	@ (800821c <HAL_RCC_OscConfig+0x788>)
 8008196:	4013      	ands	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081a0:	3a01      	subs	r2, #1
 80081a2:	0112      	lsls	r2, r2, #4
 80081a4:	4311      	orrs	r1, r2
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80081aa:	0212      	lsls	r2, r2, #8
 80081ac:	4311      	orrs	r1, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80081b2:	0852      	lsrs	r2, r2, #1
 80081b4:	3a01      	subs	r2, #1
 80081b6:	0552      	lsls	r2, r2, #21
 80081b8:	4311      	orrs	r1, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80081be:	0852      	lsrs	r2, r2, #1
 80081c0:	3a01      	subs	r2, #1
 80081c2:	0652      	lsls	r2, r2, #25
 80081c4:	4311      	orrs	r1, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80081ca:	06d2      	lsls	r2, r2, #27
 80081cc:	430a      	orrs	r2, r1
 80081ce:	4912      	ldr	r1, [pc, #72]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80081d4:	4b10      	ldr	r3, [pc, #64]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80081da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 80081e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081ec:	f7fd f94a 	bl	8005484 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081f4:	f7fd f946 	bl	8005484 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e058      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008206:	4b04      	ldr	r3, [pc, #16]	@ (8008218 <HAL_RCC_OscConfig+0x784>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008212:	e050      	b.n	80082b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e04f      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
 8008218:	40021000 	.word	0x40021000
 800821c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008220:	4b27      	ldr	r3, [pc, #156]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d144      	bne.n	80082b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800822c:	4b24      	ldr	r3, [pc, #144]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 8008232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008236:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008238:	4b21      	ldr	r3, [pc, #132]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	4a20      	ldr	r2, [pc, #128]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 800823e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008244:	f7fd f91e 	bl	8005484 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800824c:	f7fd f91a 	bl	8005484 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e02c      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800825e:	4b18      	ldr	r3, [pc, #96]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x7b8>
 800826a:	e024      	b.n	80082b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b0c      	cmp	r3, #12
 8008270:	d01f      	beq.n	80082b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008272:	4b13      	ldr	r3, [pc, #76]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a12      	ldr	r2, [pc, #72]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 8008278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800827c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827e:	f7fd f901 	bl	8005484 <HAL_GetTick>
 8008282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008286:	f7fd f8fd 	bl	8005484 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e00f      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008298:	4b09      	ldr	r3, [pc, #36]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f0      	bne.n	8008286 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80082a4:	4b06      	ldr	r3, [pc, #24]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	4905      	ldr	r1, [pc, #20]	@ (80082c0 <HAL_RCC_OscConfig+0x82c>)
 80082aa:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <HAL_RCC_OscConfig+0x830>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	60cb      	str	r3, [r1, #12]
 80082b0:	e001      	b.n	80082b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40021000 	.word	0x40021000
 80082c4:	feeefffc 	.word	0xfeeefffc

080082c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e11d      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082e0:	4b90      	ldr	r3, [pc, #576]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d910      	bls.n	8008310 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f023 020f 	bic.w	r2, r3, #15
 80082f6:	498b      	ldr	r1, [pc, #556]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fe:	4b89      	ldr	r3, [pc, #548]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d001      	beq.n	8008310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e105      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	4b81      	ldr	r3, [pc, #516]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008328:	429a      	cmp	r2, r3
 800832a:	d908      	bls.n	800833e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800832c:	4b7e      	ldr	r3, [pc, #504]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	497b      	ldr	r1, [pc, #492]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800833a:	4313      	orrs	r3, r2
 800833c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d079      	beq.n	800843e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d11e      	bne.n	8008390 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008352:	4b75      	ldr	r3, [pc, #468]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e0dc      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008362:	f000 fa09 	bl	8008778 <RCC_GetSysClockFreqFromPLLSource>
 8008366:	4603      	mov	r3, r0
 8008368:	4a70      	ldr	r2, [pc, #448]	@ (800852c <HAL_RCC_ClockConfig+0x264>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d946      	bls.n	80083fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800836e:	4b6e      	ldr	r3, [pc, #440]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d140      	bne.n	80083fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800837a:	4b6b      	ldr	r3, [pc, #428]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008382:	4a69      	ldr	r2, [pc, #420]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 8008384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800838a:	2380      	movs	r3, #128	@ 0x80
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e035      	b.n	80083fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d107      	bne.n	80083a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008398:	4b63      	ldr	r3, [pc, #396]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d115      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0b9      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d107      	bne.n	80083c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80083b0:	4b5d      	ldr	r3, [pc, #372]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e0ad      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083c0:	4b59      	ldr	r3, [pc, #356]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0a5      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80083d0:	f000 f8b4 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4a55      	ldr	r2, [pc, #340]	@ (800852c <HAL_RCC_ClockConfig+0x264>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d90f      	bls.n	80083fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80083dc:	4b52      	ldr	r3, [pc, #328]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083f0:	4a4d      	ldr	r2, [pc, #308]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80083f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80083f8:	2380      	movs	r3, #128	@ 0x80
 80083fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f023 0203 	bic.w	r2, r3, #3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	4947      	ldr	r1, [pc, #284]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800840a:	4313      	orrs	r3, r2
 800840c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800840e:	f7fd f839 	bl	8005484 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008414:	e00a      	b.n	800842c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008416:	f7fd f835 	bl	8005484 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008424:	4293      	cmp	r3, r2
 8008426:	d901      	bls.n	800842c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e077      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800842c:	4b3e      	ldr	r3, [pc, #248]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f003 020c 	and.w	r2, r3, #12
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	429a      	cmp	r2, r3
 800843c:	d1eb      	bne.n	8008416 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d105      	bne.n	8008450 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008444:	4b38      	ldr	r3, [pc, #224]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	4a37      	ldr	r2, [pc, #220]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800844a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800844e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	4b31      	ldr	r3, [pc, #196]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008468:	429a      	cmp	r2, r3
 800846a:	d208      	bcs.n	800847e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846c:	4b2e      	ldr	r3, [pc, #184]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	492b      	ldr	r1, [pc, #172]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 800847a:	4313      	orrs	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800847e:	4b29      	ldr	r3, [pc, #164]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d210      	bcs.n	80084ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848c:	4b25      	ldr	r3, [pc, #148]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f023 020f 	bic.w	r2, r3, #15
 8008494:	4923      	ldr	r1, [pc, #140]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	4313      	orrs	r3, r2
 800849a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800849c:	4b21      	ldr	r3, [pc, #132]	@ (8008524 <HAL_RCC_ClockConfig+0x25c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d001      	beq.n	80084ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e036      	b.n	800851c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	4918      	ldr	r1, [pc, #96]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084d8:	4b13      	ldr	r3, [pc, #76]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4910      	ldr	r1, [pc, #64]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084ec:	f000 f826 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80084f0:	4602      	mov	r2, r0
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <HAL_RCC_ClockConfig+0x260>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	091b      	lsrs	r3, r3, #4
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	490c      	ldr	r1, [pc, #48]	@ (8008530 <HAL_RCC_ClockConfig+0x268>)
 80084fe:	5ccb      	ldrb	r3, [r1, r3]
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	fa22 f303 	lsr.w	r3, r2, r3
 8008508:	4a0a      	ldr	r2, [pc, #40]	@ (8008534 <HAL_RCC_ClockConfig+0x26c>)
 800850a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <HAL_RCC_ClockConfig+0x270>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f7fc ff67 	bl	80053e4 <HAL_InitTick>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]

  return status;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	40022000 	.word	0x40022000
 8008528:	40021000 	.word	0x40021000
 800852c:	04c4b400 	.word	0x04c4b400
 8008530:	08014c74 	.word	0x08014c74
 8008534:	20000020 	.word	0x20000020
 8008538:	20000024 	.word	0x20000024

0800853c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800853c:	b480      	push	{r7}
 800853e:	b089      	sub	sp, #36	@ 0x24
 8008540:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	2300      	movs	r3, #0
 8008548:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800854a:	4b3e      	ldr	r3, [pc, #248]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 030c 	and.w	r3, r3, #12
 8008552:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008554:	4b3b      	ldr	r3, [pc, #236]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x34>
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b0c      	cmp	r3, #12
 8008568:	d121      	bne.n	80085ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d11e      	bne.n	80085ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008570:	4b34      	ldr	r3, [pc, #208]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d107      	bne.n	800858c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800857c:	4b31      	ldr	r3, [pc, #196]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 800857e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	e005      	b.n	8008598 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800858c:	4b2d      	ldr	r3, [pc, #180]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	091b      	lsrs	r3, r3, #4
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008598:	4a2b      	ldr	r2, [pc, #172]	@ (8008648 <HAL_RCC_GetSysClockFreq+0x10c>)
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10d      	bne.n	80085c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085ac:	e00a      	b.n	80085c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d102      	bne.n	80085ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80085b4:	4b25      	ldr	r3, [pc, #148]	@ (800864c <HAL_RCC_GetSysClockFreq+0x110>)
 80085b6:	61bb      	str	r3, [r7, #24]
 80085b8:	e004      	b.n	80085c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d101      	bne.n	80085c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085c0:	4b23      	ldr	r3, [pc, #140]	@ (8008650 <HAL_RCC_GetSysClockFreq+0x114>)
 80085c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b0c      	cmp	r3, #12
 80085c8:	d134      	bne.n	8008634 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d003      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d003      	beq.n	80085e8 <HAL_RCC_GetSysClockFreq+0xac>
 80085e0:	e005      	b.n	80085ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80085e2:	4b1a      	ldr	r3, [pc, #104]	@ (800864c <HAL_RCC_GetSysClockFreq+0x110>)
 80085e4:	617b      	str	r3, [r7, #20]
      break;
 80085e6:	e005      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80085e8:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <HAL_RCC_GetSysClockFreq+0x114>)
 80085ea:	617b      	str	r3, [r7, #20]
      break;
 80085ec:	e002      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	617b      	str	r3, [r7, #20]
      break;
 80085f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085f4:	4b13      	ldr	r3, [pc, #76]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	091b      	lsrs	r3, r3, #4
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	3301      	adds	r3, #1
 8008600:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008602:	4b10      	ldr	r3, [pc, #64]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	fb03 f202 	mul.w	r2, r3, r2
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800861a:	4b0a      	ldr	r3, [pc, #40]	@ (8008644 <HAL_RCC_GetSysClockFreq+0x108>)
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	0e5b      	lsrs	r3, r3, #25
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	3301      	adds	r3, #1
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008632:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008634:	69bb      	ldr	r3, [r7, #24]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3724      	adds	r7, #36	@ 0x24
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40021000 	.word	0x40021000
 8008648:	08014c8c 	.word	0x08014c8c
 800864c:	00f42400 	.word	0x00f42400
 8008650:	007a1200 	.word	0x007a1200

08008654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008658:	4b03      	ldr	r3, [pc, #12]	@ (8008668 <HAL_RCC_GetHCLKFreq+0x14>)
 800865a:	681b      	ldr	r3, [r3, #0]
}
 800865c:	4618      	mov	r0, r3
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20000020 	.word	0x20000020

0800866c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008670:	f7ff fff0 	bl	8008654 <HAL_RCC_GetHCLKFreq>
 8008674:	4602      	mov	r2, r0
 8008676:	4b06      	ldr	r3, [pc, #24]	@ (8008690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	4904      	ldr	r1, [pc, #16]	@ (8008694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008682:	5ccb      	ldrb	r3, [r1, r3]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40021000 	.word	0x40021000
 8008694:	08014c84 	.word	0x08014c84

08008698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800869c:	f7ff ffda 	bl	8008654 <HAL_RCC_GetHCLKFreq>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4b06      	ldr	r3, [pc, #24]	@ (80086bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	0adb      	lsrs	r3, r3, #11
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	4904      	ldr	r1, [pc, #16]	@ (80086c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086ae:	5ccb      	ldrb	r3, [r1, r3]
 80086b0:	f003 031f 	and.w	r3, r3, #31
 80086b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40021000 	.word	0x40021000
 80086c0:	08014c84 	.word	0x08014c84

080086c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80086d0:	4b27      	ldr	r3, [pc, #156]	@ (8008770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80086d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80086dc:	f7ff f906 	bl	80078ec <HAL_PWREx_GetVoltageRange>
 80086e0:	6178      	str	r0, [r7, #20]
 80086e2:	e014      	b.n	800870e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80086e4:	4b22      	ldr	r3, [pc, #136]	@ (8008770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80086e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e8:	4a21      	ldr	r2, [pc, #132]	@ (8008770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80086ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80086f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80086f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80086fc:	f7ff f8f6 	bl	80078ec <HAL_PWREx_GetVoltageRange>
 8008700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008702:	4b1b      	ldr	r3, [pc, #108]	@ (8008770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008706:	4a1a      	ldr	r2, [pc, #104]	@ (8008770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800870c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008714:	d10b      	bne.n	800872e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b80      	cmp	r3, #128	@ 0x80
 800871a:	d913      	bls.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2ba0      	cmp	r3, #160	@ 0xa0
 8008720:	d902      	bls.n	8008728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008722:	2302      	movs	r3, #2
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	e00d      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008728:	2301      	movs	r3, #1
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	e00a      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b7f      	cmp	r3, #127	@ 0x7f
 8008732:	d902      	bls.n	800873a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008734:	2302      	movs	r3, #2
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	e004      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b70      	cmp	r3, #112	@ 0x70
 800873e:	d101      	bne.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008740:	2301      	movs	r3, #1
 8008742:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f023 020f 	bic.w	r2, r3, #15
 800874c:	4909      	ldr	r1, [pc, #36]	@ (8008774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008754:	4b07      	ldr	r3, [pc, #28]	@ (8008774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	d001      	beq.n	8008766 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	40021000 	.word	0x40021000
 8008774:	40022000 	.word	0x40022000

08008778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800877e:	4b2d      	ldr	r3, [pc, #180]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b03      	cmp	r3, #3
 800878c:	d00b      	beq.n	80087a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b03      	cmp	r3, #3
 8008792:	d825      	bhi.n	80087e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d008      	beq.n	80087ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d11f      	bne.n	80087e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80087a0:	4b25      	ldr	r3, [pc, #148]	@ (8008838 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80087a2:	613b      	str	r3, [r7, #16]
    break;
 80087a4:	e01f      	b.n	80087e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80087a6:	4b25      	ldr	r3, [pc, #148]	@ (800883c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80087a8:	613b      	str	r3, [r7, #16]
    break;
 80087aa:	e01c      	b.n	80087e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80087ac:	4b21      	ldr	r3, [pc, #132]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0308 	and.w	r3, r3, #8
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d107      	bne.n	80087c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80087b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80087ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e005      	b.n	80087d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80087c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80087d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008840 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087dc:	613b      	str	r3, [r7, #16]
    break;
 80087de:	e002      	b.n	80087e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
    break;
 80087e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087e6:	4b13      	ldr	r3, [pc, #76]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	091b      	lsrs	r3, r3, #4
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	3301      	adds	r3, #1
 80087f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	fb03 f202 	mul.w	r2, r3, r2
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	fbb2 f3f3 	udiv	r3, r2, r3
 800880a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800880c:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	0e5b      	lsrs	r3, r3, #25
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	3301      	adds	r3, #1
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008826:	683b      	ldr	r3, [r7, #0]
}
 8008828:	4618      	mov	r0, r3
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	40021000 	.word	0x40021000
 8008838:	00f42400 	.word	0x00f42400
 800883c:	007a1200 	.word	0x007a1200
 8008840:	08014c8c 	.word	0x08014c8c

08008844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800884c:	2300      	movs	r3, #0
 800884e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008850:	2300      	movs	r3, #0
 8008852:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800885c:	2b00      	cmp	r3, #0
 800885e:	d040      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008864:	2b80      	cmp	r3, #128	@ 0x80
 8008866:	d02a      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008868:	2b80      	cmp	r3, #128	@ 0x80
 800886a:	d825      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800886c:	2b60      	cmp	r3, #96	@ 0x60
 800886e:	d026      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008870:	2b60      	cmp	r3, #96	@ 0x60
 8008872:	d821      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008874:	2b40      	cmp	r3, #64	@ 0x40
 8008876:	d006      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d81d      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800887c:	2b00      	cmp	r3, #0
 800887e:	d009      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d010      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008884:	e018      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008886:	4b89      	ldr	r3, [pc, #548]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	4a88      	ldr	r2, [pc, #544]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800888c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008890:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008892:	e015      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3304      	adds	r3, #4
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fa34 	bl	8009d08 <RCCEx_PLLSAI1_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80088a4:	e00c      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3320      	adds	r3, #32
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fb1f 	bl	8009ef0 <RCCEx_PLLSAI2_Config>
 80088b2:	4603      	mov	r3, r0
 80088b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80088b6:	e003      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	74fb      	strb	r3, [r7, #19]
      break;
 80088bc:	e000      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80088be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088c0:	7cfb      	ldrb	r3, [r7, #19]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10b      	bne.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088c6:	4b79      	ldr	r3, [pc, #484]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80088c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088cc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d4:	4975      	ldr	r1, [pc, #468]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80088dc:	e001      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088de:	7cfb      	ldrb	r3, [r7, #19]
 80088e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d047      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088f6:	d030      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80088f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fc:	d82a      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80088fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008902:	d02a      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008908:	d824      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800890a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800890e:	d008      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008914:	d81e      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800891a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800891e:	d010      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008920:	e018      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008922:	4b62      	ldr	r3, [pc, #392]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	4a61      	ldr	r2, [pc, #388]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800892c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800892e:	e015      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3304      	adds	r3, #4
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f001 f9e6 	bl	8009d08 <RCCEx_PLLSAI1_Config>
 800893c:	4603      	mov	r3, r0
 800893e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008940:	e00c      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3320      	adds	r3, #32
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f001 fad1 	bl	8009ef0 <RCCEx_PLLSAI2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008952:	e003      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	74fb      	strb	r3, [r7, #19]
      break;
 8008958:	e000      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800895a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800895c:	7cfb      	ldrb	r3, [r7, #19]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008962:	4b52      	ldr	r3, [pc, #328]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008970:	494e      	ldr	r1, [pc, #312]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008978:	e001      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	7cfb      	ldrb	r3, [r7, #19]
 800897c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 809f 	beq.w	8008aca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800898c:	2300      	movs	r3, #0
 800898e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008990:	4b46      	ldr	r3, [pc, #280]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80089a0:	2300      	movs	r3, #0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00d      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089a6:	4b41      	ldr	r3, [pc, #260]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089aa:	4a40      	ldr	r2, [pc, #256]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80089b2:	4b3e      	ldr	r3, [pc, #248]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80089b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089be:	2301      	movs	r3, #1
 80089c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089c2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a3a      	ldr	r2, [pc, #232]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089ce:	f7fc fd59 	bl	8005484 <HAL_GetTick>
 80089d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089d4:	e009      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d6:	f7fc fd55 	bl	8005484 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d902      	bls.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	74fb      	strb	r3, [r7, #19]
        break;
 80089e8:	e005      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089ea:	4b31      	ldr	r3, [pc, #196]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0ef      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80089f6:	7cfb      	ldrb	r3, [r7, #19]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d15b      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089fc:	4b2b      	ldr	r3, [pc, #172]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80089fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a06:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01f      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d019      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a1a:	4b24      	ldr	r3, [pc, #144]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a26:	4b21      	ldr	r3, [pc, #132]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a36:	4b1d      	ldr	r3, [pc, #116]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a46:	4a19      	ldr	r2, [pc, #100]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d016      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a58:	f7fc fd14 	bl	8005484 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a5e:	e00b      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a60:	f7fc fd10 	bl	8005484 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d902      	bls.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	74fb      	strb	r3, [r7, #19]
            break;
 8008a76:	e006      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a78:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0ec      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008a86:	7cfb      	ldrb	r3, [r7, #19]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10c      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a8c:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a9c:	4903      	ldr	r1, [pc, #12]	@ (8008aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008aa6:	7cfb      	ldrb	r3, [r7, #19]
 8008aa8:	74bb      	strb	r3, [r7, #18]
 8008aaa:	e005      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	7cfb      	ldrb	r3, [r7, #19]
 8008ab6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ab8:	7c7b      	ldrb	r3, [r7, #17]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d105      	bne.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008abe:	4ba0      	ldr	r3, [pc, #640]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac2:	4a9f      	ldr	r2, [pc, #636]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ac8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ad6:	4b9a      	ldr	r3, [pc, #616]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008adc:	f023 0203 	bic.w	r2, r3, #3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae4:	4996      	ldr	r1, [pc, #600]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008af8:	4b91      	ldr	r3, [pc, #580]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afe:	f023 020c 	bic.w	r2, r3, #12
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	498e      	ldr	r1, [pc, #568]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b1a:	4b89      	ldr	r3, [pc, #548]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b28:	4985      	ldr	r1, [pc, #532]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b3c:	4b80      	ldr	r3, [pc, #512]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b4a:	497d      	ldr	r1, [pc, #500]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0310 	and.w	r3, r3, #16
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b5e:	4b78      	ldr	r3, [pc, #480]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b6c:	4974      	ldr	r1, [pc, #464]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b80:	4b6f      	ldr	r3, [pc, #444]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8e:	496c      	ldr	r1, [pc, #432]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00a      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ba2:	4b67      	ldr	r3, [pc, #412]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bb0:	4963      	ldr	r1, [pc, #396]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bd2:	495b      	ldr	r1, [pc, #364]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008be6:	4b56      	ldr	r3, [pc, #344]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf4:	4952      	ldr	r1, [pc, #328]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00a      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c08:	4b4d      	ldr	r3, [pc, #308]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c16:	494a      	ldr	r1, [pc, #296]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c2a:	4b45      	ldr	r3, [pc, #276]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c38:	4941      	ldr	r1, [pc, #260]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c52:	f023 0203 	bic.w	r2, r3, #3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c5a:	4939      	ldr	r1, [pc, #228]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d028      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c6e:	4b34      	ldr	r3, [pc, #208]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c7c:	4930      	ldr	r1, [pc, #192]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c8c:	d106      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	4a2b      	ldr	r2, [pc, #172]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c98:	60d3      	str	r3, [r2, #12]
 8008c9a:	e011      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ca0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ca4:	d10c      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	2101      	movs	r1, #1
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 f82b 	bl	8009d08 <RCCEx_PLLSAI1_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008cb6:	7cfb      	ldrb	r3, [r7, #19]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008cbc:	7cfb      	ldrb	r3, [r7, #19]
 8008cbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d04d      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cd4:	d108      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cdc:	4a18      	ldr	r2, [pc, #96]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ce2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008ce6:	e012      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008ce8:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cee:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cf4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008cf8:	4b11      	ldr	r3, [pc, #68]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d06:	490e      	ldr	r1, [pc, #56]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d16:	d106      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d18:	4b09      	ldr	r3, [pc, #36]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	4a08      	ldr	r2, [pc, #32]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d22:	60d3      	str	r3, [r2, #12]
 8008d24:	e020      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d2e:	d109      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d30:	4b03      	ldr	r3, [pc, #12]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	4a02      	ldr	r2, [pc, #8]	@ (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d3a:	60d3      	str	r3, [r2, #12]
 8008d3c:	e014      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008d3e:	bf00      	nop
 8008d40:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d4c:	d10c      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	2101      	movs	r1, #1
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 ffd7 	bl	8009d08 <RCCEx_PLLSAI1_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d5e:	7cfb      	ldrb	r3, [r7, #19]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008d64:	7cfb      	ldrb	r3, [r7, #19]
 8008d66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d028      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d74:	4b4a      	ldr	r3, [pc, #296]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d82:	4947      	ldr	r1, [pc, #284]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d92:	d106      	bne.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d94:	4b42      	ldr	r3, [pc, #264]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4a41      	ldr	r2, [pc, #260]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d9e:	60d3      	str	r3, [r2, #12]
 8008da0:	e011      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008da6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008daa:	d10c      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3304      	adds	r3, #4
 8008db0:	2101      	movs	r1, #1
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 ffa8 	bl	8009d08 <RCCEx_PLLSAI1_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008dbc:	7cfb      	ldrb	r3, [r7, #19]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008dc2:	7cfb      	ldrb	r3, [r7, #19]
 8008dc4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01e      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008dd2:	4b33      	ldr	r3, [pc, #204]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	492f      	ldr	r1, [pc, #188]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008df4:	d10c      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 ff83 	bl	8009d08 <RCCEx_PLLSAI1_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e06:	7cfb      	ldrb	r3, [r7, #19]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008e0c:	7cfb      	ldrb	r3, [r7, #19]
 8008e0e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e22:	f023 0204 	bic.w	r2, r3, #4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e2c:	491c      	ldr	r1, [pc, #112]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008e40:	4b17      	ldr	r3, [pc, #92]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e46:	f023 0218 	bic.w	r2, r3, #24
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e50:	4913      	ldr	r1, [pc, #76]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d017      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e74:	490a      	ldr	r1, [pc, #40]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e86:	d105      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e88:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4a04      	ldr	r2, [pc, #16]	@ (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40021000 	.word	0x40021000

08008ea4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb6:	d13e      	bne.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008eb8:	4bb6      	ldr	r3, [pc, #728]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ec2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eca:	d028      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ed2:	f200 86f4 	bhi.w	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008edc:	d005      	beq.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee4:	d00e      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8008ee6:	f000 beea 	b.w	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008eea:	4baa      	ldr	r3, [pc, #680]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	f040 86e4 	bne.w	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8008efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008efe:	61fb      	str	r3, [r7, #28]
      break;
 8008f00:	f000 bedf 	b.w	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008f04:	4ba3      	ldr	r3, [pc, #652]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	f040 86d9 	bne.w	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8008f14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f18:	61fb      	str	r3, [r7, #28]
      break;
 8008f1a:	f000 bed4 	b.w	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f1e:	4b9d      	ldr	r3, [pc, #628]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f2a:	f040 86ce 	bne.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8008f2e:	4b9a      	ldr	r3, [pc, #616]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008f30:	61fb      	str	r3, [r7, #28]
      break;
 8008f32:	f000 beca 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f36:	4b97      	ldr	r3, [pc, #604]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d036      	beq.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d840      	bhi.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d003      	beq.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d020      	beq.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008f58:	e039      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008f5a:	4b8e      	ldr	r3, [pc, #568]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d116      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008f66:	4b8b      	ldr	r3, [pc, #556]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d005      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008f72:	4b88      	ldr	r3, [pc, #544]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	091b      	lsrs	r3, r3, #4
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	e005      	b.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008f7e:	4b85      	ldr	r3, [pc, #532]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	4a84      	ldr	r2, [pc, #528]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008f92:	e01f      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
      break;
 8008f98:	e01c      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fa6:	d102      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8008fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008faa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008fac:	e012      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61bb      	str	r3, [r7, #24]
      break;
 8008fb2:	e00f      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fb4:	4b77      	ldr	r3, [pc, #476]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fc0:	d102      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8008fc2:	4b78      	ldr	r3, [pc, #480]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008fc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008fc6:	e005      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61bb      	str	r3, [r7, #24]
      break;
 8008fcc:	e002      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
      break;
 8008fd2:	bf00      	nop
    }

    switch(PeriphClk)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fda:	f000 8606 	beq.w	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fe4:	f200 8673 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fee:	f000 8469 	beq.w	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ff8:	f200 8669 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009002:	f000 8531 	beq.w	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800900c:	f200 865f 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009016:	f000 8187 	beq.w	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009020:	f200 8655 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800902a:	f000 80cd 	beq.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009034:	f200 864b 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800903e:	f000 8430 	beq.w	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009048:	f200 8641 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009052:	f000 83e4 	beq.w	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800905c:	f200 8637 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009066:	f000 80af 	beq.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009070:	f200 862d 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907a:	f000 809d 	beq.w	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009084:	f200 8623 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800908e:	f000 808b 	beq.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009098:	f200 8619 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090a2:	f000 8554 	beq.w	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ac:	f200 860f 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090b6:	f000 8500 	beq.w	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c0:	f200 8605 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ca:	f000 84a1 	beq.w	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d4:	f200 85fb 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b80      	cmp	r3, #128	@ 0x80
 80090dc:	f000 846c 	beq.w	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b80      	cmp	r3, #128	@ 0x80
 80090e4:	f200 85f3 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d84c      	bhi.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 85ec 	beq.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	2b1f      	cmp	r3, #31
 80090fc:	f200 85e7 	bhi.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009100:	a201      	add	r2, pc, #4	@ (adr r2, 8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	0800951d 	.word	0x0800951d
 800910c:	0800958b 	.word	0x0800958b
 8009110:	08009ccf 	.word	0x08009ccf
 8009114:	0800961f 	.word	0x0800961f
 8009118:	08009ccf 	.word	0x08009ccf
 800911c:	08009ccf 	.word	0x08009ccf
 8009120:	08009ccf 	.word	0x08009ccf
 8009124:	08009697 	.word	0x08009697
 8009128:	08009ccf 	.word	0x08009ccf
 800912c:	08009ccf 	.word	0x08009ccf
 8009130:	08009ccf 	.word	0x08009ccf
 8009134:	08009ccf 	.word	0x08009ccf
 8009138:	08009ccf 	.word	0x08009ccf
 800913c:	08009ccf 	.word	0x08009ccf
 8009140:	08009ccf 	.word	0x08009ccf
 8009144:	0800971b 	.word	0x0800971b
 8009148:	08009ccf 	.word	0x08009ccf
 800914c:	08009ccf 	.word	0x08009ccf
 8009150:	08009ccf 	.word	0x08009ccf
 8009154:	08009ccf 	.word	0x08009ccf
 8009158:	08009ccf 	.word	0x08009ccf
 800915c:	08009ccf 	.word	0x08009ccf
 8009160:	08009ccf 	.word	0x08009ccf
 8009164:	08009ccf 	.word	0x08009ccf
 8009168:	08009ccf 	.word	0x08009ccf
 800916c:	08009ccf 	.word	0x08009ccf
 8009170:	08009ccf 	.word	0x08009ccf
 8009174:	08009ccf 	.word	0x08009ccf
 8009178:	08009ccf 	.word	0x08009ccf
 800917c:	08009ccf 	.word	0x08009ccf
 8009180:	08009ccf 	.word	0x08009ccf
 8009184:	0800979d 	.word	0x0800979d
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b40      	cmp	r3, #64	@ 0x40
 800918c:	f000 83e8 	beq.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009190:	f000 bd9d 	b.w	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009194:	40021000 	.word	0x40021000
 8009198:	0003d090 	.word	0x0003d090
 800919c:	08014c8c 	.word	0x08014c8c
 80091a0:	00f42400 	.word	0x00f42400
 80091a4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80091a8:	69b9      	ldr	r1, [r7, #24]
 80091aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80091ae:	f000 ff93 	bl	800a0d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80091b2:	61f8      	str	r0, [r7, #28]
      break;
 80091b4:	f000 bd8e 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80091b8:	69b9      	ldr	r1, [r7, #24]
 80091ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80091be:	f000 ff8b 	bl	800a0d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80091c2:	61f8      	str	r0, [r7, #28]
      break;
 80091c4:	f000 bd86 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80091c8:	4b9a      	ldr	r3, [pc, #616]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80091ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ce:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80091da:	d015      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80091e2:	f200 8092 	bhi.w	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ec:	d029      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091f4:	f200 8089 	bhi.w	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d07b      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009204:	d04a      	beq.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8009206:	e080      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009208:	4b8a      	ldr	r3, [pc, #552]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b02      	cmp	r3, #2
 8009212:	d17d      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009214:	4b87      	ldr	r3, [pc, #540]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8009220:	4b84      	ldr	r3, [pc, #528]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	091b      	lsrs	r3, r3, #4
 8009226:	f003 030f 	and.w	r3, r3, #15
 800922a:	e005      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800922c:	4b81      	ldr	r3, [pc, #516]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800922e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009232:	0a1b      	lsrs	r3, r3, #8
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	4a7f      	ldr	r2, [pc, #508]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800923a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800923e:	61fb      	str	r3, [r7, #28]
          break;
 8009240:	e066      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009242:	4b7c      	ldr	r3, [pc, #496]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800924a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800924e:	d162      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009250:	4b78      	ldr	r3, [pc, #480]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800925c:	d15b      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800925e:	4b75      	ldr	r3, [pc, #468]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009268:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	fb03 f202 	mul.w	r2, r3, r2
 8009272:	4b70      	ldr	r3, [pc, #448]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	091b      	lsrs	r3, r3, #4
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	3301      	adds	r3, #1
 800927e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009282:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009284:	4b6b      	ldr	r3, [pc, #428]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	0d5b      	lsrs	r3, r3, #21
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	3301      	adds	r3, #1
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	fbb2 f3f3 	udiv	r3, r2, r3
 8009298:	61fb      	str	r3, [r7, #28]
          break;
 800929a:	e03c      	b.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800929c:	4b65      	ldr	r3, [pc, #404]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092a8:	d138      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80092aa:	4b62      	ldr	r3, [pc, #392]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092b6:	d131      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80092b8:	4b5e      	ldr	r3, [pc, #376]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	0a1b      	lsrs	r3, r3, #8
 80092be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092c2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	fb03 f202 	mul.w	r2, r3, r2
 80092cc:	4b59      	ldr	r3, [pc, #356]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	091b      	lsrs	r3, r3, #4
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	3301      	adds	r3, #1
 80092d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80092de:	4b55      	ldr	r3, [pc, #340]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	0d5b      	lsrs	r3, r3, #21
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	3301      	adds	r3, #1
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	61fb      	str	r3, [r7, #28]
          break;
 80092f4:	e012      	b.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80092f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b02      	cmp	r3, #2
 8009302:	d10e      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8009304:	4b4d      	ldr	r3, [pc, #308]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009306:	61fb      	str	r3, [r7, #28]
          break;
 8009308:	e00b      	b.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800930a:	bf00      	nop
 800930c:	f000 bce2 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009310:	bf00      	nop
 8009312:	f000 bcdf 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009316:	bf00      	nop
 8009318:	f000 bcdc 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800931c:	bf00      	nop
 800931e:	f000 bcd9 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009322:	bf00      	nop
        break;
 8009324:	f000 bcd6 	b.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8009328:	4b42      	ldr	r3, [pc, #264]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800932a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800932e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009336:	d13d      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009338:	4b3e      	ldr	r3, [pc, #248]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009344:	f040 84c5 	bne.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8009348:	4b3a      	ldr	r3, [pc, #232]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009354:	f040 84bd 	bne.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009358:	4b36      	ldr	r3, [pc, #216]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	0a1b      	lsrs	r3, r3, #8
 800935e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009362:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	fb03 f202 	mul.w	r2, r3, r2
 800936c:	4b31      	ldr	r3, [pc, #196]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	091b      	lsrs	r3, r3, #4
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	3301      	adds	r3, #1
 8009378:	fbb2 f3f3 	udiv	r3, r2, r3
 800937c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800937e:	4b2d      	ldr	r3, [pc, #180]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	0edb      	lsrs	r3, r3, #27
 8009384:	f003 031f 	and.w	r3, r3, #31
 8009388:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009390:	4b28      	ldr	r3, [pc, #160]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800939c:	2311      	movs	r3, #17
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e001      	b.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80093a2:	2307      	movs	r3, #7
 80093a4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ae:	61fb      	str	r3, [r7, #28]
      break;
 80093b0:	f000 bc8f 	b.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80093b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80093c6:	d016      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80093ce:	f200 809b 	bhi.w	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d8:	d032      	beq.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093e0:	f200 8092 	bhi.w	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 8084 	beq.w	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093f2:	d052      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80093f4:	e088      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80093f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	f040 8084 	bne.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009404:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009410:	4b08      	ldr	r3, [pc, #32]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	091b      	lsrs	r3, r3, #4
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	e005      	b.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800941c:	4b05      	ldr	r3, [pc, #20]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800941e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	4a03      	ldr	r2, [pc, #12]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800942a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800942e:	61fb      	str	r3, [r7, #28]
          break;
 8009430:	e06c      	b.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8009432:	bf00      	nop
 8009434:	40021000 	.word	0x40021000
 8009438:	08014c8c 	.word	0x08014c8c
 800943c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009440:	4ba5      	ldr	r3, [pc, #660]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800944c:	d160      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800944e:	4ba2      	ldr	r3, [pc, #648]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800945a:	d159      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800945c:	4b9e      	ldr	r3, [pc, #632]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	0a1b      	lsrs	r3, r3, #8
 8009462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009466:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	fb03 f202 	mul.w	r2, r3, r2
 8009470:	4b99      	ldr	r3, [pc, #612]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	091b      	lsrs	r3, r3, #4
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	3301      	adds	r3, #1
 800947c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009480:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009482:	4b95      	ldr	r3, [pc, #596]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	0d5b      	lsrs	r3, r3, #21
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	3301      	adds	r3, #1
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	fbb2 f3f3 	udiv	r3, r2, r3
 8009496:	61fb      	str	r3, [r7, #28]
          break;
 8009498:	e03a      	b.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800949a:	4b8f      	ldr	r3, [pc, #572]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094a6:	d135      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80094a8:	4b8b      	ldr	r3, [pc, #556]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094b4:	d12e      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80094b6:	4b88      	ldr	r3, [pc, #544]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	0a1b      	lsrs	r3, r3, #8
 80094bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	fb03 f202 	mul.w	r2, r3, r2
 80094ca:	4b83      	ldr	r3, [pc, #524]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	091b      	lsrs	r3, r3, #4
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	3301      	adds	r3, #1
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80094dc:	4b7e      	ldr	r3, [pc, #504]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	0d5b      	lsrs	r3, r3, #21
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	3301      	adds	r3, #1
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f0:	61fb      	str	r3, [r7, #28]
          break;
 80094f2:	e00f      	b.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80094f4:	4b78      	ldr	r3, [pc, #480]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d10a      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8009502:	4b76      	ldr	r3, [pc, #472]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009504:	61fb      	str	r3, [r7, #28]
          break;
 8009506:	e007      	b.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8009508:	bf00      	nop
 800950a:	e3e2      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800950c:	bf00      	nop
 800950e:	e3e0      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009510:	bf00      	nop
 8009512:	e3de      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009514:	bf00      	nop
 8009516:	e3dc      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009518:	bf00      	nop
      break;
 800951a:	e3da      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800951c:	4b6e      	ldr	r3, [pc, #440]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b03      	cmp	r3, #3
 800952c:	d827      	bhi.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800952e:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009545 	.word	0x08009545
 8009538:	0800954d 	.word	0x0800954d
 800953c:	08009555 	.word	0x08009555
 8009540:	08009569 	.word	0x08009569
          frequency = HAL_RCC_GetPCLK2Freq();
 8009544:	f7ff f8a8 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 8009548:	61f8      	str	r0, [r7, #28]
          break;
 800954a:	e01d      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800954c:	f7fe fff6 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8009550:	61f8      	str	r0, [r7, #28]
          break;
 8009552:	e019      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009554:	4b60      	ldr	r3, [pc, #384]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800955c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009560:	d10f      	bne.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8009562:	4b5f      	ldr	r3, [pc, #380]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009564:	61fb      	str	r3, [r7, #28]
          break;
 8009566:	e00c      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009568:	4b5b      	ldr	r3, [pc, #364]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800956a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b02      	cmp	r3, #2
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8009576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800957a:	61fb      	str	r3, [r7, #28]
          break;
 800957c:	e003      	b.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800957e:	bf00      	nop
 8009580:	e3a8      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009582:	bf00      	nop
 8009584:	e3a6      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009586:	bf00      	nop
        break;
 8009588:	e3a4      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800958a:	4b53      	ldr	r3, [pc, #332]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800958c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009590:	f003 030c 	and.w	r3, r3, #12
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b0c      	cmp	r3, #12
 800959a:	d83a      	bhi.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800959c:	a201      	add	r2, pc, #4	@ (adr r2, 80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	080095d9 	.word	0x080095d9
 80095a8:	08009613 	.word	0x08009613
 80095ac:	08009613 	.word	0x08009613
 80095b0:	08009613 	.word	0x08009613
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	08009613 	.word	0x08009613
 80095bc:	08009613 	.word	0x08009613
 80095c0:	08009613 	.word	0x08009613
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	08009613 	.word	0x08009613
 80095cc:	08009613 	.word	0x08009613
 80095d0:	08009613 	.word	0x08009613
 80095d4:	080095fd 	.word	0x080095fd
          frequency = HAL_RCC_GetPCLK1Freq();
 80095d8:	f7ff f848 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 80095dc:	61f8      	str	r0, [r7, #28]
          break;
 80095de:	e01d      	b.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80095e0:	f7fe ffac 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80095e4:	61f8      	str	r0, [r7, #28]
          break;
 80095e6:	e019      	b.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095e8:	4b3b      	ldr	r3, [pc, #236]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095f4:	d10f      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80095f6:	4b3a      	ldr	r3, [pc, #232]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80095f8:	61fb      	str	r3, [r7, #28]
          break;
 80095fa:	e00c      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095fc:	4b36      	ldr	r3, [pc, #216]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b02      	cmp	r3, #2
 8009608:	d107      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800960a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800960e:	61fb      	str	r3, [r7, #28]
          break;
 8009610:	e003      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8009612:	bf00      	nop
 8009614:	e35e      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009616:	bf00      	nop
 8009618:	e35c      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800961a:	bf00      	nop
        break;
 800961c:	e35a      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800961e:	4b2e      	ldr	r3, [pc, #184]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b30      	cmp	r3, #48	@ 0x30
 800962e:	d021      	beq.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b30      	cmp	r3, #48	@ 0x30
 8009634:	d829      	bhi.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b20      	cmp	r3, #32
 800963a:	d011      	beq.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b20      	cmp	r3, #32
 8009640:	d823      	bhi.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b10      	cmp	r3, #16
 800964c:	d004      	beq.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800964e:	e01c      	b.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009650:	f7ff f80c 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 8009654:	61f8      	str	r0, [r7, #28]
          break;
 8009656:	e01d      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009658:	f7fe ff70 	bl	800853c <HAL_RCC_GetSysClockFreq>
 800965c:	61f8      	str	r0, [r7, #28]
          break;
 800965e:	e019      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009660:	4b1d      	ldr	r3, [pc, #116]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800966c:	d10f      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800966e:	4b1c      	ldr	r3, [pc, #112]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009670:	61fb      	str	r3, [r7, #28]
          break;
 8009672:	e00c      	b.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009674:	4b18      	ldr	r3, [pc, #96]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b02      	cmp	r3, #2
 8009680:	d107      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8009682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009686:	61fb      	str	r3, [r7, #28]
          break;
 8009688:	e003      	b.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800968a:	bf00      	nop
 800968c:	e322      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800968e:	bf00      	nop
 8009690:	e320      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009692:	bf00      	nop
        break;
 8009694:	e31e      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009696:	4b10      	ldr	r3, [pc, #64]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80096a6:	d027      	beq.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80096ac:	d82f      	bhi.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b80      	cmp	r3, #128	@ 0x80
 80096b2:	d017      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b80      	cmp	r3, #128	@ 0x80
 80096b8:	d829      	bhi.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b40      	cmp	r3, #64	@ 0x40
 80096c4:	d004      	beq.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80096c6:	e022      	b.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80096c8:	f7fe ffd0 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 80096cc:	61f8      	str	r0, [r7, #28]
          break;
 80096ce:	e023      	b.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80096d0:	f7fe ff34 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80096d4:	61f8      	str	r0, [r7, #28]
          break;
 80096d6:	e01f      	b.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80096d8:	40021000 	.word	0x40021000
 80096dc:	02dc6c00 	.word	0x02dc6c00
 80096e0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096e4:	4b9b      	ldr	r3, [pc, #620]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096f0:	d10f      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80096f2:	4b99      	ldr	r3, [pc, #612]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80096f4:	61fb      	str	r3, [r7, #28]
          break;
 80096f6:	e00c      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80096f8:	4b96      	ldr	r3, [pc, #600]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80096fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b02      	cmp	r3, #2
 8009704:	d107      	bne.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8009706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800970a:	61fb      	str	r3, [r7, #28]
          break;
 800970c:	e003      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800970e:	bf00      	nop
 8009710:	e2e0      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009712:	bf00      	nop
 8009714:	e2de      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009716:	bf00      	nop
        break;
 8009718:	e2dc      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800971a:	4b8e      	ldr	r3, [pc, #568]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800971c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800972c:	d025      	beq.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009734:	d82c      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800973c:	d013      	beq.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009744:	d824      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009752:	d004      	beq.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8009754:	e01c      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009756:	f7fe ff89 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 800975a:	61f8      	str	r0, [r7, #28]
          break;
 800975c:	e01d      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800975e:	f7fe feed 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8009762:	61f8      	str	r0, [r7, #28]
          break;
 8009764:	e019      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009766:	4b7b      	ldr	r3, [pc, #492]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800976e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009772:	d10f      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8009774:	4b78      	ldr	r3, [pc, #480]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009776:	61fb      	str	r3, [r7, #28]
          break;
 8009778:	e00c      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800977a:	4b76      	ldr	r3, [pc, #472]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800977c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b02      	cmp	r3, #2
 8009786:	d107      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8009788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800978c:	61fb      	str	r3, [r7, #28]
          break;
 800978e:	e003      	b.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8009790:	bf00      	nop
 8009792:	e29f      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009794:	bf00      	nop
 8009796:	e29d      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009798:	bf00      	nop
        break;
 800979a:	e29b      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800979c:	4b6d      	ldr	r3, [pc, #436]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097ae:	d025      	beq.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097b6:	d82c      	bhi.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097be:	d013      	beq.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097c6:	d824      	bhi.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097d4:	d004      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80097d6:	e01c      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80097d8:	f7fe ff48 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 80097dc:	61f8      	str	r0, [r7, #28]
          break;
 80097de:	e01d      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80097e0:	f7fe feac 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80097e4:	61f8      	str	r0, [r7, #28]
          break;
 80097e6:	e019      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097f4:	d10f      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80097f6:	4b58      	ldr	r3, [pc, #352]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80097f8:	61fb      	str	r3, [r7, #28]
          break;
 80097fa:	e00c      	b.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80097fc:	4b55      	ldr	r3, [pc, #340]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80097fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b02      	cmp	r3, #2
 8009808:	d107      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800980e:	61fb      	str	r3, [r7, #28]
          break;
 8009810:	e003      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8009812:	bf00      	nop
 8009814:	e25e      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009816:	bf00      	nop
 8009818:	e25c      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800981a:	bf00      	nop
        break;
 800981c:	e25a      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800981e:	4b4d      	ldr	r3, [pc, #308]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009824:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009830:	d007      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009838:	d12f      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800983a:	f7fe fe7f 	bl	800853c <HAL_RCC_GetSysClockFreq>
 800983e:	61f8      	str	r0, [r7, #28]
          break;
 8009840:	e02e      	b.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8009842:	4b44      	ldr	r3, [pc, #272]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800984e:	d126      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8009850:	4b40      	ldr	r3, [pc, #256]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d020      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800985c:	4b3d      	ldr	r3, [pc, #244]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	0a1b      	lsrs	r3, r3, #8
 8009862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009866:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	fb03 f202 	mul.w	r2, r3, r2
 8009870:	4b38      	ldr	r3, [pc, #224]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	091b      	lsrs	r3, r3, #4
 8009876:	f003 030f 	and.w	r3, r3, #15
 800987a:	3301      	adds	r3, #1
 800987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009880:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009882:	4b34      	ldr	r3, [pc, #208]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	0e5b      	lsrs	r3, r3, #25
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	3301      	adds	r3, #1
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	fbb2 f3f3 	udiv	r3, r2, r3
 8009896:	61fb      	str	r3, [r7, #28]
          break;
 8009898:	e001      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800989a:	bf00      	nop
 800989c:	e21a      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800989e:	bf00      	nop
        break;
 80098a0:	e218      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80098a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80098a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80098b4:	f7fe fef0 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 80098b8:	61f8      	str	r0, [r7, #28]
        break;
 80098ba:	e20b      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80098bc:	f7fe fe3e 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80098c0:	61f8      	str	r0, [r7, #28]
        break;
 80098c2:	e207      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80098c4:	4b23      	ldr	r3, [pc, #140]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80098c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098ca:	f003 0318 	and.w	r3, r3, #24
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d010      	beq.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d834      	bhi.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d024      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80098e8:	e02d      	b.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80098ea:	69b9      	ldr	r1, [r7, #24]
 80098ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80098f0:	f000 fbf2 	bl	800a0d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80098f4:	61f8      	str	r0, [r7, #28]
          break;
 80098f6:	e02b      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80098f8:	4b16      	ldr	r3, [pc, #88]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b02      	cmp	r3, #2
 8009902:	d122      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009904:	4b13      	ldr	r3, [pc, #76]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8009910:	4b10      	ldr	r3, [pc, #64]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	091b      	lsrs	r3, r3, #4
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	e005      	b.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800991c:	4b0d      	ldr	r3, [pc, #52]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800991e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009922:	0a1b      	lsrs	r3, r3, #8
 8009924:	f003 030f 	and.w	r3, r3, #15
 8009928:	4a0c      	ldr	r2, [pc, #48]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800992a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992e:	61fb      	str	r3, [r7, #28]
          break;
 8009930:	e00b      	b.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009932:	4b08      	ldr	r3, [pc, #32]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800993a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800993e:	d106      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8009940:	4b05      	ldr	r3, [pc, #20]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009942:	61fb      	str	r3, [r7, #28]
          break;
 8009944:	e003      	b.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8009946:	bf00      	nop
 8009948:	e1c4      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800994a:	bf00      	nop
 800994c:	e1c2      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800994e:	bf00      	nop
        break;
 8009950:	e1c0      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8009952:	bf00      	nop
 8009954:	40021000 	.word	0x40021000
 8009958:	00f42400 	.word	0x00f42400
 800995c:	08014c8c 	.word	0x08014c8c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009960:	4b96      	ldr	r3, [pc, #600]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009966:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009972:	d013      	beq.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800997a:	d819      	bhi.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009988:	d004      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800998a:	e011      	b.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800998c:	f7fe fe6e 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 8009990:	61f8      	str	r0, [r7, #28]
          break;
 8009992:	e010      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8009994:	f7fe fdd2 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8009998:	61f8      	str	r0, [r7, #28]
          break;
 800999a:	e00c      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800999c:	4b87      	ldr	r3, [pc, #540]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a8:	d104      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80099aa:	4b85      	ldr	r3, [pc, #532]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80099ac:	61fb      	str	r3, [r7, #28]
          break;
 80099ae:	e001      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80099b0:	bf00      	nop
 80099b2:	e18f      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80099b4:	bf00      	nop
        break;
 80099b6:	e18d      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80099b8:	4b80      	ldr	r3, [pc, #512]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ca:	d013      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d2:	d819      	bhi.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e0:	d004      	beq.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80099e2:	e011      	b.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80099e4:	f7fe fe42 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 80099e8:	61f8      	str	r0, [r7, #28]
          break;
 80099ea:	e010      	b.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80099ec:	f7fe fda6 	bl	800853c <HAL_RCC_GetSysClockFreq>
 80099f0:	61f8      	str	r0, [r7, #28]
          break;
 80099f2:	e00c      	b.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099f4:	4b71      	ldr	r3, [pc, #452]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a00:	d104      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8009a02:	4b6f      	ldr	r3, [pc, #444]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009a04:	61fb      	str	r3, [r7, #28]
          break;
 8009a06:	e001      	b.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8009a08:	bf00      	nop
 8009a0a:	e163      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009a0c:	bf00      	nop
        break;
 8009a0e:	e161      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009a10:	4b6a      	ldr	r3, [pc, #424]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a22:	d013      	beq.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a2a:	d819      	bhi.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a38:	d004      	beq.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8009a3a:	e011      	b.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a3c:	f7fe fe16 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 8009a40:	61f8      	str	r0, [r7, #28]
          break;
 8009a42:	e010      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8009a44:	f7fe fd7a 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8009a48:	61f8      	str	r0, [r7, #28]
          break;
 8009a4a:	e00c      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a58:	d104      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8009a5a:	4b59      	ldr	r3, [pc, #356]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009a5c:	61fb      	str	r3, [r7, #28]
          break;
 8009a5e:	e001      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8009a60:	bf00      	nop
 8009a62:	e137      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009a64:	bf00      	nop
        break;
 8009a66:	e135      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009a68:	4b54      	ldr	r3, [pc, #336]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d011      	beq.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d818      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d004      	beq.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8009a8c:	e011      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a8e:	f7fe fded 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 8009a92:	61f8      	str	r0, [r7, #28]
          break;
 8009a94:	e010      	b.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8009a96:	f7fe fd51 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8009a9a:	61f8      	str	r0, [r7, #28]
          break;
 8009a9c:	e00c      	b.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a9e:	4b47      	ldr	r3, [pc, #284]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aaa:	d104      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8009aac:	4b44      	ldr	r3, [pc, #272]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009aae:	61fb      	str	r3, [r7, #28]
          break;
 8009ab0:	e001      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8009ab2:	bf00      	nop
 8009ab4:	e10e      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009ab6:	bf00      	nop
        break;
 8009ab8:	e10c      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009aba:	4b40      	ldr	r3, [pc, #256]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009acc:	d02c      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009ad4:	d833      	bhi.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009adc:	d01a      	beq.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009ae4:	d82b      	bhi.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009af2:	d004      	beq.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8009af4:	e023      	b.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009af6:	f7fe fdb9 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 8009afa:	61f8      	str	r0, [r7, #28]
          break;
 8009afc:	e026      	b.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009afe:	4b2f      	ldr	r3, [pc, #188]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d11a      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8009b0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b10:	61fb      	str	r3, [r7, #28]
          break;
 8009b12:	e016      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b14:	4b29      	ldr	r3, [pc, #164]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b20:	d111      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8009b22:	4b27      	ldr	r3, [pc, #156]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009b24:	61fb      	str	r3, [r7, #28]
          break;
 8009b26:	e00e      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009b28:	4b24      	ldr	r3, [pc, #144]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d109      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8009b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b3a:	61fb      	str	r3, [r7, #28]
          break;
 8009b3c:	e005      	b.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8009b3e:	bf00      	nop
 8009b40:	e0c8      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b42:	bf00      	nop
 8009b44:	e0c6      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b46:	bf00      	nop
 8009b48:	e0c4      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b4a:	bf00      	nop
        break;
 8009b4c:	e0c2      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b60:	d030      	beq.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b68:	d837      	bhi.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b70:	d01a      	beq.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b78:	d82f      	bhi.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b86:	d004      	beq.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8009b88:	e027      	b.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b8a:	f7fe fd6f 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 8009b8e:	61f8      	str	r0, [r7, #28]
          break;
 8009b90:	e02a      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009b92:	4b0a      	ldr	r3, [pc, #40]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d11e      	bne.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8009ba0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ba4:	61fb      	str	r3, [r7, #28]
          break;
 8009ba6:	e01a      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ba8:	4b04      	ldr	r3, [pc, #16]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bb4:	d115      	bne.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8009bb6:	4b02      	ldr	r3, [pc, #8]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009bb8:	61fb      	str	r3, [r7, #28]
          break;
 8009bba:	e012      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009bbc:	40021000 	.word	0x40021000
 8009bc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009bc4:	4b46      	ldr	r3, [pc, #280]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d109      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8009bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bd6:	61fb      	str	r3, [r7, #28]
          break;
 8009bd8:	e005      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8009bda:	bf00      	nop
 8009bdc:	e07a      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009bde:	bf00      	nop
 8009be0:	e078      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009be2:	bf00      	nop
 8009be4:	e076      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009be6:	bf00      	nop
        break;
 8009be8:	e074      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009bea:	4b3d      	ldr	r3, [pc, #244]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bf0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bfc:	d02c      	beq.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c04:	d855      	bhi.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c12:	d004      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8009c14:	e04d      	b.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8009c16:	f7fe fc91 	bl	800853c <HAL_RCC_GetSysClockFreq>
 8009c1a:	61f8      	str	r0, [r7, #28]
          break;
 8009c1c:	e04e      	b.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009c1e:	4b30      	ldr	r3, [pc, #192]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d145      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009c36:	4b2a      	ldr	r3, [pc, #168]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	091b      	lsrs	r3, r3, #4
 8009c3c:	f003 030f 	and.w	r3, r3, #15
 8009c40:	e005      	b.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8009c42:	4b27      	ldr	r3, [pc, #156]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	4a25      	ldr	r2, [pc, #148]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8009c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c54:	61fb      	str	r3, [r7, #28]
          break;
 8009c56:	e02e      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009c58:	4b21      	ldr	r3, [pc, #132]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c64:	d129      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009c66:	4b1e      	ldr	r3, [pc, #120]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c72:	d122      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009c74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c7e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	fb03 f202 	mul.w	r2, r3, r2
 8009c88:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	091b      	lsrs	r3, r3, #4
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	3301      	adds	r3, #1
 8009c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c98:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009c9a:	4b11      	ldr	r3, [pc, #68]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	0d5b      	lsrs	r3, r3, #21
 8009ca0:	f003 0303 	and.w	r3, r3, #3
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cae:	61fb      	str	r3, [r7, #28]
          break;
 8009cb0:	e003      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8009cb2:	bf00      	nop
 8009cb4:	e00e      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009cb6:	bf00      	nop
 8009cb8:	e00c      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009cba:	bf00      	nop
        break;
 8009cbc:	e00a      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009cbe:	bf00      	nop
 8009cc0:	e008      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009cc2:	bf00      	nop
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e004      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009cca:	bf00      	nop
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009cd2:	bf00      	nop
    }
  }

  return(frequency);
 8009cd4:	69fb      	ldr	r3, [r7, #28]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	40021000 	.word	0x40021000
 8009ce4:	08014c8c 	.word	0x08014c8c

08009ce8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009cec:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a04      	ldr	r2, [pc, #16]	@ (8009d04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009cf2:	f043 0304 	orr.w	r3, r3, #4
 8009cf6:	6013      	str	r3, [r2, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	40021000 	.word	0x40021000

08009d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d16:	4b72      	ldr	r3, [pc, #456]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00e      	beq.n	8009d40 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009d22:	4b6f      	ldr	r3, [pc, #444]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f003 0203 	and.w	r2, r3, #3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d103      	bne.n	8009d3a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
       ||
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d142      	bne.n	8009dc0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	73fb      	strb	r3, [r7, #15]
 8009d3e:	e03f      	b.n	8009dc0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d018      	beq.n	8009d7a <RCCEx_PLLSAI1_Config+0x72>
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d825      	bhi.n	8009d98 <RCCEx_PLLSAI1_Config+0x90>
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d002      	beq.n	8009d56 <RCCEx_PLLSAI1_Config+0x4e>
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d009      	beq.n	8009d68 <RCCEx_PLLSAI1_Config+0x60>
 8009d54:	e020      	b.n	8009d98 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d56:	4b62      	ldr	r3, [pc, #392]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d11d      	bne.n	8009d9e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d66:	e01a      	b.n	8009d9e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d68:	4b5d      	ldr	r3, [pc, #372]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d116      	bne.n	8009da2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d78:	e013      	b.n	8009da2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d7a:	4b59      	ldr	r3, [pc, #356]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10f      	bne.n	8009da6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d86:	4b56      	ldr	r3, [pc, #344]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d96:	e006      	b.n	8009da6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9c:	e004      	b.n	8009da8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d9e:	bf00      	nop
 8009da0:	e002      	b.n	8009da8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009da2:	bf00      	nop
 8009da4:	e000      	b.n	8009da8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d108      	bne.n	8009dc0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009dae:	4b4c      	ldr	r3, [pc, #304]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f023 0203 	bic.w	r2, r3, #3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4949      	ldr	r1, [pc, #292]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 8086 	bne.w	8009ed4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009dc8:	4b45      	ldr	r3, [pc, #276]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a44      	ldr	r2, [pc, #272]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009dce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dd4:	f7fb fb56 	bl	8005484 <HAL_GetTick>
 8009dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009dda:	e009      	b.n	8009df0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ddc:	f7fb fb52 	bl	8005484 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d902      	bls.n	8009df0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	73fb      	strb	r3, [r7, #15]
        break;
 8009dee:	e005      	b.n	8009dfc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009df0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1ef      	bne.n	8009ddc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d168      	bne.n	8009ed4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d113      	bne.n	8009e30 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e08:	4b35      	ldr	r3, [pc, #212]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e0a:	691a      	ldr	r2, [r3, #16]
 8009e0c:	4b35      	ldr	r3, [pc, #212]	@ (8009ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e0e:	4013      	ands	r3, r2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6892      	ldr	r2, [r2, #8]
 8009e14:	0211      	lsls	r1, r2, #8
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68d2      	ldr	r2, [r2, #12]
 8009e1a:	06d2      	lsls	r2, r2, #27
 8009e1c:	4311      	orrs	r1, r2
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6852      	ldr	r2, [r2, #4]
 8009e22:	3a01      	subs	r2, #1
 8009e24:	0112      	lsls	r2, r2, #4
 8009e26:	430a      	orrs	r2, r1
 8009e28:	492d      	ldr	r1, [pc, #180]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	610b      	str	r3, [r1, #16]
 8009e2e:	e02d      	b.n	8009e8c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d115      	bne.n	8009e62 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e36:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6892      	ldr	r2, [r2, #8]
 8009e42:	0211      	lsls	r1, r2, #8
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6912      	ldr	r2, [r2, #16]
 8009e48:	0852      	lsrs	r2, r2, #1
 8009e4a:	3a01      	subs	r2, #1
 8009e4c:	0552      	lsls	r2, r2, #21
 8009e4e:	4311      	orrs	r1, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6852      	ldr	r2, [r2, #4]
 8009e54:	3a01      	subs	r2, #1
 8009e56:	0112      	lsls	r2, r2, #4
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	4921      	ldr	r1, [pc, #132]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	610b      	str	r3, [r1, #16]
 8009e60:	e014      	b.n	8009e8c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e62:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e64:	691a      	ldr	r2, [r3, #16]
 8009e66:	4b21      	ldr	r3, [pc, #132]	@ (8009eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6892      	ldr	r2, [r2, #8]
 8009e6e:	0211      	lsls	r1, r2, #8
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6952      	ldr	r2, [r2, #20]
 8009e74:	0852      	lsrs	r2, r2, #1
 8009e76:	3a01      	subs	r2, #1
 8009e78:	0652      	lsls	r2, r2, #25
 8009e7a:	4311      	orrs	r1, r2
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	6852      	ldr	r2, [r2, #4]
 8009e80:	3a01      	subs	r2, #1
 8009e82:	0112      	lsls	r2, r2, #4
 8009e84:	430a      	orrs	r2, r1
 8009e86:	4916      	ldr	r1, [pc, #88]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009e8c:	4b14      	ldr	r3, [pc, #80]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a13      	ldr	r2, [pc, #76]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e98:	f7fb faf4 	bl	8005484 <HAL_GetTick>
 8009e9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e9e:	e009      	b.n	8009eb4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ea0:	f7fb faf0 	bl	8005484 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d902      	bls.n	8009eb4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	73fb      	strb	r3, [r7, #15]
          break;
 8009eb2:	e005      	b.n	8009ec0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0ef      	beq.n	8009ea0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009ec6:	4b06      	ldr	r3, [pc, #24]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ec8:	691a      	ldr	r2, [r3, #16]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	4904      	ldr	r1, [pc, #16]	@ (8009ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40021000 	.word	0x40021000
 8009ee4:	07ff800f 	.word	0x07ff800f
 8009ee8:	ff9f800f 	.word	0xff9f800f
 8009eec:	f9ff800f 	.word	0xf9ff800f

08009ef0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009efe:	4b72      	ldr	r3, [pc, #456]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00e      	beq.n	8009f28 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009f0a:	4b6f      	ldr	r3, [pc, #444]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f003 0203 	and.w	r2, r3, #3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d103      	bne.n	8009f22 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
       ||
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d142      	bne.n	8009fa8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	73fb      	strb	r3, [r7, #15]
 8009f26:	e03f      	b.n	8009fa8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d018      	beq.n	8009f62 <RCCEx_PLLSAI2_Config+0x72>
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d825      	bhi.n	8009f80 <RCCEx_PLLSAI2_Config+0x90>
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d002      	beq.n	8009f3e <RCCEx_PLLSAI2_Config+0x4e>
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d009      	beq.n	8009f50 <RCCEx_PLLSAI2_Config+0x60>
 8009f3c:	e020      	b.n	8009f80 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009f3e:	4b62      	ldr	r3, [pc, #392]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d11d      	bne.n	8009f86 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f4e:	e01a      	b.n	8009f86 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009f50:	4b5d      	ldr	r3, [pc, #372]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d116      	bne.n	8009f8a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f60:	e013      	b.n	8009f8a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009f62:	4b59      	ldr	r3, [pc, #356]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10f      	bne.n	8009f8e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009f6e:	4b56      	ldr	r3, [pc, #344]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f7e:	e006      	b.n	8009f8e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	73fb      	strb	r3, [r7, #15]
      break;
 8009f84:	e004      	b.n	8009f90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f86:	bf00      	nop
 8009f88:	e002      	b.n	8009f90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f8a:	bf00      	nop
 8009f8c:	e000      	b.n	8009f90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d108      	bne.n	8009fa8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009f96:	4b4c      	ldr	r3, [pc, #304]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f023 0203 	bic.w	r2, r3, #3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4949      	ldr	r1, [pc, #292]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f040 8086 	bne.w	800a0bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009fb0:	4b45      	ldr	r3, [pc, #276]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a44      	ldr	r2, [pc, #272]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fbc:	f7fb fa62 	bl	8005484 <HAL_GetTick>
 8009fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009fc2:	e009      	b.n	8009fd8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009fc4:	f7fb fa5e 	bl	8005484 <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d902      	bls.n	8009fd8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8009fd6:	e005      	b.n	8009fe4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009fd8:	4b3b      	ldr	r3, [pc, #236]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1ef      	bne.n	8009fc4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d168      	bne.n	800a0bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d113      	bne.n	800a018 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ff0:	4b35      	ldr	r3, [pc, #212]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ff2:	695a      	ldr	r2, [r3, #20]
 8009ff4:	4b35      	ldr	r3, [pc, #212]	@ (800a0cc <RCCEx_PLLSAI2_Config+0x1dc>)
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	6892      	ldr	r2, [r2, #8]
 8009ffc:	0211      	lsls	r1, r2, #8
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	68d2      	ldr	r2, [r2, #12]
 800a002:	06d2      	lsls	r2, r2, #27
 800a004:	4311      	orrs	r1, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6852      	ldr	r2, [r2, #4]
 800a00a:	3a01      	subs	r2, #1
 800a00c:	0112      	lsls	r2, r2, #4
 800a00e:	430a      	orrs	r2, r1
 800a010:	492d      	ldr	r1, [pc, #180]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a012:	4313      	orrs	r3, r2
 800a014:	614b      	str	r3, [r1, #20]
 800a016:	e02d      	b.n	800a074 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d115      	bne.n	800a04a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a01e:	4b2a      	ldr	r3, [pc, #168]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a020:	695a      	ldr	r2, [r3, #20]
 800a022:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 800a024:	4013      	ands	r3, r2
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	6892      	ldr	r2, [r2, #8]
 800a02a:	0211      	lsls	r1, r2, #8
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	6912      	ldr	r2, [r2, #16]
 800a030:	0852      	lsrs	r2, r2, #1
 800a032:	3a01      	subs	r2, #1
 800a034:	0552      	lsls	r2, r2, #21
 800a036:	4311      	orrs	r1, r2
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	6852      	ldr	r2, [r2, #4]
 800a03c:	3a01      	subs	r2, #1
 800a03e:	0112      	lsls	r2, r2, #4
 800a040:	430a      	orrs	r2, r1
 800a042:	4921      	ldr	r1, [pc, #132]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a044:	4313      	orrs	r3, r2
 800a046:	614b      	str	r3, [r1, #20]
 800a048:	e014      	b.n	800a074 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a04a:	4b1f      	ldr	r3, [pc, #124]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a04c:	695a      	ldr	r2, [r3, #20]
 800a04e:	4b21      	ldr	r3, [pc, #132]	@ (800a0d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 800a050:	4013      	ands	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	6892      	ldr	r2, [r2, #8]
 800a056:	0211      	lsls	r1, r2, #8
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6952      	ldr	r2, [r2, #20]
 800a05c:	0852      	lsrs	r2, r2, #1
 800a05e:	3a01      	subs	r2, #1
 800a060:	0652      	lsls	r2, r2, #25
 800a062:	4311      	orrs	r1, r2
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6852      	ldr	r2, [r2, #4]
 800a068:	3a01      	subs	r2, #1
 800a06a:	0112      	lsls	r2, r2, #4
 800a06c:	430a      	orrs	r2, r1
 800a06e:	4916      	ldr	r1, [pc, #88]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a070:	4313      	orrs	r3, r2
 800a072:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a074:	4b14      	ldr	r3, [pc, #80]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a13      	ldr	r2, [pc, #76]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a07a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a07e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a080:	f7fb fa00 	bl	8005484 <HAL_GetTick>
 800a084:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a086:	e009      	b.n	800a09c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a088:	f7fb f9fc 	bl	8005484 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d902      	bls.n	800a09c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	73fb      	strb	r3, [r7, #15]
          break;
 800a09a:	e005      	b.n	800a0a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a09c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0ef      	beq.n	800a088 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a0ae:	4b06      	ldr	r3, [pc, #24]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a0b0:	695a      	ldr	r2, [r3, #20]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	4904      	ldr	r1, [pc, #16]	@ (800a0c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	40021000 	.word	0x40021000
 800a0cc:	07ff800f 	.word	0x07ff800f
 800a0d0:	ff9f800f 	.word	0xff9f800f
 800a0d4:	f9ff800f 	.word	0xf9ff800f

0800a0d8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b089      	sub	sp, #36	@ 0x24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0f4:	d10b      	bne.n	800a10e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a0f6:	4b7e      	ldr	r3, [pc, #504]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a0f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0fc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a100:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b60      	cmp	r3, #96	@ 0x60
 800a106:	d112      	bne.n	800a12e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a108:	4b7a      	ldr	r3, [pc, #488]	@ (800a2f4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	e00f      	b.n	800a12e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a114:	d10b      	bne.n	800a12e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a116:	4b76      	ldr	r3, [pc, #472]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a11c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a120:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a128:	d101      	bne.n	800a12e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a12a:	4b72      	ldr	r3, [pc, #456]	@ (800a2f4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a12c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f040 80d6 	bne.w	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b40      	cmp	r3, #64	@ 0x40
 800a13e:	d003      	beq.n	800a148 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a146:	d13b      	bne.n	800a1c0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a148:	4b69      	ldr	r3, [pc, #420]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a154:	f040 80c4 	bne.w	800a2e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800a158:	4b65      	ldr	r3, [pc, #404]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80bd 	beq.w	800a2e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a166:	4b62      	ldr	r3, [pc, #392]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	091b      	lsrs	r3, r3, #4
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	3301      	adds	r3, #1
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	fbb2 f3f3 	udiv	r3, r2, r3
 800a178:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a17a:	4b5d      	ldr	r3, [pc, #372]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	0a1b      	lsrs	r3, r3, #8
 800a180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a184:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a186:	4b5a      	ldr	r3, [pc, #360]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	0edb      	lsrs	r3, r3, #27
 800a18c:	f003 031f 	and.w	r3, r3, #31
 800a190:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a198:	4b55      	ldr	r3, [pc, #340]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800a1a4:	2311      	movs	r3, #17
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	e001      	b.n	800a1ae <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800a1aa:	2307      	movs	r3, #7
 800a1ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	fb03 f202 	mul.w	r2, r3, r2
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1bc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a1be:	e08f      	b.n	800a2e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d13a      	bne.n	800a23c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a1c6:	4b4a      	ldr	r3, [pc, #296]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1d2:	f040 8086 	bne.w	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800a1d6:	4b46      	ldr	r3, [pc, #280]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d07f      	beq.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a1e2:	4b43      	ldr	r3, [pc, #268]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	091b      	lsrs	r3, r3, #4
 800a1e8:	f003 030f 	and.w	r3, r3, #15
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a1f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a200:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800a202:	4b3b      	ldr	r3, [pc, #236]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	0edb      	lsrs	r3, r3, #27
 800a208:	f003 031f 	and.w	r3, r3, #31
 800a20c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800a214:	4b36      	ldr	r3, [pc, #216]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800a220:	2311      	movs	r3, #17
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	e001      	b.n	800a22a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800a226:	2307      	movs	r3, #7
 800a228:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	fb03 f202 	mul.w	r2, r3, r2
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	fbb2 f3f3 	udiv	r3, r2, r3
 800a238:	61fb      	str	r3, [r7, #28]
 800a23a:	e052      	b.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2b80      	cmp	r3, #128	@ 0x80
 800a240:	d003      	beq.n	800a24a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a248:	d109      	bne.n	800a25e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a24a:	4b29      	ldr	r3, [pc, #164]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a256:	d144      	bne.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800a258:	4b27      	ldr	r3, [pc, #156]	@ (800a2f8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800a25a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a25c:	e041      	b.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b20      	cmp	r3, #32
 800a262:	d003      	beq.n	800a26c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a26a:	d13a      	bne.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a26c:	4b20      	ldr	r3, [pc, #128]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a278:	d133      	bne.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800a27a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02d      	beq.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a286:	4b1a      	ldr	r3, [pc, #104]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	091b      	lsrs	r3, r3, #4
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	3301      	adds	r3, #1
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	fbb2 f3f3 	udiv	r3, r2, r3
 800a298:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a29a:	4b15      	ldr	r3, [pc, #84]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	0a1b      	lsrs	r3, r3, #8
 800a2a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800a2a6:	4b12      	ldr	r3, [pc, #72]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	0edb      	lsrs	r3, r3, #27
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a2b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800a2c4:	2311      	movs	r3, #17
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	e001      	b.n	800a2ce <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800a2ca:	2307      	movs	r3, #7
 800a2cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	fb03 f202 	mul.w	r2, r3, r2
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	e000      	b.n	800a2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a2e0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800a2e2:	69fb      	ldr	r3, [r7, #28]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3724      	adds	r7, #36	@ 0x24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	40021000 	.word	0x40021000
 800a2f4:	001fff68 	.word	0x001fff68
 800a2f8:	00f42400 	.word	0x00f42400

0800a2fc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d904      	bls.n	800a31a <HAL_SAI_InitProtocol+0x1e>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	3b03      	subs	r3, #3
 800a314:	2b01      	cmp	r3, #1
 800a316:	d812      	bhi.n	800a33e <HAL_SAI_InitProtocol+0x42>
 800a318:	e008      	b.n	800a32c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 f9fb 	bl	800a71c <SAI_InitI2S>
 800a326:	4603      	mov	r3, r0
 800a328:	75fb      	strb	r3, [r7, #23]
      break;
 800a32a:	e00b      	b.n	800a344 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 faa4 	bl	800a880 <SAI_InitPCM>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
      break;
 800a33c:	e002      	b.n	800a344 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	75fb      	strb	r3, [r7, #23]
      break;
 800a342:	bf00      	nop
  }

  if (status == HAL_OK)
 800a344:	7dfb      	ldrb	r3, [r7, #23]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f808 	bl	800a360 <HAL_SAI_Init>
 800a350:	4603      	mov	r3, r0
 800a352:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a354:	7dfb      	ldrb	r3, [r7, #23]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08a      	sub	sp, #40	@ 0x28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e1c7      	b.n	800a702 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d10e      	bne.n	800a39a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a81      	ldr	r2, [pc, #516]	@ (800a588 <HAL_SAI_Init+0x228>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d107      	bne.n	800a396 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d103      	bne.n	800a396 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e1b3      	b.n	800a702 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f9 f820 	bl	80033f4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fae5 	bl	800a984 <SAI_Disable>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e19e      	b.n	800a702 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d00c      	beq.n	800a3ee <HAL_SAI_Init+0x8e>
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d80d      	bhi.n	800a3f4 <HAL_SAI_Init+0x94>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <HAL_SAI_Init+0x82>
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d003      	beq.n	800a3e8 <HAL_SAI_Init+0x88>
 800a3e0:	e008      	b.n	800a3f4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a3e6:	e008      	b.n	800a3fa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a3ec:	e005      	b.n	800a3fa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a3ee:	2320      	movs	r3, #32
 800a3f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a3f2:	e002      	b.n	800a3fa <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a3f8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d81d      	bhi.n	800a43e <HAL_SAI_Init+0xde>
 800a402:	a201      	add	r2, pc, #4	@ (adr r2, 800a408 <HAL_SAI_Init+0xa8>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a419 	.word	0x0800a419
 800a40c:	0800a41f 	.word	0x0800a41f
 800a410:	0800a427 	.word	0x0800a427
 800a414:	0800a42f 	.word	0x0800a42f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	61fb      	str	r3, [r7, #28]
      break;
 800a41c:	e012      	b.n	800a444 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a41e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a422:	61fb      	str	r3, [r7, #28]
      break;
 800a424:	e00e      	b.n	800a444 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a42a:	61fb      	str	r3, [r7, #28]
      break;
 800a42c:	e00a      	b.n	800a444 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a42e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a432:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a43c:	e002      	b.n	800a444 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	61fb      	str	r3, [r7, #28]
      break;
 800a442:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a4f      	ldr	r2, [pc, #316]	@ (800a588 <HAL_SAI_Init+0x228>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d004      	beq.n	800a458 <HAL_SAI_Init+0xf8>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a4e      	ldr	r2, [pc, #312]	@ (800a58c <HAL_SAI_Init+0x22c>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d103      	bne.n	800a460 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800a458:	4a4d      	ldr	r2, [pc, #308]	@ (800a590 <HAL_SAI_Init+0x230>)
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	e002      	b.n	800a466 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a460:	4a4c      	ldr	r2, [pc, #304]	@ (800a594 <HAL_SAI_Init+0x234>)
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d073      	beq.n	800a556 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a45      	ldr	r2, [pc, #276]	@ (800a588 <HAL_SAI_Init+0x228>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d004      	beq.n	800a482 <HAL_SAI_Init+0x122>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a43      	ldr	r2, [pc, #268]	@ (800a58c <HAL_SAI_Init+0x22c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d105      	bne.n	800a48e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a482:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a486:	f7fe fd0d 	bl	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a48a:	61b8      	str	r0, [r7, #24]
 800a48c:	e004      	b.n	800a498 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a48e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a492:	f7fe fd07 	bl	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a496:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a4a0:	d120      	bne.n	800a4e4 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d102      	bne.n	800a4b0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a4aa:	2340      	movs	r3, #64	@ 0x40
 800a4ac:	613b      	str	r3, [r7, #16]
 800a4ae:	e00a      	b.n	800a4c6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b4:	2b08      	cmp	r3, #8
 800a4b6:	d103      	bne.n	800a4c0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a4b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4bc:	613b      	str	r3, [r7, #16]
 800a4be:	e002      	b.n	800a4c6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4c4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4e0:	617b      	str	r3, [r7, #20]
 800a4e2:	e017      	b.n	800a514 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4ec:	d101      	bne.n	800a4f2 <HAL_SAI_Init+0x192>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e000      	b.n	800a4f4 <HAL_SAI_Init+0x194>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	4619      	mov	r1, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	fb02 f303 	mul.w	r3, r2, r3
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a512:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4a20      	ldr	r2, [pc, #128]	@ (800a598 <HAL_SAI_Init+0x238>)
 800a518:	fba2 2303 	umull	r2, r3, r2, r3
 800a51c:	08da      	lsrs	r2, r3, #3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a522:	6979      	ldr	r1, [r7, #20]
 800a524:	4b1c      	ldr	r3, [pc, #112]	@ (800a598 <HAL_SAI_Init+0x238>)
 800a526:	fba3 2301 	umull	r2, r3, r3, r1
 800a52a:	08da      	lsrs	r2, r3, #3
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	1aca      	subs	r2, r1, r3
 800a536:	2a08      	cmp	r2, #8
 800a538:	d904      	bls.n	800a544 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d104      	bne.n	800a556 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	085a      	lsrs	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_SAI_Init+0x206>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d109      	bne.n	800a57a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_SAI_Init+0x212>
 800a56e:	2300      	movs	r3, #0
 800a570:	e001      	b.n	800a576 <HAL_SAI_Init+0x216>
 800a572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	e012      	b.n	800a5a0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d10c      	bne.n	800a59c <HAL_SAI_Init+0x23c>
 800a582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a586:	e00a      	b.n	800a59e <HAL_SAI_Init+0x23e>
 800a588:	40015404 	.word	0x40015404
 800a58c:	40015424 	.word	0x40015424
 800a590:	40015400 	.word	0x40015400
 800a594:	40015800 	.word	0x40015800
 800a598:	cccccccd 	.word	0xcccccccd
 800a59c:	2300      	movs	r3, #0
 800a59e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6819      	ldr	r1, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b58      	ldr	r3, [pc, #352]	@ (800a70c <HAL_SAI_Init+0x3ac>)
 800a5ac:	400b      	ands	r3, r1
 800a5ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6819      	ldr	r1, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a5c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800a5d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a5e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	051b      	lsls	r3, r3, #20
 800a5ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a5f2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a60a:	f023 030f 	bic.w	r3, r3, #15
 800a60e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6859      	ldr	r1, [r3, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a624:	431a      	orrs	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6899      	ldr	r1, [r3, #8]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	4b35      	ldr	r3, [pc, #212]	@ (800a710 <HAL_SAI_Init+0x3b0>)
 800a63a:	400b      	ands	r3, r1
 800a63c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6899      	ldr	r1, [r3, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a648:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a64e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800a654:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800a65a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a660:	3b01      	subs	r3, #1
 800a662:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a664:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68d9      	ldr	r1, [r3, #12]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a67c:	400b      	ands	r3, r1
 800a67e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68d9      	ldr	r1, [r3, #12]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a68e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a694:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a696:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a69c:	3b01      	subs	r3, #1
 800a69e:	021b      	lsls	r3, r3, #8
 800a6a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a19      	ldr	r2, [pc, #100]	@ (800a714 <HAL_SAI_Init+0x3b4>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d119      	bne.n	800a6e8 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a6b4:	4b18      	ldr	r3, [pc, #96]	@ (800a718 <HAL_SAI_Init+0x3b8>)
 800a6b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b8:	4a17      	ldr	r2, [pc, #92]	@ (800a718 <HAL_SAI_Init+0x3b8>)
 800a6ba:	f023 0301 	bic.w	r3, r3, #1
 800a6be:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d10e      	bne.n	800a6e8 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a6d6:	4910      	ldr	r1, [pc, #64]	@ (800a718 <HAL_SAI_Init+0x3b8>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a6dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a718 <HAL_SAI_Init+0x3b8>)
 800a6de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6e0:	4a0d      	ldr	r2, [pc, #52]	@ (800a718 <HAL_SAI_Init+0x3b8>)
 800a6e2:	f043 0301 	orr.w	r3, r3, #1
 800a6e6:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3728      	adds	r7, #40	@ 0x28
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	f805c010 	.word	0xf805c010
 800a710:	fff88000 	.word	0xfff88000
 800a714:	40015404 	.word	0x40015404
 800a718:	40015400 	.word	0x40015400

0800a71c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <SAI_InitI2S+0x2e>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2b02      	cmp	r3, #2
 800a748:	d103      	bne.n	800a752 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a750:	e002      	b.n	800a758 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a75e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a766:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e077      	b.n	800a872 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d107      	bne.n	800a798 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a794:	661a      	str	r2, [r3, #96]	@ 0x60
 800a796:	e006      	b.n	800a7a6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a79e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d84f      	bhi.n	800a84c <SAI_InitI2S+0x130>
 800a7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b4 <SAI_InitI2S+0x98>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7e7 	.word	0x0800a7e7
 800a7bc:	0800a809 	.word	0x0800a809
 800a7c0:	0800a82b 	.word	0x0800a82b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2280      	movs	r2, #128	@ 0x80
 800a7c8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	011a      	lsls	r2, r3, #4
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2240      	movs	r2, #64	@ 0x40
 800a7e2:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a7e4:	e035      	b.n	800a852 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2280      	movs	r2, #128	@ 0x80
 800a7ea:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	085b      	lsrs	r3, r3, #1
 800a7f0:	019a      	lsls	r2, r3, #6
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2280      	movs	r2, #128	@ 0x80
 800a804:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a806:	e024      	b.n	800a852 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	22c0      	movs	r2, #192	@ 0xc0
 800a80c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	085b      	lsrs	r3, r3, #1
 800a812:	019a      	lsls	r2, r3, #6
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	085b      	lsrs	r3, r3, #1
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2280      	movs	r2, #128	@ 0x80
 800a826:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a828:	e013      	b.n	800a852 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	22e0      	movs	r2, #224	@ 0xe0
 800a82e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	019a      	lsls	r2, r3, #6
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2280      	movs	r2, #128	@ 0x80
 800a848:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a84a:	e002      	b.n	800a852 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
      break;
 800a850:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b02      	cmp	r3, #2
 800a856:	d10b      	bne.n	800a870 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d102      	bne.n	800a864 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2210      	movs	r2, #16
 800a862:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b02      	cmp	r3, #2
 800a868:	d102      	bne.n	800a870 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2208      	movs	r2, #8
 800a86e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop

0800a880 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <SAI_InitPCM+0x2e>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d103      	bne.n	800a8b6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a8b4:	e002      	b.n	800a8bc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a8c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a8d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a8e4:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d103      	bne.n	800a8f4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8f2:	e002      	b.n	800a8fa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	220d      	movs	r2, #13
 800a8f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d837      	bhi.n	800a970 <SAI_InitPCM+0xf0>
 800a900:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <SAI_InitPCM+0x88>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a919 	.word	0x0800a919
 800a90c:	0800a92f 	.word	0x0800a92f
 800a910:	0800a945 	.word	0x0800a945
 800a914:	0800a95b 	.word	0x0800a95b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2280      	movs	r2, #128	@ 0x80
 800a91c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	011a      	lsls	r2, r3, #4
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2240      	movs	r2, #64	@ 0x40
 800a92a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a92c:	e023      	b.n	800a976 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2280      	movs	r2, #128	@ 0x80
 800a932:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2280      	movs	r2, #128	@ 0x80
 800a940:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a942:	e018      	b.n	800a976 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	22c0      	movs	r2, #192	@ 0xc0
 800a948:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2280      	movs	r2, #128	@ 0x80
 800a956:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a958:	e00d      	b.n	800a976 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	22e0      	movs	r2, #224	@ 0xe0
 800a95e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2280      	movs	r2, #128	@ 0x80
 800a96c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a96e:	e002      	b.n	800a976 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	75fb      	strb	r3, [r7, #23]
      break;
 800a974:	bf00      	nop
  }

  return status;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a98c:	4b18      	ldr	r3, [pc, #96]	@ (800a9f0 <SAI_Disable+0x6c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a18      	ldr	r2, [pc, #96]	@ (800a9f4 <SAI_Disable+0x70>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	0b1b      	lsrs	r3, r3, #12
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a9ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10a      	bne.n	800a9cc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	72fb      	strb	r3, [r7, #11]
      break;
 800a9ca:	e009      	b.n	800a9e0 <SAI_Disable+0x5c>
    }
    count--;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e7      	bne.n	800a9b0 <SAI_Disable+0x2c>

  return status;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20000020 	.word	0x20000020
 800a9f4:	95cbec1b 	.word	0x95cbec1b

0800a9f8 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e0aa      	b.n	800ab60 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7f8 f9a8 	bl	8002d70 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0201 	bic.w	r2, r2, #1
 800aa34:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800aa42:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695a      	ldr	r2, [r3, #20]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aa52:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	695a      	ldr	r2, [r3, #20]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800aa62:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa6c:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aa7c:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d012      	beq.n	800aaac <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d107      	bne.n	800aa9e <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	e006      	b.n	800aaac <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68da      	ldr	r2, [r3, #12]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800aaaa:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d104      	bne.n	800aabe <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aabc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aacc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695a      	ldr	r2, [r3, #20]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1a      	ldr	r2, [r3, #32]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf4:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800aafa:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab00:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ab0c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ab0e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab18:	d110      	bne.n	800ab3c <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ab26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab2a:	d107      	bne.n	800ab3c <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ab3a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800ab7e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ab88:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800ab8a:	2180      	movs	r1, #128	@ 0x80
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f805 	bl	800ab9c <SMBUS_Enable_IRQ>

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abba:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abc2:	2b38      	cmp	r3, #56	@ 0x38
 800abc4:	d103      	bne.n	800abce <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800abcc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800abd4:	2bf2      	cmp	r3, #242	@ 0xf2
 800abd6:	d103      	bne.n	800abe0 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800abde:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 800abe6:	2bd4      	cmp	r3, #212	@ 0xd4
 800abe8:	d103      	bne.n	800abf2 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800abf0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6819      	ldr	r1, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	bf00      	nop
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e095      	b.n	800ad4c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d108      	bne.n	800ac3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac30:	d009      	beq.n	800ac46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	61da      	str	r2, [r3, #28]
 800ac38:	e005      	b.n	800ac46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d106      	bne.n	800ac66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7f8 f9cd 	bl	8003000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac86:	d902      	bls.n	800ac8e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	60fb      	str	r3, [r7, #12]
 800ac8c:	e002      	b.n	800ac94 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ac8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ac9c:	d007      	beq.n	800acae <HAL_SPI_Init+0xa0>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aca6:	d002      	beq.n	800acae <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800acbe:	431a      	orrs	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	f003 0302 	and.w	r3, r3, #2
 800acc8:	431a      	orrs	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	431a      	orrs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ace6:	431a      	orrs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acf0:	ea42 0103 	orr.w	r1, r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	0c1b      	lsrs	r3, r3, #16
 800ad0a:	f003 0204 	and.w	r2, r3, #4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	431a      	orrs	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad1c:	f003 0308 	and.w	r3, r3, #8
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ad2a:	ea42 0103 	orr.w	r1, r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	4613      	mov	r3, r2
 800ad62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <HAL_SPI_Transmit+0x22>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e15f      	b.n	800b036 <HAL_SPI_Transmit+0x2e2>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad7e:	f7fa fb81 	bl	8005484 <HAL_GetTick>
 800ad82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d002      	beq.n	800ad9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad94:	2302      	movs	r3, #2
 800ad96:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad98:	e148      	b.n	800b02c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <HAL_SPI_Transmit+0x52>
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800adaa:	e13f      	b.n	800b02c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2203      	movs	r2, #3
 800adb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	88fa      	ldrh	r2, [r7, #6]
 800adc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	88fa      	ldrh	r2, [r7, #6]
 800adca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adf6:	d10f      	bne.n	800ae18 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae22:	2b40      	cmp	r3, #64	@ 0x40
 800ae24:	d007      	beq.n	800ae36 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ae3e:	d94f      	bls.n	800aee0 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <HAL_SPI_Transmit+0xfa>
 800ae48:	8afb      	ldrh	r3, [r7, #22]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d142      	bne.n	800aed4 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae52:	881a      	ldrh	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae5e:	1c9a      	adds	r2, r3, #2
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ae72:	e02f      	b.n	800aed4 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d112      	bne.n	800aea8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae86:	881a      	ldrh	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae92:	1c9a      	adds	r2, r3, #2
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aea6:	e015      	b.n	800aed4 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aea8:	f7fa faec 	bl	8005484 <HAL_GetTick>
 800aeac:	4602      	mov	r2, r0
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d803      	bhi.n	800aec0 <HAL_SPI_Transmit+0x16c>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebe:	d102      	bne.n	800aec6 <HAL_SPI_Transmit+0x172>
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d106      	bne.n	800aed4 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800aed2:	e0ab      	b.n	800b02c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1ca      	bne.n	800ae74 <HAL_SPI_Transmit+0x120>
 800aede:	e080      	b.n	800afe2 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <HAL_SPI_Transmit+0x19a>
 800aee8:	8afb      	ldrh	r3, [r7, #22]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d174      	bne.n	800afd8 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d912      	bls.n	800af1e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefc:	881a      	ldrh	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af08:	1c9a      	adds	r2, r3, #2
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af12:	b29b      	uxth	r3, r3
 800af14:	3b02      	subs	r3, #2
 800af16:	b29a      	uxth	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800af1c:	e05c      	b.n	800afd8 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	330c      	adds	r3, #12
 800af28:	7812      	ldrb	r2, [r2, #0]
 800af2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	3b01      	subs	r3, #1
 800af3e:	b29a      	uxth	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800af44:	e048      	b.n	800afd8 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b02      	cmp	r3, #2
 800af52:	d12b      	bne.n	800afac <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af58:	b29b      	uxth	r3, r3
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d912      	bls.n	800af84 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af62:	881a      	ldrh	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6e:	1c9a      	adds	r2, r3, #2
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af78:	b29b      	uxth	r3, r3
 800af7a:	3b02      	subs	r3, #2
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800af82:	e029      	b.n	800afd8 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	330c      	adds	r3, #12
 800af8e:	7812      	ldrb	r2, [r2, #0]
 800af90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800afaa:	e015      	b.n	800afd8 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afac:	f7fa fa6a 	bl	8005484 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d803      	bhi.n	800afc4 <HAL_SPI_Transmit+0x270>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d102      	bne.n	800afca <HAL_SPI_Transmit+0x276>
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800afd6:	e029      	b.n	800b02c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afdc:	b29b      	uxth	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1b1      	bne.n	800af46 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 f948 	bl	800b27c <SPI_EndRxTxTransaction>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2220      	movs	r2, #32
 800aff6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10a      	bne.n	800b016 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b000:	2300      	movs	r3, #0
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	613b      	str	r3, [r7, #16]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	613b      	str	r3, [r7, #16]
 800b014:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	77fb      	strb	r3, [r7, #31]
 800b022:	e003      	b.n	800b02c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800b034:	7ffb      	ldrb	r3, [r7, #31]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	4613      	mov	r3, r2
 800b04e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b050:	f7fa fa18 	bl	8005484 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4413      	add	r3, r2
 800b05e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b060:	f7fa fa10 	bl	8005484 <HAL_GetTick>
 800b064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b066:	4b39      	ldr	r3, [pc, #228]	@ (800b14c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	015b      	lsls	r3, r3, #5
 800b06c:	0d1b      	lsrs	r3, r3, #20
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	fb02 f303 	mul.w	r3, r2, r3
 800b074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b076:	e054      	b.n	800b122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07e:	d050      	beq.n	800b122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b080:	f7fa fa00 	bl	8005484 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	69fa      	ldr	r2, [r7, #28]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d902      	bls.n	800b096 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d13d      	bne.n	800b112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b0a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b0ae:	d111      	bne.n	800b0d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0b8:	d004      	beq.n	800b0c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0c2:	d107      	bne.n	800b0d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b0d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0dc:	d10f      	bne.n	800b0fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e017      	b.n	800b142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	3b01      	subs	r3, #1
 800b120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689a      	ldr	r2, [r3, #8]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	4013      	ands	r3, r2
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	429a      	cmp	r2, r3
 800b130:	bf0c      	ite	eq
 800b132:	2301      	moveq	r3, #1
 800b134:	2300      	movne	r3, #0
 800b136:	b2db      	uxtb	r3, r3
 800b138:	461a      	mov	r2, r3
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d19b      	bne.n	800b078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3720      	adds	r7, #32
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000020 	.word	0x20000020

0800b150 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	@ 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b162:	f7fa f98f 	bl	8005484 <HAL_GetTick>
 800b166:	4602      	mov	r2, r0
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	1a9b      	subs	r3, r3, r2
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	4413      	add	r3, r2
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b172:	f7fa f987 	bl	8005484 <HAL_GetTick>
 800b176:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	330c      	adds	r3, #12
 800b17e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b180:	4b3d      	ldr	r3, [pc, #244]	@ (800b278 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	00da      	lsls	r2, r3, #3
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	0d1b      	lsrs	r3, r3, #20
 800b190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b192:	fb02 f303 	mul.w	r3, r2, r3
 800b196:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b198:	e060      	b.n	800b25c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b1a0:	d107      	bne.n	800b1b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b1b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d050      	beq.n	800b25c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1ba:	f7fa f963 	bl	8005484 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d902      	bls.n	800b1d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d13d      	bne.n	800b24c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b1de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b1e8:	d111      	bne.n	800b20e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1f2:	d004      	beq.n	800b1fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1fc:	d107      	bne.n	800b20e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b20c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b216:	d10f      	bne.n	800b238 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e010      	b.n	800b26e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	3b01      	subs	r3, #1
 800b25a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	4013      	ands	r3, r2
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d196      	bne.n	800b19a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3728      	adds	r7, #40	@ 0x28
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20000020 	.word	0x20000020

0800b27c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af02      	add	r7, sp, #8
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2200      	movs	r2, #0
 800b290:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7ff ff5b 	bl	800b150 <SPI_WaitFifoStateUntilTimeout>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2a4:	f043 0220 	orr.w	r2, r3, #32
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e027      	b.n	800b300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2180      	movs	r1, #128	@ 0x80
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff fec0 	bl	800b040 <SPI_WaitFlagStateUntilTimeout>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d007      	beq.n	800b2d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2ca:	f043 0220 	orr.w	r2, r3, #32
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e014      	b.n	800b300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f7ff ff34 	bl	800b150 <SPI_WaitFifoStateUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d007      	beq.n	800b2fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2f2:	f043 0220 	orr.w	r2, r3, #32
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e000      	b.n	800b300 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e049      	b.n	800b3ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7f7 feaa 	bl	8003088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3304      	adds	r3, #4
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	f000 f94a 	bl	800b5e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e0ff      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b14      	cmp	r3, #20
 800b3e2:	f200 80f0 	bhi.w	800b5c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b441 	.word	0x0800b441
 800b3f0:	0800b5c7 	.word	0x0800b5c7
 800b3f4:	0800b5c7 	.word	0x0800b5c7
 800b3f8:	0800b5c7 	.word	0x0800b5c7
 800b3fc:	0800b481 	.word	0x0800b481
 800b400:	0800b5c7 	.word	0x0800b5c7
 800b404:	0800b5c7 	.word	0x0800b5c7
 800b408:	0800b5c7 	.word	0x0800b5c7
 800b40c:	0800b4c3 	.word	0x0800b4c3
 800b410:	0800b5c7 	.word	0x0800b5c7
 800b414:	0800b5c7 	.word	0x0800b5c7
 800b418:	0800b5c7 	.word	0x0800b5c7
 800b41c:	0800b503 	.word	0x0800b503
 800b420:	0800b5c7 	.word	0x0800b5c7
 800b424:	0800b5c7 	.word	0x0800b5c7
 800b428:	0800b5c7 	.word	0x0800b5c7
 800b42c:	0800b545 	.word	0x0800b545
 800b430:	0800b5c7 	.word	0x0800b5c7
 800b434:	0800b5c7 	.word	0x0800b5c7
 800b438:	0800b5c7 	.word	0x0800b5c7
 800b43c:	0800b585 	.word	0x0800b585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68b9      	ldr	r1, [r7, #8]
 800b446:	4618      	mov	r0, r3
 800b448:	f000 f964 	bl	800b714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0208 	orr.w	r2, r2, #8
 800b45a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f022 0204 	bic.w	r2, r2, #4
 800b46a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6999      	ldr	r1, [r3, #24]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	430a      	orrs	r2, r1
 800b47c:	619a      	str	r2, [r3, #24]
      break;
 800b47e:	e0a5      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	4618      	mov	r0, r3
 800b488:	f000 f9d4 	bl	800b834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b49a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6999      	ldr	r1, [r3, #24]
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	021a      	lsls	r2, r3, #8
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	619a      	str	r2, [r3, #24]
      break;
 800b4c0:	e084      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fa3d 	bl	800b948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	69da      	ldr	r2, [r3, #28]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f042 0208 	orr.w	r2, r2, #8
 800b4dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0204 	bic.w	r2, r2, #4
 800b4ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69d9      	ldr	r1, [r3, #28]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	691a      	ldr	r2, [r3, #16]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	61da      	str	r2, [r3, #28]
      break;
 800b500:	e064      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 faa5 	bl	800ba58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69da      	ldr	r2, [r3, #28]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b51c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69da      	ldr	r2, [r3, #28]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b52c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69d9      	ldr	r1, [r3, #28]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	021a      	lsls	r2, r3, #8
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	61da      	str	r2, [r3, #28]
      break;
 800b542:	e043      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68b9      	ldr	r1, [r7, #8]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 faee 	bl	800bb2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f042 0208 	orr.w	r2, r2, #8
 800b55e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0204 	bic.w	r2, r2, #4
 800b56e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	691a      	ldr	r2, [r3, #16]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b582:	e023      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 fb32 	bl	800bbf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b59e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	021a      	lsls	r2, r3, #8
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b5c4:	e002      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop

0800b5e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a40      	ldr	r2, [pc, #256]	@ (800b6f4 <TIM_Base_SetConfig+0x114>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d013      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5fe:	d00f      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a3d      	ldr	r2, [pc, #244]	@ (800b6f8 <TIM_Base_SetConfig+0x118>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d00b      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a3c      	ldr	r2, [pc, #240]	@ (800b6fc <TIM_Base_SetConfig+0x11c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d007      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a3b      	ldr	r2, [pc, #236]	@ (800b700 <TIM_Base_SetConfig+0x120>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_Base_SetConfig+0x40>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a3a      	ldr	r2, [pc, #232]	@ (800b704 <TIM_Base_SetConfig+0x124>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d108      	bne.n	800b632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	4313      	orrs	r3, r2
 800b630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a2f      	ldr	r2, [pc, #188]	@ (800b6f4 <TIM_Base_SetConfig+0x114>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d01f      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b640:	d01b      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a2c      	ldr	r2, [pc, #176]	@ (800b6f8 <TIM_Base_SetConfig+0x118>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d017      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a2b      	ldr	r2, [pc, #172]	@ (800b6fc <TIM_Base_SetConfig+0x11c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d013      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a2a      	ldr	r2, [pc, #168]	@ (800b700 <TIM_Base_SetConfig+0x120>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d00f      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a29      	ldr	r2, [pc, #164]	@ (800b704 <TIM_Base_SetConfig+0x124>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00b      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a28      	ldr	r2, [pc, #160]	@ (800b708 <TIM_Base_SetConfig+0x128>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d007      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a27      	ldr	r2, [pc, #156]	@ (800b70c <TIM_Base_SetConfig+0x12c>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d003      	beq.n	800b67a <TIM_Base_SetConfig+0x9a>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a26      	ldr	r2, [pc, #152]	@ (800b710 <TIM_Base_SetConfig+0x130>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d108      	bne.n	800b68c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a10      	ldr	r2, [pc, #64]	@ (800b6f4 <TIM_Base_SetConfig+0x114>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_Base_SetConfig+0xf8>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a12      	ldr	r2, [pc, #72]	@ (800b704 <TIM_Base_SetConfig+0x124>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_Base_SetConfig+0xf8>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a11      	ldr	r2, [pc, #68]	@ (800b708 <TIM_Base_SetConfig+0x128>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_Base_SetConfig+0xf8>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a10      	ldr	r2, [pc, #64]	@ (800b70c <TIM_Base_SetConfig+0x12c>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_Base_SetConfig+0xf8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a0f      	ldr	r2, [pc, #60]	@ (800b710 <TIM_Base_SetConfig+0x130>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d103      	bne.n	800b6e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	615a      	str	r2, [r3, #20]
}
 800b6e6:	bf00      	nop
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	40012c00 	.word	0x40012c00
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	40000800 	.word	0x40000800
 800b700:	40000c00 	.word	0x40000c00
 800b704:	40013400 	.word	0x40013400
 800b708:	40014000 	.word	0x40014000
 800b70c:	40014400 	.word	0x40014400
 800b710:	40014800 	.word	0x40014800

0800b714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b714:	b480      	push	{r7}
 800b716:	b087      	sub	sp, #28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	f023 0201 	bic.w	r2, r3, #1
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f023 0302 	bic.w	r3, r3, #2
 800b760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	4313      	orrs	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a2c      	ldr	r2, [pc, #176]	@ (800b820 <TIM_OC1_SetConfig+0x10c>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00f      	beq.n	800b794 <TIM_OC1_SetConfig+0x80>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a2b      	ldr	r2, [pc, #172]	@ (800b824 <TIM_OC1_SetConfig+0x110>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d00b      	beq.n	800b794 <TIM_OC1_SetConfig+0x80>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a2a      	ldr	r2, [pc, #168]	@ (800b828 <TIM_OC1_SetConfig+0x114>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d007      	beq.n	800b794 <TIM_OC1_SetConfig+0x80>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a29      	ldr	r2, [pc, #164]	@ (800b82c <TIM_OC1_SetConfig+0x118>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d003      	beq.n	800b794 <TIM_OC1_SetConfig+0x80>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a28      	ldr	r2, [pc, #160]	@ (800b830 <TIM_OC1_SetConfig+0x11c>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d10c      	bne.n	800b7ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f023 0308 	bic.w	r3, r3, #8
 800b79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f023 0304 	bic.w	r3, r3, #4
 800b7ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b820 <TIM_OC1_SetConfig+0x10c>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d00f      	beq.n	800b7d6 <TIM_OC1_SetConfig+0xc2>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a1a      	ldr	r2, [pc, #104]	@ (800b824 <TIM_OC1_SetConfig+0x110>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d00b      	beq.n	800b7d6 <TIM_OC1_SetConfig+0xc2>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a19      	ldr	r2, [pc, #100]	@ (800b828 <TIM_OC1_SetConfig+0x114>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d007      	beq.n	800b7d6 <TIM_OC1_SetConfig+0xc2>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a18      	ldr	r2, [pc, #96]	@ (800b82c <TIM_OC1_SetConfig+0x118>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d003      	beq.n	800b7d6 <TIM_OC1_SetConfig+0xc2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a17      	ldr	r2, [pc, #92]	@ (800b830 <TIM_OC1_SetConfig+0x11c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d111      	bne.n	800b7fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	621a      	str	r2, [r3, #32]
}
 800b814:	bf00      	nop
 800b816:	371c      	adds	r7, #28
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	40012c00 	.word	0x40012c00
 800b824:	40013400 	.word	0x40013400
 800b828:	40014000 	.word	0x40014000
 800b82c:	40014400 	.word	0x40014400
 800b830:	40014800 	.word	0x40014800

0800b834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	f023 0210 	bic.w	r2, r3, #16
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	4313      	orrs	r3, r2
 800b87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f023 0320 	bic.w	r3, r3, #32
 800b882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a28      	ldr	r2, [pc, #160]	@ (800b934 <TIM_OC2_SetConfig+0x100>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <TIM_OC2_SetConfig+0x6c>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a27      	ldr	r2, [pc, #156]	@ (800b938 <TIM_OC2_SetConfig+0x104>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d10d      	bne.n	800b8bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a1d      	ldr	r2, [pc, #116]	@ (800b934 <TIM_OC2_SetConfig+0x100>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d00f      	beq.n	800b8e4 <TIM_OC2_SetConfig+0xb0>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b938 <TIM_OC2_SetConfig+0x104>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00b      	beq.n	800b8e4 <TIM_OC2_SetConfig+0xb0>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a1b      	ldr	r2, [pc, #108]	@ (800b93c <TIM_OC2_SetConfig+0x108>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d007      	beq.n	800b8e4 <TIM_OC2_SetConfig+0xb0>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a1a      	ldr	r2, [pc, #104]	@ (800b940 <TIM_OC2_SetConfig+0x10c>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d003      	beq.n	800b8e4 <TIM_OC2_SetConfig+0xb0>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a19      	ldr	r2, [pc, #100]	@ (800b944 <TIM_OC2_SetConfig+0x110>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d113      	bne.n	800b90c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b8ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	4313      	orrs	r3, r2
 800b90a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	621a      	str	r2, [r3, #32]
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	40012c00 	.word	0x40012c00
 800b938:	40013400 	.word	0x40013400
 800b93c:	40014000 	.word	0x40014000
 800b940:	40014400 	.word	0x40014400
 800b944:	40014800 	.word	0x40014800

0800b948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b948:	b480      	push	{r7}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f023 0303 	bic.w	r3, r3, #3
 800b982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a27      	ldr	r2, [pc, #156]	@ (800ba44 <TIM_OC3_SetConfig+0xfc>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d003      	beq.n	800b9b2 <TIM_OC3_SetConfig+0x6a>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a26      	ldr	r2, [pc, #152]	@ (800ba48 <TIM_OC3_SetConfig+0x100>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d10d      	bne.n	800b9ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a1c      	ldr	r2, [pc, #112]	@ (800ba44 <TIM_OC3_SetConfig+0xfc>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00f      	beq.n	800b9f6 <TIM_OC3_SetConfig+0xae>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a1b      	ldr	r2, [pc, #108]	@ (800ba48 <TIM_OC3_SetConfig+0x100>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00b      	beq.n	800b9f6 <TIM_OC3_SetConfig+0xae>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba4c <TIM_OC3_SetConfig+0x104>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d007      	beq.n	800b9f6 <TIM_OC3_SetConfig+0xae>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a19      	ldr	r2, [pc, #100]	@ (800ba50 <TIM_OC3_SetConfig+0x108>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d003      	beq.n	800b9f6 <TIM_OC3_SetConfig+0xae>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a18      	ldr	r2, [pc, #96]	@ (800ba54 <TIM_OC3_SetConfig+0x10c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d113      	bne.n	800ba1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	621a      	str	r2, [r3, #32]
}
 800ba38:	bf00      	nop
 800ba3a:	371c      	adds	r7, #28
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	40012c00 	.word	0x40012c00
 800ba48:	40013400 	.word	0x40013400
 800ba4c:	40014000 	.word	0x40014000
 800ba50:	40014400 	.word	0x40014400
 800ba54:	40014800 	.word	0x40014800

0800ba58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	031b      	lsls	r3, r3, #12
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a18      	ldr	r2, [pc, #96]	@ (800bb18 <TIM_OC4_SetConfig+0xc0>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d00f      	beq.n	800badc <TIM_OC4_SetConfig+0x84>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a17      	ldr	r2, [pc, #92]	@ (800bb1c <TIM_OC4_SetConfig+0xc4>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00b      	beq.n	800badc <TIM_OC4_SetConfig+0x84>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a16      	ldr	r2, [pc, #88]	@ (800bb20 <TIM_OC4_SetConfig+0xc8>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d007      	beq.n	800badc <TIM_OC4_SetConfig+0x84>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a15      	ldr	r2, [pc, #84]	@ (800bb24 <TIM_OC4_SetConfig+0xcc>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d003      	beq.n	800badc <TIM_OC4_SetConfig+0x84>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a14      	ldr	r2, [pc, #80]	@ (800bb28 <TIM_OC4_SetConfig+0xd0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d109      	bne.n	800baf0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	019b      	lsls	r3, r3, #6
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4313      	orrs	r3, r2
 800baee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	621a      	str	r2, [r3, #32]
}
 800bb0a:	bf00      	nop
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	40012c00 	.word	0x40012c00
 800bb1c:	40013400 	.word	0x40013400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800

0800bb2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bb70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	041b      	lsls	r3, r3, #16
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a17      	ldr	r2, [pc, #92]	@ (800bbe0 <TIM_OC5_SetConfig+0xb4>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d00f      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a16      	ldr	r2, [pc, #88]	@ (800bbe4 <TIM_OC5_SetConfig+0xb8>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d00b      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a15      	ldr	r2, [pc, #84]	@ (800bbe8 <TIM_OC5_SetConfig+0xbc>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d007      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a14      	ldr	r2, [pc, #80]	@ (800bbec <TIM_OC5_SetConfig+0xc0>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d003      	beq.n	800bba6 <TIM_OC5_SetConfig+0x7a>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a13      	ldr	r2, [pc, #76]	@ (800bbf0 <TIM_OC5_SetConfig+0xc4>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d109      	bne.n	800bbba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	021b      	lsls	r3, r3, #8
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	621a      	str	r2, [r3, #32]
}
 800bbd4:	bf00      	nop
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	40012c00 	.word	0x40012c00
 800bbe4:	40013400 	.word	0x40013400
 800bbe8:	40014000 	.word	0x40014000
 800bbec:	40014400 	.word	0x40014400
 800bbf0:	40014800 	.word	0x40014800

0800bbf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	021b      	lsls	r3, r3, #8
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	051b      	lsls	r3, r3, #20
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a18      	ldr	r2, [pc, #96]	@ (800bcac <TIM_OC6_SetConfig+0xb8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d00f      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a17      	ldr	r2, [pc, #92]	@ (800bcb0 <TIM_OC6_SetConfig+0xbc>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d00b      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a16      	ldr	r2, [pc, #88]	@ (800bcb4 <TIM_OC6_SetConfig+0xc0>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d007      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a15      	ldr	r2, [pc, #84]	@ (800bcb8 <TIM_OC6_SetConfig+0xc4>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d003      	beq.n	800bc70 <TIM_OC6_SetConfig+0x7c>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a14      	ldr	r2, [pc, #80]	@ (800bcbc <TIM_OC6_SetConfig+0xc8>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d109      	bne.n	800bc84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	029b      	lsls	r3, r3, #10
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	621a      	str	r2, [r3, #32]
}
 800bc9e:	bf00      	nop
 800bca0:	371c      	adds	r7, #28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	40012c00 	.word	0x40012c00
 800bcb0:	40013400 	.word	0x40013400
 800bcb4:	40014000 	.word	0x40014000
 800bcb8:	40014400 	.word	0x40014400
 800bcbc:	40014800 	.word	0x40014800

0800bcc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d101      	bne.n	800bcd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e068      	b.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a2e      	ldr	r2, [pc, #184]	@ (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d004      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a2d      	ldr	r2, [pc, #180]	@ (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d108      	bne.n	800bd1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bd12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a1e      	ldr	r2, [pc, #120]	@ (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d01d      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd4a:	d018      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a1b      	ldr	r2, [pc, #108]	@ (800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d013      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a1a      	ldr	r2, [pc, #104]	@ (800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00e      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a18      	ldr	r2, [pc, #96]	@ (800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d009      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a13      	ldr	r2, [pc, #76]	@ (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d004      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a14      	ldr	r2, [pc, #80]	@ (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d10c      	bne.n	800bd98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	40012c00 	.word	0x40012c00
 800bdbc:	40013400 	.word	0x40013400
 800bdc0:	40000400 	.word	0x40000400
 800bdc4:	40000800 	.word	0x40000800
 800bdc8:	40000c00 	.word	0x40000c00
 800bdcc:	40014000 	.word	0x40014000

0800bdd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d101      	bne.n	800bdec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bde8:	2302      	movs	r3, #2
 800bdea:	e065      	b.n	800beb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4313      	orrs	r3, r2
 800be2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	4313      	orrs	r3, r2
 800be38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	4313      	orrs	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	041b      	lsls	r3, r3, #16
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a16      	ldr	r2, [pc, #88]	@ (800bec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d004      	beq.n	800be7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a14      	ldr	r2, [pc, #80]	@ (800bec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d115      	bne.n	800bea6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be84:	051b      	lsls	r3, r3, #20
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	4313      	orrs	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	40012c00 	.word	0x40012c00
 800bec8:	40013400 	.word	0x40013400

0800becc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800becc:	b480      	push	{r7}
 800bece:	b08b      	sub	sp, #44	@ 0x2c
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d101      	bne.n	800beec <HAL_TIMEx_ConfigBreakInput+0x20>
 800bee8:	2302      	movs	r3, #2
 800beea:	e0af      	b.n	800c04c <HAL_TIMEx_ConfigBreakInput+0x180>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3b01      	subs	r3, #1
 800befa:	2b07      	cmp	r3, #7
 800befc:	d83a      	bhi.n	800bf74 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800befe:	a201      	add	r2, pc, #4	@ (adr r2, 800bf04 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bf25 	.word	0x0800bf25
 800bf08:	0800bf39 	.word	0x0800bf39
 800bf0c:	0800bf75 	.word	0x0800bf75
 800bf10:	0800bf4d 	.word	0x0800bf4d
 800bf14:	0800bf75 	.word	0x0800bf75
 800bf18:	0800bf75 	.word	0x0800bf75
 800bf1c:	0800bf75 	.word	0x0800bf75
 800bf20:	0800bf61 	.word	0x0800bf61
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800bf24:	2301      	movs	r3, #1
 800bf26:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800bf2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf30:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800bf32:	2309      	movs	r3, #9
 800bf34:	613b      	str	r3, [r7, #16]
      break;
 800bf36:	e026      	b.n	800bf86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800bf38:	2302      	movs	r3, #2
 800bf3a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800bf40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf44:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800bf46:	230a      	movs	r3, #10
 800bf48:	613b      	str	r3, [r7, #16]
      break;
 800bf4a:	e01c      	b.n	800bf86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800bf50:	2302      	movs	r3, #2
 800bf52:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800bf54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf58:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800bf5a:	230b      	movs	r3, #11
 800bf5c:	613b      	str	r3, [r7, #16]
      break;
 800bf5e:	e012      	b.n	800bf86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800bf60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf64:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800bf66:	2308      	movs	r3, #8
 800bf68:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	613b      	str	r3, [r7, #16]
      break;
 800bf72:	e008      	b.n	800bf86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	613b      	str	r3, [r7, #16]
      break;
 800bf84:	bf00      	nop
    }
  }

  switch (BreakInput)
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d003      	beq.n	800bf94 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d029      	beq.n	800bfe6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800bf92:	e051      	b.n	800c038 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf9a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	43db      	mvns	r3, r3
 800bfa0:	6a3a      	ldr	r2, [r7, #32]
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	409a      	lsls	r2, r3
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	6a3a      	ldr	r2, [r7, #32]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b08      	cmp	r3, #8
 800bfbe:	d00d      	beq.n	800bfdc <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	43db      	mvns	r3, r3
 800bfc4:	6a3a      	ldr	r2, [r7, #32]
 800bfc6:	4013      	ands	r3, r2
 800bfc8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	689a      	ldr	r2, [r3, #8]
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	409a      	lsls	r2, r3
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	6a3a      	ldr	r2, [r7, #32]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6a3a      	ldr	r2, [r7, #32]
 800bfe2:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800bfe4:	e02c      	b.n	800c040 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfec:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	43db      	mvns	r3, r3
 800bff2:	6a3a      	ldr	r2, [r7, #32]
 800bff4:	4013      	ands	r3, r2
 800bff6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	409a      	lsls	r2, r3
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	4013      	ands	r3, r2
 800c004:	6a3a      	ldr	r2, [r7, #32]
 800c006:	4313      	orrs	r3, r2
 800c008:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b08      	cmp	r3, #8
 800c010:	d00d      	beq.n	800c02e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	43db      	mvns	r3, r3
 800c016:	6a3a      	ldr	r2, [r7, #32]
 800c018:	4013      	ands	r3, r2
 800c01a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	409a      	lsls	r2, r3
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	4013      	ands	r3, r2
 800c028:	6a3a      	ldr	r2, [r7, #32]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6a3a      	ldr	r2, [r7, #32]
 800c034:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800c036:	e003      	b.n	800c040 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800c03e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	372c      	adds	r7, #44	@ 0x2c
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e042      	b.n	800c0f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7f6 fed5 	bl	8002e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2224      	movs	r2, #36	@ 0x24
 800c086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f022 0201 	bic.w	r2, r2, #1
 800c098:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fbb2 	bl	800c80c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f8b3 	bl	800c214 <UART_SetConfig>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d101      	bne.n	800c0b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e01b      	b.n	800c0f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	685a      	ldr	r2, [r3, #4]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	689a      	ldr	r2, [r3, #8]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c0d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0201 	orr.w	r2, r2, #1
 800c0e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fc31 	bl	800c950 <UART_CheckIdleState>
 800c0ee:	4603      	mov	r3, r0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	@ 0x28
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	4613      	mov	r3, r2
 800c106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c10e:	2b20      	cmp	r3, #32
 800c110:	d17b      	bne.n	800c20a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <HAL_UART_Transmit+0x26>
 800c118:	88fb      	ldrh	r3, [r7, #6]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e074      	b.n	800c20c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2221      	movs	r2, #33	@ 0x21
 800c12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c132:	f7f9 f9a7 	bl	8005484 <HAL_GetTick>
 800c136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	88fa      	ldrh	r2, [r7, #6]
 800c13c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	88fa      	ldrh	r2, [r7, #6]
 800c144:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c150:	d108      	bne.n	800c164 <HAL_UART_Transmit+0x6c>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d104      	bne.n	800c164 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	61bb      	str	r3, [r7, #24]
 800c162:	e003      	b.n	800c16c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c168:	2300      	movs	r3, #0
 800c16a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c16c:	e030      	b.n	800c1d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2200      	movs	r2, #0
 800c176:	2180      	movs	r1, #128	@ 0x80
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 fc93 	bl	800caa4 <UART_WaitOnFlagUntilTimeout>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2220      	movs	r2, #32
 800c188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e03d      	b.n	800c20c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10b      	bne.n	800c1ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	881a      	ldrh	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1a2:	b292      	uxth	r2, r2
 800c1a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	3302      	adds	r3, #2
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	e007      	b.n	800c1be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	781a      	ldrb	r2, [r3, #0]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1c8      	bne.n	800c16e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2140      	movs	r1, #64	@ 0x40
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 fc5c 	bl	800caa4 <UART_WaitOnFlagUntilTimeout>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d005      	beq.n	800c1fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2220      	movs	r2, #32
 800c1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e006      	b.n	800c20c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2220      	movs	r2, #32
 800c202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	e000      	b.n	800c20c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c20a:	2302      	movs	r3, #2
  }
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3720      	adds	r7, #32
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c218:	b08c      	sub	sp, #48	@ 0x30
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	689a      	ldr	r2, [r3, #8]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	431a      	orrs	r2, r3
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	431a      	orrs	r2, r3
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	4313      	orrs	r3, r2
 800c23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	4baa      	ldr	r3, [pc, #680]	@ (800c4ec <UART_SetConfig+0x2d8>)
 800c244:	4013      	ands	r3, r2
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	6812      	ldr	r2, [r2, #0]
 800c24a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c24c:	430b      	orrs	r3, r1
 800c24e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	68da      	ldr	r2, [r3, #12]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	430a      	orrs	r2, r1
 800c264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a9f      	ldr	r2, [pc, #636]	@ (800c4f0 <UART_SetConfig+0x2dc>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d004      	beq.n	800c280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c27c:	4313      	orrs	r3, r2
 800c27e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c28a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c294:	430b      	orrs	r3, r1
 800c296:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29e:	f023 010f 	bic.w	r1, r3, #15
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	430a      	orrs	r2, r1
 800c2ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a90      	ldr	r2, [pc, #576]	@ (800c4f4 <UART_SetConfig+0x2e0>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d125      	bne.n	800c304 <UART_SetConfig+0xf0>
 800c2b8:	4b8f      	ldr	r3, [pc, #572]	@ (800c4f8 <UART_SetConfig+0x2e4>)
 800c2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d81a      	bhi.n	800c2fc <UART_SetConfig+0xe8>
 800c2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2cc <UART_SetConfig+0xb8>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c2dd 	.word	0x0800c2dd
 800c2d0:	0800c2ed 	.word	0x0800c2ed
 800c2d4:	0800c2e5 	.word	0x0800c2e5
 800c2d8:	0800c2f5 	.word	0x0800c2f5
 800c2dc:	2301      	movs	r3, #1
 800c2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2e2:	e116      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2ea:	e112      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c2ec:	2304      	movs	r3, #4
 800c2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2f2:	e10e      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c2f4:	2308      	movs	r3, #8
 800c2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2fa:	e10a      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c2fc:	2310      	movs	r3, #16
 800c2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c302:	e106      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a7c      	ldr	r2, [pc, #496]	@ (800c4fc <UART_SetConfig+0x2e8>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d138      	bne.n	800c380 <UART_SetConfig+0x16c>
 800c30e:	4b7a      	ldr	r3, [pc, #488]	@ (800c4f8 <UART_SetConfig+0x2e4>)
 800c310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c314:	f003 030c 	and.w	r3, r3, #12
 800c318:	2b0c      	cmp	r3, #12
 800c31a:	d82d      	bhi.n	800c378 <UART_SetConfig+0x164>
 800c31c:	a201      	add	r2, pc, #4	@ (adr r2, 800c324 <UART_SetConfig+0x110>)
 800c31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c322:	bf00      	nop
 800c324:	0800c359 	.word	0x0800c359
 800c328:	0800c379 	.word	0x0800c379
 800c32c:	0800c379 	.word	0x0800c379
 800c330:	0800c379 	.word	0x0800c379
 800c334:	0800c369 	.word	0x0800c369
 800c338:	0800c379 	.word	0x0800c379
 800c33c:	0800c379 	.word	0x0800c379
 800c340:	0800c379 	.word	0x0800c379
 800c344:	0800c361 	.word	0x0800c361
 800c348:	0800c379 	.word	0x0800c379
 800c34c:	0800c379 	.word	0x0800c379
 800c350:	0800c379 	.word	0x0800c379
 800c354:	0800c371 	.word	0x0800c371
 800c358:	2300      	movs	r3, #0
 800c35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c35e:	e0d8      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c360:	2302      	movs	r3, #2
 800c362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c366:	e0d4      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c368:	2304      	movs	r3, #4
 800c36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c36e:	e0d0      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c370:	2308      	movs	r3, #8
 800c372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c376:	e0cc      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c378:	2310      	movs	r3, #16
 800c37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c37e:	e0c8      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a5e      	ldr	r2, [pc, #376]	@ (800c500 <UART_SetConfig+0x2ec>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d125      	bne.n	800c3d6 <UART_SetConfig+0x1c2>
 800c38a:	4b5b      	ldr	r3, [pc, #364]	@ (800c4f8 <UART_SetConfig+0x2e4>)
 800c38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c390:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c394:	2b30      	cmp	r3, #48	@ 0x30
 800c396:	d016      	beq.n	800c3c6 <UART_SetConfig+0x1b2>
 800c398:	2b30      	cmp	r3, #48	@ 0x30
 800c39a:	d818      	bhi.n	800c3ce <UART_SetConfig+0x1ba>
 800c39c:	2b20      	cmp	r3, #32
 800c39e:	d00a      	beq.n	800c3b6 <UART_SetConfig+0x1a2>
 800c3a0:	2b20      	cmp	r3, #32
 800c3a2:	d814      	bhi.n	800c3ce <UART_SetConfig+0x1ba>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <UART_SetConfig+0x19a>
 800c3a8:	2b10      	cmp	r3, #16
 800c3aa:	d008      	beq.n	800c3be <UART_SetConfig+0x1aa>
 800c3ac:	e00f      	b.n	800c3ce <UART_SetConfig+0x1ba>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3b4:	e0ad      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3bc:	e0a9      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c3be:	2304      	movs	r3, #4
 800c3c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3c4:	e0a5      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3cc:	e0a1      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c3ce:	2310      	movs	r3, #16
 800c3d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3d4:	e09d      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a4a      	ldr	r2, [pc, #296]	@ (800c504 <UART_SetConfig+0x2f0>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d125      	bne.n	800c42c <UART_SetConfig+0x218>
 800c3e0:	4b45      	ldr	r3, [pc, #276]	@ (800c4f8 <UART_SetConfig+0x2e4>)
 800c3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c3ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3ec:	d016      	beq.n	800c41c <UART_SetConfig+0x208>
 800c3ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3f0:	d818      	bhi.n	800c424 <UART_SetConfig+0x210>
 800c3f2:	2b80      	cmp	r3, #128	@ 0x80
 800c3f4:	d00a      	beq.n	800c40c <UART_SetConfig+0x1f8>
 800c3f6:	2b80      	cmp	r3, #128	@ 0x80
 800c3f8:	d814      	bhi.n	800c424 <UART_SetConfig+0x210>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <UART_SetConfig+0x1f0>
 800c3fe:	2b40      	cmp	r3, #64	@ 0x40
 800c400:	d008      	beq.n	800c414 <UART_SetConfig+0x200>
 800c402:	e00f      	b.n	800c424 <UART_SetConfig+0x210>
 800c404:	2300      	movs	r3, #0
 800c406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c40a:	e082      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c40c:	2302      	movs	r3, #2
 800c40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c412:	e07e      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c414:	2304      	movs	r3, #4
 800c416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c41a:	e07a      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c41c:	2308      	movs	r3, #8
 800c41e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c422:	e076      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c424:	2310      	movs	r3, #16
 800c426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c42a:	e072      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a35      	ldr	r2, [pc, #212]	@ (800c508 <UART_SetConfig+0x2f4>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d12a      	bne.n	800c48c <UART_SetConfig+0x278>
 800c436:	4b30      	ldr	r3, [pc, #192]	@ (800c4f8 <UART_SetConfig+0x2e4>)
 800c438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c43c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c444:	d01a      	beq.n	800c47c <UART_SetConfig+0x268>
 800c446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c44a:	d81b      	bhi.n	800c484 <UART_SetConfig+0x270>
 800c44c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c450:	d00c      	beq.n	800c46c <UART_SetConfig+0x258>
 800c452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c456:	d815      	bhi.n	800c484 <UART_SetConfig+0x270>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <UART_SetConfig+0x250>
 800c45c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c460:	d008      	beq.n	800c474 <UART_SetConfig+0x260>
 800c462:	e00f      	b.n	800c484 <UART_SetConfig+0x270>
 800c464:	2300      	movs	r3, #0
 800c466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c46a:	e052      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c46c:	2302      	movs	r3, #2
 800c46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c472:	e04e      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c474:	2304      	movs	r3, #4
 800c476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c47a:	e04a      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c47c:	2308      	movs	r3, #8
 800c47e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c482:	e046      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c484:	2310      	movs	r3, #16
 800c486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c48a:	e042      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a17      	ldr	r2, [pc, #92]	@ (800c4f0 <UART_SetConfig+0x2dc>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d13a      	bne.n	800c50c <UART_SetConfig+0x2f8>
 800c496:	4b18      	ldr	r3, [pc, #96]	@ (800c4f8 <UART_SetConfig+0x2e4>)
 800c498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c49c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c4a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c4a4:	d01a      	beq.n	800c4dc <UART_SetConfig+0x2c8>
 800c4a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c4aa:	d81b      	bhi.n	800c4e4 <UART_SetConfig+0x2d0>
 800c4ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4b0:	d00c      	beq.n	800c4cc <UART_SetConfig+0x2b8>
 800c4b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4b6:	d815      	bhi.n	800c4e4 <UART_SetConfig+0x2d0>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <UART_SetConfig+0x2b0>
 800c4bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4c0:	d008      	beq.n	800c4d4 <UART_SetConfig+0x2c0>
 800c4c2:	e00f      	b.n	800c4e4 <UART_SetConfig+0x2d0>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ca:	e022      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4d2:	e01e      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c4d4:	2304      	movs	r3, #4
 800c4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4da:	e01a      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c4dc:	2308      	movs	r3, #8
 800c4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4e2:	e016      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c4e4:	2310      	movs	r3, #16
 800c4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ea:	e012      	b.n	800c512 <UART_SetConfig+0x2fe>
 800c4ec:	cfff69f3 	.word	0xcfff69f3
 800c4f0:	40008000 	.word	0x40008000
 800c4f4:	40013800 	.word	0x40013800
 800c4f8:	40021000 	.word	0x40021000
 800c4fc:	40004400 	.word	0x40004400
 800c500:	40004800 	.word	0x40004800
 800c504:	40004c00 	.word	0x40004c00
 800c508:	40005000 	.word	0x40005000
 800c50c:	2310      	movs	r3, #16
 800c50e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4aae      	ldr	r2, [pc, #696]	@ (800c7d0 <UART_SetConfig+0x5bc>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	f040 8097 	bne.w	800c64c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c51e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c522:	2b08      	cmp	r3, #8
 800c524:	d823      	bhi.n	800c56e <UART_SetConfig+0x35a>
 800c526:	a201      	add	r2, pc, #4	@ (adr r2, 800c52c <UART_SetConfig+0x318>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c551 	.word	0x0800c551
 800c530:	0800c56f 	.word	0x0800c56f
 800c534:	0800c559 	.word	0x0800c559
 800c538:	0800c56f 	.word	0x0800c56f
 800c53c:	0800c55f 	.word	0x0800c55f
 800c540:	0800c56f 	.word	0x0800c56f
 800c544:	0800c56f 	.word	0x0800c56f
 800c548:	0800c56f 	.word	0x0800c56f
 800c54c:	0800c567 	.word	0x0800c567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c550:	f7fc f88c 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 800c554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c556:	e010      	b.n	800c57a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c558:	4b9e      	ldr	r3, [pc, #632]	@ (800c7d4 <UART_SetConfig+0x5c0>)
 800c55a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c55c:	e00d      	b.n	800c57a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c55e:	f7fb ffed 	bl	800853c <HAL_RCC_GetSysClockFreq>
 800c562:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c564:	e009      	b.n	800c57a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c56a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c56c:	e005      	b.n	800c57a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c56e:	2300      	movs	r3, #0
 800c570:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 8130 	beq.w	800c7e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c586:	4a94      	ldr	r2, [pc, #592]	@ (800c7d8 <UART_SetConfig+0x5c4>)
 800c588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c58c:	461a      	mov	r2, r3
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	fbb3 f3f2 	udiv	r3, r3, r2
 800c594:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	4613      	mov	r3, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	69ba      	ldr	r2, [r7, #24]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d305      	bcc.n	800c5b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d903      	bls.n	800c5ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c5b8:	e113      	b.n	800c7e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5bc:	2200      	movs	r2, #0
 800c5be:	60bb      	str	r3, [r7, #8]
 800c5c0:	60fa      	str	r2, [r7, #12]
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c6:	4a84      	ldr	r2, [pc, #528]	@ (800c7d8 <UART_SetConfig+0x5c4>)
 800c5c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	603b      	str	r3, [r7, #0]
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5dc:	f7f4 fafc 	bl	8000bd8 <__aeabi_uldivmod>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	f04f 0200 	mov.w	r2, #0
 800c5ec:	f04f 0300 	mov.w	r3, #0
 800c5f0:	020b      	lsls	r3, r1, #8
 800c5f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5f6:	0202      	lsls	r2, r0, #8
 800c5f8:	6979      	ldr	r1, [r7, #20]
 800c5fa:	6849      	ldr	r1, [r1, #4]
 800c5fc:	0849      	lsrs	r1, r1, #1
 800c5fe:	2000      	movs	r0, #0
 800c600:	460c      	mov	r4, r1
 800c602:	4605      	mov	r5, r0
 800c604:	eb12 0804 	adds.w	r8, r2, r4
 800c608:	eb43 0905 	adc.w	r9, r3, r5
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	469a      	mov	sl, r3
 800c614:	4693      	mov	fp, r2
 800c616:	4652      	mov	r2, sl
 800c618:	465b      	mov	r3, fp
 800c61a:	4640      	mov	r0, r8
 800c61c:	4649      	mov	r1, r9
 800c61e:	f7f4 fadb 	bl	8000bd8 <__aeabi_uldivmod>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	4613      	mov	r3, r2
 800c628:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c630:	d308      	bcc.n	800c644 <UART_SetConfig+0x430>
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c638:	d204      	bcs.n	800c644 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6a3a      	ldr	r2, [r7, #32]
 800c640:	60da      	str	r2, [r3, #12]
 800c642:	e0ce      	b.n	800c7e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c644:	2301      	movs	r3, #1
 800c646:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c64a:	e0ca      	b.n	800c7e2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c654:	d166      	bne.n	800c724 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c656:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c65a:	2b08      	cmp	r3, #8
 800c65c:	d827      	bhi.n	800c6ae <UART_SetConfig+0x49a>
 800c65e:	a201      	add	r2, pc, #4	@ (adr r2, 800c664 <UART_SetConfig+0x450>)
 800c660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c664:	0800c689 	.word	0x0800c689
 800c668:	0800c691 	.word	0x0800c691
 800c66c:	0800c699 	.word	0x0800c699
 800c670:	0800c6af 	.word	0x0800c6af
 800c674:	0800c69f 	.word	0x0800c69f
 800c678:	0800c6af 	.word	0x0800c6af
 800c67c:	0800c6af 	.word	0x0800c6af
 800c680:	0800c6af 	.word	0x0800c6af
 800c684:	0800c6a7 	.word	0x0800c6a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c688:	f7fb fff0 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 800c68c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c68e:	e014      	b.n	800c6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c690:	f7fc f802 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 800c694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c696:	e010      	b.n	800c6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c698:	4b4e      	ldr	r3, [pc, #312]	@ (800c7d4 <UART_SetConfig+0x5c0>)
 800c69a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c69c:	e00d      	b.n	800c6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c69e:	f7fb ff4d 	bl	800853c <HAL_RCC_GetSysClockFreq>
 800c6a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6a4:	e009      	b.n	800c6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c6ac:	e005      	b.n	800c6ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c6b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 8090 	beq.w	800c7e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c6:	4a44      	ldr	r2, [pc, #272]	@ (800c7d8 <UART_SetConfig+0x5c4>)
 800c6c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6d4:	005a      	lsls	r2, r3, #1
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	085b      	lsrs	r3, r3, #1
 800c6dc:	441a      	add	r2, r3
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	2b0f      	cmp	r3, #15
 800c6ec:	d916      	bls.n	800c71c <UART_SetConfig+0x508>
 800c6ee:	6a3b      	ldr	r3, [r7, #32]
 800c6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6f4:	d212      	bcs.n	800c71c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	f023 030f 	bic.w	r3, r3, #15
 800c6fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c700:	6a3b      	ldr	r3, [r7, #32]
 800c702:	085b      	lsrs	r3, r3, #1
 800c704:	b29b      	uxth	r3, r3
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	8bfb      	ldrh	r3, [r7, #30]
 800c70e:	4313      	orrs	r3, r2
 800c710:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	8bfa      	ldrh	r2, [r7, #30]
 800c718:	60da      	str	r2, [r3, #12]
 800c71a:	e062      	b.n	800c7e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c722:	e05e      	b.n	800c7e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c724:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c728:	2b08      	cmp	r3, #8
 800c72a:	d828      	bhi.n	800c77e <UART_SetConfig+0x56a>
 800c72c:	a201      	add	r2, pc, #4	@ (adr r2, 800c734 <UART_SetConfig+0x520>)
 800c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c732:	bf00      	nop
 800c734:	0800c759 	.word	0x0800c759
 800c738:	0800c761 	.word	0x0800c761
 800c73c:	0800c769 	.word	0x0800c769
 800c740:	0800c77f 	.word	0x0800c77f
 800c744:	0800c76f 	.word	0x0800c76f
 800c748:	0800c77f 	.word	0x0800c77f
 800c74c:	0800c77f 	.word	0x0800c77f
 800c750:	0800c77f 	.word	0x0800c77f
 800c754:	0800c777 	.word	0x0800c777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c758:	f7fb ff88 	bl	800866c <HAL_RCC_GetPCLK1Freq>
 800c75c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c75e:	e014      	b.n	800c78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c760:	f7fb ff9a 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 800c764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c766:	e010      	b.n	800c78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c768:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d4 <UART_SetConfig+0x5c0>)
 800c76a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c76c:	e00d      	b.n	800c78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c76e:	f7fb fee5 	bl	800853c <HAL_RCC_GetSysClockFreq>
 800c772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c774:	e009      	b.n	800c78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c77a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c77c:	e005      	b.n	800c78a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c77e:	2300      	movs	r3, #0
 800c780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c788:	bf00      	nop
    }

    if (pclk != 0U)
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d028      	beq.n	800c7e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c794:	4a10      	ldr	r2, [pc, #64]	@ (800c7d8 <UART_SetConfig+0x5c4>)
 800c796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c79a:	461a      	mov	r2, r3
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	441a      	add	r2, r3
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	2b0f      	cmp	r3, #15
 800c7b8:	d910      	bls.n	800c7dc <UART_SetConfig+0x5c8>
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7c0:	d20c      	bcs.n	800c7dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60da      	str	r2, [r3, #12]
 800c7cc:	e009      	b.n	800c7e2 <UART_SetConfig+0x5ce>
 800c7ce:	bf00      	nop
 800c7d0:	40008000 	.word	0x40008000
 800c7d4:	00f42400 	.word	0x00f42400
 800c7d8:	08014cd4 	.word	0x08014cd4
      }
      else
      {
        ret = HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c802:	4618      	mov	r0, r3
 800c804:	3730      	adds	r7, #48	@ 0x30
 800c806:	46bd      	mov	sp, r7
 800c808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c80c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c818:	f003 0308 	and.w	r3, r3, #8
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00a      	beq.n	800c836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c85c:	f003 0302 	and.w	r3, r3, #2
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87e:	f003 0304 	and.w	r3, r3, #4
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	430a      	orrs	r2, r1
 800c89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00a      	beq.n	800c8be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c2:	f003 0320 	and.w	r3, r3, #32
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01a      	beq.n	800c922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c90a:	d10a      	bne.n	800c922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	430a      	orrs	r2, r1
 800c920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00a      	beq.n	800c944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	430a      	orrs	r2, r1
 800c942:	605a      	str	r2, [r3, #4]
  }
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b098      	sub	sp, #96	@ 0x60
 800c954:	af02      	add	r7, sp, #8
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c960:	f7f8 fd90 	bl	8005484 <HAL_GetTick>
 800c964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 0308 	and.w	r3, r3, #8
 800c970:	2b08      	cmp	r3, #8
 800c972:	d12f      	bne.n	800c9d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c97c:	2200      	movs	r2, #0
 800c97e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f88e 	bl	800caa4 <UART_WaitOnFlagUntilTimeout>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d022      	beq.n	800c9d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c996:	e853 3f00 	ldrex	r3, [r3]
 800c99a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c99e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9b4:	e841 2300 	strex	r3, r2, [r1]
 800c9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1e6      	bne.n	800c98e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	e063      	b.n	800ca9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0304 	and.w	r3, r3, #4
 800c9de:	2b04      	cmp	r3, #4
 800c9e0:	d149      	bne.n	800ca76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f857 	bl	800caa4 <UART_WaitOnFlagUntilTimeout>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d03c      	beq.n	800ca76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca04:	e853 3f00 	ldrex	r3, [r3]
 800ca08:	623b      	str	r3, [r7, #32]
   return(result);
 800ca0a:	6a3b      	ldr	r3, [r7, #32]
 800ca0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca22:	e841 2300 	strex	r3, r2, [r1]
 800ca26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1e6      	bne.n	800c9fc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3308      	adds	r3, #8
 800ca34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	e853 3f00 	ldrex	r3, [r3]
 800ca3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f023 0301 	bic.w	r3, r3, #1
 800ca44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca4e:	61fa      	str	r2, [r7, #28]
 800ca50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca52:	69b9      	ldr	r1, [r7, #24]
 800ca54:	69fa      	ldr	r2, [r7, #28]
 800ca56:	e841 2300 	strex	r3, r2, [r1]
 800ca5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1e5      	bne.n	800ca2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2220      	movs	r2, #32
 800ca66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e012      	b.n	800ca9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2220      	movs	r2, #32
 800ca7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3758      	adds	r7, #88	@ 0x58
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	603b      	str	r3, [r7, #0]
 800cab0:	4613      	mov	r3, r2
 800cab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cab4:	e049      	b.n	800cb4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabc:	d045      	beq.n	800cb4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cabe:	f7f8 fce1 	bl	8005484 <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d302      	bcc.n	800cad4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e048      	b.n	800cb6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 0304 	and.w	r3, r3, #4
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d031      	beq.n	800cb4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	f003 0308 	and.w	r3, r3, #8
 800caf0:	2b08      	cmp	r3, #8
 800caf2:	d110      	bne.n	800cb16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2208      	movs	r2, #8
 800cafa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f000 f838 	bl	800cb72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2208      	movs	r2, #8
 800cb06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e029      	b.n	800cb6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	69db      	ldr	r3, [r3, #28]
 800cb1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb24:	d111      	bne.n	800cb4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f000 f81e 	bl	800cb72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e00f      	b.n	800cb6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	69da      	ldr	r2, [r3, #28]
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	4013      	ands	r3, r2
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	bf0c      	ite	eq
 800cb5a:	2301      	moveq	r3, #1
 800cb5c:	2300      	movne	r3, #0
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	461a      	mov	r2, r3
 800cb62:	79fb      	ldrb	r3, [r7, #7]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d0a6      	beq.n	800cab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b095      	sub	sp, #84	@ 0x54
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb82:	e853 3f00 	ldrex	r3, [r3]
 800cb86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb98:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cba0:	e841 2300 	strex	r3, r2, [r1]
 800cba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e6      	bne.n	800cb7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	e853 3f00 	ldrex	r3, [r3]
 800cbba:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cbc2:	f023 0301 	bic.w	r3, r3, #1
 800cbc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbd8:	e841 2300 	strex	r3, r2, [r1]
 800cbdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e3      	bne.n	800cbac <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d118      	bne.n	800cc1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	e853 3f00 	ldrex	r3, [r3]
 800cbf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	f023 0310 	bic.w	r3, r3, #16
 800cc00:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc0a:	61bb      	str	r3, [r7, #24]
 800cc0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0e:	6979      	ldr	r1, [r7, #20]
 800cc10:	69ba      	ldr	r2, [r7, #24]
 800cc12:	e841 2300 	strex	r3, r2, [r1]
 800cc16:	613b      	str	r3, [r7, #16]
   return(result);
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1e6      	bne.n	800cbec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2220      	movs	r2, #32
 800cc22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc32:	bf00      	nop
 800cc34:	3754      	adds	r7, #84	@ 0x54
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b085      	sub	sp, #20
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d101      	bne.n	800cc54 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc50:	2302      	movs	r3, #2
 800cc52:	e027      	b.n	800cca4 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2224      	movs	r2, #36	@ 0x24
 800cc60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f022 0201 	bic.w	r2, r2, #1
 800cc7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cc82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2220      	movs	r2, #32
 800cc96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d101      	bne.n	800ccc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e02d      	b.n	800cd24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2224      	movs	r2, #36	@ 0x24
 800ccd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f022 0201 	bic.w	r2, r2, #1
 800ccee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	430a      	orrs	r2, r1
 800cd02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f84f 	bl	800cda8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2220      	movs	r2, #32
 800cd16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d101      	bne.n	800cd44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd40:	2302      	movs	r3, #2
 800cd42:	e02d      	b.n	800cda0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2224      	movs	r2, #36	@ 0x24
 800cd50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f022 0201 	bic.w	r2, r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f811 	bl	800cda8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d108      	bne.n	800cdca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cdc8:	e031      	b.n	800ce2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cdca:	2308      	movs	r3, #8
 800cdcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cdce:	2308      	movs	r3, #8
 800cdd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	0e5b      	lsrs	r3, r3, #25
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	f003 0307 	and.w	r3, r3, #7
 800cde0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	0f5b      	lsrs	r3, r3, #29
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	f003 0307 	and.w	r3, r3, #7
 800cdf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
 800cdf4:	7b3a      	ldrb	r2, [r7, #12]
 800cdf6:	4911      	ldr	r1, [pc, #68]	@ (800ce3c <UARTEx_SetNbDataToProcess+0x94>)
 800cdf8:	5c8a      	ldrb	r2, [r1, r2]
 800cdfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdfe:	7b3a      	ldrb	r2, [r7, #12]
 800ce00:	490f      	ldr	r1, [pc, #60]	@ (800ce40 <UARTEx_SetNbDataToProcess+0x98>)
 800ce02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	7b7a      	ldrb	r2, [r7, #13]
 800ce14:	4909      	ldr	r1, [pc, #36]	@ (800ce3c <UARTEx_SetNbDataToProcess+0x94>)
 800ce16:	5c8a      	ldrb	r2, [r1, r2]
 800ce18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce1c:	7b7a      	ldrb	r2, [r7, #13]
 800ce1e:	4908      	ldr	r1, [pc, #32]	@ (800ce40 <UARTEx_SetNbDataToProcess+0x98>)
 800ce20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce22:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ce2e:	bf00      	nop
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	08014cec 	.word	0x08014cec
 800ce40:	08014cf4 	.word	0x08014cf4

0800ce44 <malloc>:
 800ce44:	4b02      	ldr	r3, [pc, #8]	@ (800ce50 <malloc+0xc>)
 800ce46:	4601      	mov	r1, r0
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f000 b825 	b.w	800ce98 <_malloc_r>
 800ce4e:	bf00      	nop
 800ce50:	20000038 	.word	0x20000038

0800ce54 <sbrk_aligned>:
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	4e0f      	ldr	r6, [pc, #60]	@ (800ce94 <sbrk_aligned+0x40>)
 800ce58:	460c      	mov	r4, r1
 800ce5a:	6831      	ldr	r1, [r6, #0]
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	b911      	cbnz	r1, 800ce66 <sbrk_aligned+0x12>
 800ce60:	f000 fe5e 	bl	800db20 <_sbrk_r>
 800ce64:	6030      	str	r0, [r6, #0]
 800ce66:	4621      	mov	r1, r4
 800ce68:	4628      	mov	r0, r5
 800ce6a:	f000 fe59 	bl	800db20 <_sbrk_r>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d103      	bne.n	800ce7a <sbrk_aligned+0x26>
 800ce72:	f04f 34ff 	mov.w	r4, #4294967295
 800ce76:	4620      	mov	r0, r4
 800ce78:	bd70      	pop	{r4, r5, r6, pc}
 800ce7a:	1cc4      	adds	r4, r0, #3
 800ce7c:	f024 0403 	bic.w	r4, r4, #3
 800ce80:	42a0      	cmp	r0, r4
 800ce82:	d0f8      	beq.n	800ce76 <sbrk_aligned+0x22>
 800ce84:	1a21      	subs	r1, r4, r0
 800ce86:	4628      	mov	r0, r5
 800ce88:	f000 fe4a 	bl	800db20 <_sbrk_r>
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d1f2      	bne.n	800ce76 <sbrk_aligned+0x22>
 800ce90:	e7ef      	b.n	800ce72 <sbrk_aligned+0x1e>
 800ce92:	bf00      	nop
 800ce94:	200009f4 	.word	0x200009f4

0800ce98 <_malloc_r>:
 800ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce9c:	1ccd      	adds	r5, r1, #3
 800ce9e:	f025 0503 	bic.w	r5, r5, #3
 800cea2:	3508      	adds	r5, #8
 800cea4:	2d0c      	cmp	r5, #12
 800cea6:	bf38      	it	cc
 800cea8:	250c      	movcc	r5, #12
 800ceaa:	2d00      	cmp	r5, #0
 800ceac:	4606      	mov	r6, r0
 800ceae:	db01      	blt.n	800ceb4 <_malloc_r+0x1c>
 800ceb0:	42a9      	cmp	r1, r5
 800ceb2:	d904      	bls.n	800cebe <_malloc_r+0x26>
 800ceb4:	230c      	movs	r3, #12
 800ceb6:	6033      	str	r3, [r6, #0]
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf94 <_malloc_r+0xfc>
 800cec2:	f000 f869 	bl	800cf98 <__malloc_lock>
 800cec6:	f8d8 3000 	ldr.w	r3, [r8]
 800ceca:	461c      	mov	r4, r3
 800cecc:	bb44      	cbnz	r4, 800cf20 <_malloc_r+0x88>
 800cece:	4629      	mov	r1, r5
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff ffbf 	bl	800ce54 <sbrk_aligned>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	4604      	mov	r4, r0
 800ceda:	d158      	bne.n	800cf8e <_malloc_r+0xf6>
 800cedc:	f8d8 4000 	ldr.w	r4, [r8]
 800cee0:	4627      	mov	r7, r4
 800cee2:	2f00      	cmp	r7, #0
 800cee4:	d143      	bne.n	800cf6e <_malloc_r+0xd6>
 800cee6:	2c00      	cmp	r4, #0
 800cee8:	d04b      	beq.n	800cf82 <_malloc_r+0xea>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	4639      	mov	r1, r7
 800ceee:	4630      	mov	r0, r6
 800cef0:	eb04 0903 	add.w	r9, r4, r3
 800cef4:	f000 fe14 	bl	800db20 <_sbrk_r>
 800cef8:	4581      	cmp	r9, r0
 800cefa:	d142      	bne.n	800cf82 <_malloc_r+0xea>
 800cefc:	6821      	ldr	r1, [r4, #0]
 800cefe:	1a6d      	subs	r5, r5, r1
 800cf00:	4629      	mov	r1, r5
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7ff ffa6 	bl	800ce54 <sbrk_aligned>
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d03a      	beq.n	800cf82 <_malloc_r+0xea>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	442b      	add	r3, r5
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	f8d8 3000 	ldr.w	r3, [r8]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	bb62      	cbnz	r2, 800cf74 <_malloc_r+0xdc>
 800cf1a:	f8c8 7000 	str.w	r7, [r8]
 800cf1e:	e00f      	b.n	800cf40 <_malloc_r+0xa8>
 800cf20:	6822      	ldr	r2, [r4, #0]
 800cf22:	1b52      	subs	r2, r2, r5
 800cf24:	d420      	bmi.n	800cf68 <_malloc_r+0xd0>
 800cf26:	2a0b      	cmp	r2, #11
 800cf28:	d917      	bls.n	800cf5a <_malloc_r+0xc2>
 800cf2a:	1961      	adds	r1, r4, r5
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	6025      	str	r5, [r4, #0]
 800cf30:	bf18      	it	ne
 800cf32:	6059      	strne	r1, [r3, #4]
 800cf34:	6863      	ldr	r3, [r4, #4]
 800cf36:	bf08      	it	eq
 800cf38:	f8c8 1000 	streq.w	r1, [r8]
 800cf3c:	5162      	str	r2, [r4, r5]
 800cf3e:	604b      	str	r3, [r1, #4]
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 f82f 	bl	800cfa4 <__malloc_unlock>
 800cf46:	f104 000b 	add.w	r0, r4, #11
 800cf4a:	1d23      	adds	r3, r4, #4
 800cf4c:	f020 0007 	bic.w	r0, r0, #7
 800cf50:	1ac2      	subs	r2, r0, r3
 800cf52:	bf1c      	itt	ne
 800cf54:	1a1b      	subne	r3, r3, r0
 800cf56:	50a3      	strne	r3, [r4, r2]
 800cf58:	e7af      	b.n	800ceba <_malloc_r+0x22>
 800cf5a:	6862      	ldr	r2, [r4, #4]
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	bf0c      	ite	eq
 800cf60:	f8c8 2000 	streq.w	r2, [r8]
 800cf64:	605a      	strne	r2, [r3, #4]
 800cf66:	e7eb      	b.n	800cf40 <_malloc_r+0xa8>
 800cf68:	4623      	mov	r3, r4
 800cf6a:	6864      	ldr	r4, [r4, #4]
 800cf6c:	e7ae      	b.n	800cecc <_malloc_r+0x34>
 800cf6e:	463c      	mov	r4, r7
 800cf70:	687f      	ldr	r7, [r7, #4]
 800cf72:	e7b6      	b.n	800cee2 <_malloc_r+0x4a>
 800cf74:	461a      	mov	r2, r3
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	42a3      	cmp	r3, r4
 800cf7a:	d1fb      	bne.n	800cf74 <_malloc_r+0xdc>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6053      	str	r3, [r2, #4]
 800cf80:	e7de      	b.n	800cf40 <_malloc_r+0xa8>
 800cf82:	230c      	movs	r3, #12
 800cf84:	6033      	str	r3, [r6, #0]
 800cf86:	4630      	mov	r0, r6
 800cf88:	f000 f80c 	bl	800cfa4 <__malloc_unlock>
 800cf8c:	e794      	b.n	800ceb8 <_malloc_r+0x20>
 800cf8e:	6005      	str	r5, [r0, #0]
 800cf90:	e7d6      	b.n	800cf40 <_malloc_r+0xa8>
 800cf92:	bf00      	nop
 800cf94:	200009f8 	.word	0x200009f8

0800cf98 <__malloc_lock>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__malloc_lock+0x8>)
 800cf9a:	f000 be0e 	b.w	800dbba <__retarget_lock_acquire_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	20000b3c 	.word	0x20000b3c

0800cfa4 <__malloc_unlock>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	@ (800cfac <__malloc_unlock+0x8>)
 800cfa6:	f000 be09 	b.w	800dbbc <__retarget_lock_release_recursive>
 800cfaa:	bf00      	nop
 800cfac:	20000b3c 	.word	0x20000b3c

0800cfb0 <__cvt>:
 800cfb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb4:	ec57 6b10 	vmov	r6, r7, d0
 800cfb8:	2f00      	cmp	r7, #0
 800cfba:	460c      	mov	r4, r1
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	463b      	mov	r3, r7
 800cfc0:	bfbb      	ittet	lt
 800cfc2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cfc6:	461f      	movlt	r7, r3
 800cfc8:	2300      	movge	r3, #0
 800cfca:	232d      	movlt	r3, #45	@ 0x2d
 800cfcc:	700b      	strb	r3, [r1, #0]
 800cfce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfd0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cfd4:	4691      	mov	r9, r2
 800cfd6:	f023 0820 	bic.w	r8, r3, #32
 800cfda:	bfbc      	itt	lt
 800cfdc:	4632      	movlt	r2, r6
 800cfde:	4616      	movlt	r6, r2
 800cfe0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cfe4:	d005      	beq.n	800cff2 <__cvt+0x42>
 800cfe6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cfea:	d100      	bne.n	800cfee <__cvt+0x3e>
 800cfec:	3401      	adds	r4, #1
 800cfee:	2102      	movs	r1, #2
 800cff0:	e000      	b.n	800cff4 <__cvt+0x44>
 800cff2:	2103      	movs	r1, #3
 800cff4:	ab03      	add	r3, sp, #12
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	ab02      	add	r3, sp, #8
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	ec47 6b10 	vmov	d0, r6, r7
 800d000:	4653      	mov	r3, sl
 800d002:	4622      	mov	r2, r4
 800d004:	f000 fe74 	bl	800dcf0 <_dtoa_r>
 800d008:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d00c:	4605      	mov	r5, r0
 800d00e:	d119      	bne.n	800d044 <__cvt+0x94>
 800d010:	f019 0f01 	tst.w	r9, #1
 800d014:	d00e      	beq.n	800d034 <__cvt+0x84>
 800d016:	eb00 0904 	add.w	r9, r0, r4
 800d01a:	2200      	movs	r2, #0
 800d01c:	2300      	movs	r3, #0
 800d01e:	4630      	mov	r0, r6
 800d020:	4639      	mov	r1, r7
 800d022:	f7f3 fd69 	bl	8000af8 <__aeabi_dcmpeq>
 800d026:	b108      	cbz	r0, 800d02c <__cvt+0x7c>
 800d028:	f8cd 900c 	str.w	r9, [sp, #12]
 800d02c:	2230      	movs	r2, #48	@ 0x30
 800d02e:	9b03      	ldr	r3, [sp, #12]
 800d030:	454b      	cmp	r3, r9
 800d032:	d31e      	bcc.n	800d072 <__cvt+0xc2>
 800d034:	9b03      	ldr	r3, [sp, #12]
 800d036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d038:	1b5b      	subs	r3, r3, r5
 800d03a:	4628      	mov	r0, r5
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	b004      	add	sp, #16
 800d040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d044:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d048:	eb00 0904 	add.w	r9, r0, r4
 800d04c:	d1e5      	bne.n	800d01a <__cvt+0x6a>
 800d04e:	7803      	ldrb	r3, [r0, #0]
 800d050:	2b30      	cmp	r3, #48	@ 0x30
 800d052:	d10a      	bne.n	800d06a <__cvt+0xba>
 800d054:	2200      	movs	r2, #0
 800d056:	2300      	movs	r3, #0
 800d058:	4630      	mov	r0, r6
 800d05a:	4639      	mov	r1, r7
 800d05c:	f7f3 fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 800d060:	b918      	cbnz	r0, 800d06a <__cvt+0xba>
 800d062:	f1c4 0401 	rsb	r4, r4, #1
 800d066:	f8ca 4000 	str.w	r4, [sl]
 800d06a:	f8da 3000 	ldr.w	r3, [sl]
 800d06e:	4499      	add	r9, r3
 800d070:	e7d3      	b.n	800d01a <__cvt+0x6a>
 800d072:	1c59      	adds	r1, r3, #1
 800d074:	9103      	str	r1, [sp, #12]
 800d076:	701a      	strb	r2, [r3, #0]
 800d078:	e7d9      	b.n	800d02e <__cvt+0x7e>

0800d07a <__exponent>:
 800d07a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d07c:	2900      	cmp	r1, #0
 800d07e:	bfba      	itte	lt
 800d080:	4249      	neglt	r1, r1
 800d082:	232d      	movlt	r3, #45	@ 0x2d
 800d084:	232b      	movge	r3, #43	@ 0x2b
 800d086:	2909      	cmp	r1, #9
 800d088:	7002      	strb	r2, [r0, #0]
 800d08a:	7043      	strb	r3, [r0, #1]
 800d08c:	dd29      	ble.n	800d0e2 <__exponent+0x68>
 800d08e:	f10d 0307 	add.w	r3, sp, #7
 800d092:	461d      	mov	r5, r3
 800d094:	270a      	movs	r7, #10
 800d096:	461a      	mov	r2, r3
 800d098:	fbb1 f6f7 	udiv	r6, r1, r7
 800d09c:	fb07 1416 	mls	r4, r7, r6, r1
 800d0a0:	3430      	adds	r4, #48	@ 0x30
 800d0a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	2c63      	cmp	r4, #99	@ 0x63
 800d0aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	dcf1      	bgt.n	800d096 <__exponent+0x1c>
 800d0b2:	3130      	adds	r1, #48	@ 0x30
 800d0b4:	1e94      	subs	r4, r2, #2
 800d0b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d0ba:	1c41      	adds	r1, r0, #1
 800d0bc:	4623      	mov	r3, r4
 800d0be:	42ab      	cmp	r3, r5
 800d0c0:	d30a      	bcc.n	800d0d8 <__exponent+0x5e>
 800d0c2:	f10d 0309 	add.w	r3, sp, #9
 800d0c6:	1a9b      	subs	r3, r3, r2
 800d0c8:	42ac      	cmp	r4, r5
 800d0ca:	bf88      	it	hi
 800d0cc:	2300      	movhi	r3, #0
 800d0ce:	3302      	adds	r3, #2
 800d0d0:	4403      	add	r3, r0
 800d0d2:	1a18      	subs	r0, r3, r0
 800d0d4:	b003      	add	sp, #12
 800d0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d0dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d0e0:	e7ed      	b.n	800d0be <__exponent+0x44>
 800d0e2:	2330      	movs	r3, #48	@ 0x30
 800d0e4:	3130      	adds	r1, #48	@ 0x30
 800d0e6:	7083      	strb	r3, [r0, #2]
 800d0e8:	70c1      	strb	r1, [r0, #3]
 800d0ea:	1d03      	adds	r3, r0, #4
 800d0ec:	e7f1      	b.n	800d0d2 <__exponent+0x58>
	...

0800d0f0 <_printf_float>:
 800d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f4:	b08d      	sub	sp, #52	@ 0x34
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	461f      	mov	r7, r3
 800d100:	4605      	mov	r5, r0
 800d102:	f000 fcd5 	bl	800dab0 <_localeconv_r>
 800d106:	6803      	ldr	r3, [r0, #0]
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7f3 f8c8 	bl	80002a0 <strlen>
 800d110:	2300      	movs	r3, #0
 800d112:	930a      	str	r3, [sp, #40]	@ 0x28
 800d114:	f8d8 3000 	ldr.w	r3, [r8]
 800d118:	9005      	str	r0, [sp, #20]
 800d11a:	3307      	adds	r3, #7
 800d11c:	f023 0307 	bic.w	r3, r3, #7
 800d120:	f103 0208 	add.w	r2, r3, #8
 800d124:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d128:	f8d4 b000 	ldr.w	fp, [r4]
 800d12c:	f8c8 2000 	str.w	r2, [r8]
 800d130:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d134:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d138:	9307      	str	r3, [sp, #28]
 800d13a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d13e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d146:	4b9c      	ldr	r3, [pc, #624]	@ (800d3b8 <_printf_float+0x2c8>)
 800d148:	f04f 32ff 	mov.w	r2, #4294967295
 800d14c:	f7f3 fd06 	bl	8000b5c <__aeabi_dcmpun>
 800d150:	bb70      	cbnz	r0, 800d1b0 <_printf_float+0xc0>
 800d152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d156:	4b98      	ldr	r3, [pc, #608]	@ (800d3b8 <_printf_float+0x2c8>)
 800d158:	f04f 32ff 	mov.w	r2, #4294967295
 800d15c:	f7f3 fce0 	bl	8000b20 <__aeabi_dcmple>
 800d160:	bb30      	cbnz	r0, 800d1b0 <_printf_float+0xc0>
 800d162:	2200      	movs	r2, #0
 800d164:	2300      	movs	r3, #0
 800d166:	4640      	mov	r0, r8
 800d168:	4649      	mov	r1, r9
 800d16a:	f7f3 fccf 	bl	8000b0c <__aeabi_dcmplt>
 800d16e:	b110      	cbz	r0, 800d176 <_printf_float+0x86>
 800d170:	232d      	movs	r3, #45	@ 0x2d
 800d172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d176:	4a91      	ldr	r2, [pc, #580]	@ (800d3bc <_printf_float+0x2cc>)
 800d178:	4b91      	ldr	r3, [pc, #580]	@ (800d3c0 <_printf_float+0x2d0>)
 800d17a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d17e:	bf94      	ite	ls
 800d180:	4690      	movls	r8, r2
 800d182:	4698      	movhi	r8, r3
 800d184:	2303      	movs	r3, #3
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	f02b 0304 	bic.w	r3, fp, #4
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	f04f 0900 	mov.w	r9, #0
 800d192:	9700      	str	r7, [sp, #0]
 800d194:	4633      	mov	r3, r6
 800d196:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d198:	4621      	mov	r1, r4
 800d19a:	4628      	mov	r0, r5
 800d19c:	f000 f9d2 	bl	800d544 <_printf_common>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	f040 808d 	bne.w	800d2c0 <_printf_float+0x1d0>
 800d1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1aa:	b00d      	add	sp, #52	@ 0x34
 800d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	464b      	mov	r3, r9
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	f7f3 fcd0 	bl	8000b5c <__aeabi_dcmpun>
 800d1bc:	b140      	cbz	r0, 800d1d0 <_printf_float+0xe0>
 800d1be:	464b      	mov	r3, r9
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	bfbc      	itt	lt
 800d1c4:	232d      	movlt	r3, #45	@ 0x2d
 800d1c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d1ca:	4a7e      	ldr	r2, [pc, #504]	@ (800d3c4 <_printf_float+0x2d4>)
 800d1cc:	4b7e      	ldr	r3, [pc, #504]	@ (800d3c8 <_printf_float+0x2d8>)
 800d1ce:	e7d4      	b.n	800d17a <_printf_float+0x8a>
 800d1d0:	6863      	ldr	r3, [r4, #4]
 800d1d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d1d6:	9206      	str	r2, [sp, #24]
 800d1d8:	1c5a      	adds	r2, r3, #1
 800d1da:	d13b      	bne.n	800d254 <_printf_float+0x164>
 800d1dc:	2306      	movs	r3, #6
 800d1de:	6063      	str	r3, [r4, #4]
 800d1e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	6022      	str	r2, [r4, #0]
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	ab0a      	add	r3, sp, #40	@ 0x28
 800d1ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d1f0:	ab09      	add	r3, sp, #36	@ 0x24
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	6861      	ldr	r1, [r4, #4]
 800d1f6:	ec49 8b10 	vmov	d0, r8, r9
 800d1fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d1fe:	4628      	mov	r0, r5
 800d200:	f7ff fed6 	bl	800cfb0 <__cvt>
 800d204:	9b06      	ldr	r3, [sp, #24]
 800d206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d208:	2b47      	cmp	r3, #71	@ 0x47
 800d20a:	4680      	mov	r8, r0
 800d20c:	d129      	bne.n	800d262 <_printf_float+0x172>
 800d20e:	1cc8      	adds	r0, r1, #3
 800d210:	db02      	blt.n	800d218 <_printf_float+0x128>
 800d212:	6863      	ldr	r3, [r4, #4]
 800d214:	4299      	cmp	r1, r3
 800d216:	dd41      	ble.n	800d29c <_printf_float+0x1ac>
 800d218:	f1aa 0a02 	sub.w	sl, sl, #2
 800d21c:	fa5f fa8a 	uxtb.w	sl, sl
 800d220:	3901      	subs	r1, #1
 800d222:	4652      	mov	r2, sl
 800d224:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d228:	9109      	str	r1, [sp, #36]	@ 0x24
 800d22a:	f7ff ff26 	bl	800d07a <__exponent>
 800d22e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d230:	1813      	adds	r3, r2, r0
 800d232:	2a01      	cmp	r2, #1
 800d234:	4681      	mov	r9, r0
 800d236:	6123      	str	r3, [r4, #16]
 800d238:	dc02      	bgt.n	800d240 <_printf_float+0x150>
 800d23a:	6822      	ldr	r2, [r4, #0]
 800d23c:	07d2      	lsls	r2, r2, #31
 800d23e:	d501      	bpl.n	800d244 <_printf_float+0x154>
 800d240:	3301      	adds	r3, #1
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d0a2      	beq.n	800d192 <_printf_float+0xa2>
 800d24c:	232d      	movs	r3, #45	@ 0x2d
 800d24e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d252:	e79e      	b.n	800d192 <_printf_float+0xa2>
 800d254:	9a06      	ldr	r2, [sp, #24]
 800d256:	2a47      	cmp	r2, #71	@ 0x47
 800d258:	d1c2      	bne.n	800d1e0 <_printf_float+0xf0>
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1c0      	bne.n	800d1e0 <_printf_float+0xf0>
 800d25e:	2301      	movs	r3, #1
 800d260:	e7bd      	b.n	800d1de <_printf_float+0xee>
 800d262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d266:	d9db      	bls.n	800d220 <_printf_float+0x130>
 800d268:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d26c:	d118      	bne.n	800d2a0 <_printf_float+0x1b0>
 800d26e:	2900      	cmp	r1, #0
 800d270:	6863      	ldr	r3, [r4, #4]
 800d272:	dd0b      	ble.n	800d28c <_printf_float+0x19c>
 800d274:	6121      	str	r1, [r4, #16]
 800d276:	b913      	cbnz	r3, 800d27e <_printf_float+0x18e>
 800d278:	6822      	ldr	r2, [r4, #0]
 800d27a:	07d0      	lsls	r0, r2, #31
 800d27c:	d502      	bpl.n	800d284 <_printf_float+0x194>
 800d27e:	3301      	adds	r3, #1
 800d280:	440b      	add	r3, r1
 800d282:	6123      	str	r3, [r4, #16]
 800d284:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d286:	f04f 0900 	mov.w	r9, #0
 800d28a:	e7db      	b.n	800d244 <_printf_float+0x154>
 800d28c:	b913      	cbnz	r3, 800d294 <_printf_float+0x1a4>
 800d28e:	6822      	ldr	r2, [r4, #0]
 800d290:	07d2      	lsls	r2, r2, #31
 800d292:	d501      	bpl.n	800d298 <_printf_float+0x1a8>
 800d294:	3302      	adds	r3, #2
 800d296:	e7f4      	b.n	800d282 <_printf_float+0x192>
 800d298:	2301      	movs	r3, #1
 800d29a:	e7f2      	b.n	800d282 <_printf_float+0x192>
 800d29c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2a2:	4299      	cmp	r1, r3
 800d2a4:	db05      	blt.n	800d2b2 <_printf_float+0x1c2>
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	6121      	str	r1, [r4, #16]
 800d2aa:	07d8      	lsls	r0, r3, #31
 800d2ac:	d5ea      	bpl.n	800d284 <_printf_float+0x194>
 800d2ae:	1c4b      	adds	r3, r1, #1
 800d2b0:	e7e7      	b.n	800d282 <_printf_float+0x192>
 800d2b2:	2900      	cmp	r1, #0
 800d2b4:	bfd4      	ite	le
 800d2b6:	f1c1 0202 	rsble	r2, r1, #2
 800d2ba:	2201      	movgt	r2, #1
 800d2bc:	4413      	add	r3, r2
 800d2be:	e7e0      	b.n	800d282 <_printf_float+0x192>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	055a      	lsls	r2, r3, #21
 800d2c4:	d407      	bmi.n	800d2d6 <_printf_float+0x1e6>
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	47b8      	blx	r7
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	d12b      	bne.n	800d32c <_printf_float+0x23c>
 800d2d4:	e767      	b.n	800d1a6 <_printf_float+0xb6>
 800d2d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2da:	f240 80dd 	bls.w	800d498 <_printf_float+0x3a8>
 800d2de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f7f3 fc07 	bl	8000af8 <__aeabi_dcmpeq>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d033      	beq.n	800d356 <_printf_float+0x266>
 800d2ee:	4a37      	ldr	r2, [pc, #220]	@ (800d3cc <_printf_float+0x2dc>)
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	47b8      	blx	r7
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	f43f af54 	beq.w	800d1a6 <_printf_float+0xb6>
 800d2fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d302:	4543      	cmp	r3, r8
 800d304:	db02      	blt.n	800d30c <_printf_float+0x21c>
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	07d8      	lsls	r0, r3, #31
 800d30a:	d50f      	bpl.n	800d32c <_printf_float+0x23c>
 800d30c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d310:	4631      	mov	r1, r6
 800d312:	4628      	mov	r0, r5
 800d314:	47b8      	blx	r7
 800d316:	3001      	adds	r0, #1
 800d318:	f43f af45 	beq.w	800d1a6 <_printf_float+0xb6>
 800d31c:	f04f 0900 	mov.w	r9, #0
 800d320:	f108 38ff 	add.w	r8, r8, #4294967295
 800d324:	f104 0a1a 	add.w	sl, r4, #26
 800d328:	45c8      	cmp	r8, r9
 800d32a:	dc09      	bgt.n	800d340 <_printf_float+0x250>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	079b      	lsls	r3, r3, #30
 800d330:	f100 8103 	bmi.w	800d53a <_printf_float+0x44a>
 800d334:	68e0      	ldr	r0, [r4, #12]
 800d336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d338:	4298      	cmp	r0, r3
 800d33a:	bfb8      	it	lt
 800d33c:	4618      	movlt	r0, r3
 800d33e:	e734      	b.n	800d1aa <_printf_float+0xba>
 800d340:	2301      	movs	r3, #1
 800d342:	4652      	mov	r2, sl
 800d344:	4631      	mov	r1, r6
 800d346:	4628      	mov	r0, r5
 800d348:	47b8      	blx	r7
 800d34a:	3001      	adds	r0, #1
 800d34c:	f43f af2b 	beq.w	800d1a6 <_printf_float+0xb6>
 800d350:	f109 0901 	add.w	r9, r9, #1
 800d354:	e7e8      	b.n	800d328 <_printf_float+0x238>
 800d356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	dc39      	bgt.n	800d3d0 <_printf_float+0x2e0>
 800d35c:	4a1b      	ldr	r2, [pc, #108]	@ (800d3cc <_printf_float+0x2dc>)
 800d35e:	2301      	movs	r3, #1
 800d360:	4631      	mov	r1, r6
 800d362:	4628      	mov	r0, r5
 800d364:	47b8      	blx	r7
 800d366:	3001      	adds	r0, #1
 800d368:	f43f af1d 	beq.w	800d1a6 <_printf_float+0xb6>
 800d36c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d370:	ea59 0303 	orrs.w	r3, r9, r3
 800d374:	d102      	bne.n	800d37c <_printf_float+0x28c>
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	07d9      	lsls	r1, r3, #31
 800d37a:	d5d7      	bpl.n	800d32c <_printf_float+0x23c>
 800d37c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d380:	4631      	mov	r1, r6
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	f43f af0d 	beq.w	800d1a6 <_printf_float+0xb6>
 800d38c:	f04f 0a00 	mov.w	sl, #0
 800d390:	f104 0b1a 	add.w	fp, r4, #26
 800d394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d396:	425b      	negs	r3, r3
 800d398:	4553      	cmp	r3, sl
 800d39a:	dc01      	bgt.n	800d3a0 <_printf_float+0x2b0>
 800d39c:	464b      	mov	r3, r9
 800d39e:	e793      	b.n	800d2c8 <_printf_float+0x1d8>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	465a      	mov	r2, fp
 800d3a4:	4631      	mov	r1, r6
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	47b8      	blx	r7
 800d3aa:	3001      	adds	r0, #1
 800d3ac:	f43f aefb 	beq.w	800d1a6 <_printf_float+0xb6>
 800d3b0:	f10a 0a01 	add.w	sl, sl, #1
 800d3b4:	e7ee      	b.n	800d394 <_printf_float+0x2a4>
 800d3b6:	bf00      	nop
 800d3b8:	7fefffff 	.word	0x7fefffff
 800d3bc:	08014cfc 	.word	0x08014cfc
 800d3c0:	08014d00 	.word	0x08014d00
 800d3c4:	08014d04 	.word	0x08014d04
 800d3c8:	08014d08 	.word	0x08014d08
 800d3cc:	08014d0c 	.word	0x08014d0c
 800d3d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d3d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3d6:	4553      	cmp	r3, sl
 800d3d8:	bfa8      	it	ge
 800d3da:	4653      	movge	r3, sl
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	4699      	mov	r9, r3
 800d3e0:	dc36      	bgt.n	800d450 <_printf_float+0x360>
 800d3e2:	f04f 0b00 	mov.w	fp, #0
 800d3e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3ea:	f104 021a 	add.w	r2, r4, #26
 800d3ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d3f0:	9306      	str	r3, [sp, #24]
 800d3f2:	eba3 0309 	sub.w	r3, r3, r9
 800d3f6:	455b      	cmp	r3, fp
 800d3f8:	dc31      	bgt.n	800d45e <_printf_float+0x36e>
 800d3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3fc:	459a      	cmp	sl, r3
 800d3fe:	dc3a      	bgt.n	800d476 <_printf_float+0x386>
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	07da      	lsls	r2, r3, #31
 800d404:	d437      	bmi.n	800d476 <_printf_float+0x386>
 800d406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d408:	ebaa 0903 	sub.w	r9, sl, r3
 800d40c:	9b06      	ldr	r3, [sp, #24]
 800d40e:	ebaa 0303 	sub.w	r3, sl, r3
 800d412:	4599      	cmp	r9, r3
 800d414:	bfa8      	it	ge
 800d416:	4699      	movge	r9, r3
 800d418:	f1b9 0f00 	cmp.w	r9, #0
 800d41c:	dc33      	bgt.n	800d486 <_printf_float+0x396>
 800d41e:	f04f 0800 	mov.w	r8, #0
 800d422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d426:	f104 0b1a 	add.w	fp, r4, #26
 800d42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d42c:	ebaa 0303 	sub.w	r3, sl, r3
 800d430:	eba3 0309 	sub.w	r3, r3, r9
 800d434:	4543      	cmp	r3, r8
 800d436:	f77f af79 	ble.w	800d32c <_printf_float+0x23c>
 800d43a:	2301      	movs	r3, #1
 800d43c:	465a      	mov	r2, fp
 800d43e:	4631      	mov	r1, r6
 800d440:	4628      	mov	r0, r5
 800d442:	47b8      	blx	r7
 800d444:	3001      	adds	r0, #1
 800d446:	f43f aeae 	beq.w	800d1a6 <_printf_float+0xb6>
 800d44a:	f108 0801 	add.w	r8, r8, #1
 800d44e:	e7ec      	b.n	800d42a <_printf_float+0x33a>
 800d450:	4642      	mov	r2, r8
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	47b8      	blx	r7
 800d458:	3001      	adds	r0, #1
 800d45a:	d1c2      	bne.n	800d3e2 <_printf_float+0x2f2>
 800d45c:	e6a3      	b.n	800d1a6 <_printf_float+0xb6>
 800d45e:	2301      	movs	r3, #1
 800d460:	4631      	mov	r1, r6
 800d462:	4628      	mov	r0, r5
 800d464:	9206      	str	r2, [sp, #24]
 800d466:	47b8      	blx	r7
 800d468:	3001      	adds	r0, #1
 800d46a:	f43f ae9c 	beq.w	800d1a6 <_printf_float+0xb6>
 800d46e:	9a06      	ldr	r2, [sp, #24]
 800d470:	f10b 0b01 	add.w	fp, fp, #1
 800d474:	e7bb      	b.n	800d3ee <_printf_float+0x2fe>
 800d476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	47b8      	blx	r7
 800d480:	3001      	adds	r0, #1
 800d482:	d1c0      	bne.n	800d406 <_printf_float+0x316>
 800d484:	e68f      	b.n	800d1a6 <_printf_float+0xb6>
 800d486:	9a06      	ldr	r2, [sp, #24]
 800d488:	464b      	mov	r3, r9
 800d48a:	4442      	add	r2, r8
 800d48c:	4631      	mov	r1, r6
 800d48e:	4628      	mov	r0, r5
 800d490:	47b8      	blx	r7
 800d492:	3001      	adds	r0, #1
 800d494:	d1c3      	bne.n	800d41e <_printf_float+0x32e>
 800d496:	e686      	b.n	800d1a6 <_printf_float+0xb6>
 800d498:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d49c:	f1ba 0f01 	cmp.w	sl, #1
 800d4a0:	dc01      	bgt.n	800d4a6 <_printf_float+0x3b6>
 800d4a2:	07db      	lsls	r3, r3, #31
 800d4a4:	d536      	bpl.n	800d514 <_printf_float+0x424>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4642      	mov	r2, r8
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	47b8      	blx	r7
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	f43f ae78 	beq.w	800d1a6 <_printf_float+0xb6>
 800d4b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b8      	blx	r7
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	f43f ae70 	beq.w	800d1a6 <_printf_float+0xb6>
 800d4c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4d2:	f7f3 fb11 	bl	8000af8 <__aeabi_dcmpeq>
 800d4d6:	b9c0      	cbnz	r0, 800d50a <_printf_float+0x41a>
 800d4d8:	4653      	mov	r3, sl
 800d4da:	f108 0201 	add.w	r2, r8, #1
 800d4de:	4631      	mov	r1, r6
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	47b8      	blx	r7
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d10c      	bne.n	800d502 <_printf_float+0x412>
 800d4e8:	e65d      	b.n	800d1a6 <_printf_float+0xb6>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	465a      	mov	r2, fp
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	47b8      	blx	r7
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	f43f ae56 	beq.w	800d1a6 <_printf_float+0xb6>
 800d4fa:	f108 0801 	add.w	r8, r8, #1
 800d4fe:	45d0      	cmp	r8, sl
 800d500:	dbf3      	blt.n	800d4ea <_printf_float+0x3fa>
 800d502:	464b      	mov	r3, r9
 800d504:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d508:	e6df      	b.n	800d2ca <_printf_float+0x1da>
 800d50a:	f04f 0800 	mov.w	r8, #0
 800d50e:	f104 0b1a 	add.w	fp, r4, #26
 800d512:	e7f4      	b.n	800d4fe <_printf_float+0x40e>
 800d514:	2301      	movs	r3, #1
 800d516:	4642      	mov	r2, r8
 800d518:	e7e1      	b.n	800d4de <_printf_float+0x3ee>
 800d51a:	2301      	movs	r3, #1
 800d51c:	464a      	mov	r2, r9
 800d51e:	4631      	mov	r1, r6
 800d520:	4628      	mov	r0, r5
 800d522:	47b8      	blx	r7
 800d524:	3001      	adds	r0, #1
 800d526:	f43f ae3e 	beq.w	800d1a6 <_printf_float+0xb6>
 800d52a:	f108 0801 	add.w	r8, r8, #1
 800d52e:	68e3      	ldr	r3, [r4, #12]
 800d530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d532:	1a5b      	subs	r3, r3, r1
 800d534:	4543      	cmp	r3, r8
 800d536:	dcf0      	bgt.n	800d51a <_printf_float+0x42a>
 800d538:	e6fc      	b.n	800d334 <_printf_float+0x244>
 800d53a:	f04f 0800 	mov.w	r8, #0
 800d53e:	f104 0919 	add.w	r9, r4, #25
 800d542:	e7f4      	b.n	800d52e <_printf_float+0x43e>

0800d544 <_printf_common>:
 800d544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d548:	4616      	mov	r6, r2
 800d54a:	4698      	mov	r8, r3
 800d54c:	688a      	ldr	r2, [r1, #8]
 800d54e:	690b      	ldr	r3, [r1, #16]
 800d550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d554:	4293      	cmp	r3, r2
 800d556:	bfb8      	it	lt
 800d558:	4613      	movlt	r3, r2
 800d55a:	6033      	str	r3, [r6, #0]
 800d55c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d560:	4607      	mov	r7, r0
 800d562:	460c      	mov	r4, r1
 800d564:	b10a      	cbz	r2, 800d56a <_printf_common+0x26>
 800d566:	3301      	adds	r3, #1
 800d568:	6033      	str	r3, [r6, #0]
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	0699      	lsls	r1, r3, #26
 800d56e:	bf42      	ittt	mi
 800d570:	6833      	ldrmi	r3, [r6, #0]
 800d572:	3302      	addmi	r3, #2
 800d574:	6033      	strmi	r3, [r6, #0]
 800d576:	6825      	ldr	r5, [r4, #0]
 800d578:	f015 0506 	ands.w	r5, r5, #6
 800d57c:	d106      	bne.n	800d58c <_printf_common+0x48>
 800d57e:	f104 0a19 	add.w	sl, r4, #25
 800d582:	68e3      	ldr	r3, [r4, #12]
 800d584:	6832      	ldr	r2, [r6, #0]
 800d586:	1a9b      	subs	r3, r3, r2
 800d588:	42ab      	cmp	r3, r5
 800d58a:	dc26      	bgt.n	800d5da <_printf_common+0x96>
 800d58c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d590:	6822      	ldr	r2, [r4, #0]
 800d592:	3b00      	subs	r3, #0
 800d594:	bf18      	it	ne
 800d596:	2301      	movne	r3, #1
 800d598:	0692      	lsls	r2, r2, #26
 800d59a:	d42b      	bmi.n	800d5f4 <_printf_common+0xb0>
 800d59c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5a0:	4641      	mov	r1, r8
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	47c8      	blx	r9
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d01e      	beq.n	800d5e8 <_printf_common+0xa4>
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	6922      	ldr	r2, [r4, #16]
 800d5ae:	f003 0306 	and.w	r3, r3, #6
 800d5b2:	2b04      	cmp	r3, #4
 800d5b4:	bf02      	ittt	eq
 800d5b6:	68e5      	ldreq	r5, [r4, #12]
 800d5b8:	6833      	ldreq	r3, [r6, #0]
 800d5ba:	1aed      	subeq	r5, r5, r3
 800d5bc:	68a3      	ldr	r3, [r4, #8]
 800d5be:	bf0c      	ite	eq
 800d5c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5c4:	2500      	movne	r5, #0
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	bfc4      	itt	gt
 800d5ca:	1a9b      	subgt	r3, r3, r2
 800d5cc:	18ed      	addgt	r5, r5, r3
 800d5ce:	2600      	movs	r6, #0
 800d5d0:	341a      	adds	r4, #26
 800d5d2:	42b5      	cmp	r5, r6
 800d5d4:	d11a      	bne.n	800d60c <_printf_common+0xc8>
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e008      	b.n	800d5ec <_printf_common+0xa8>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4652      	mov	r2, sl
 800d5de:	4641      	mov	r1, r8
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	47c8      	blx	r9
 800d5e4:	3001      	adds	r0, #1
 800d5e6:	d103      	bne.n	800d5f0 <_printf_common+0xac>
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f0:	3501      	adds	r5, #1
 800d5f2:	e7c6      	b.n	800d582 <_printf_common+0x3e>
 800d5f4:	18e1      	adds	r1, r4, r3
 800d5f6:	1c5a      	adds	r2, r3, #1
 800d5f8:	2030      	movs	r0, #48	@ 0x30
 800d5fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d5fe:	4422      	add	r2, r4
 800d600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d608:	3302      	adds	r3, #2
 800d60a:	e7c7      	b.n	800d59c <_printf_common+0x58>
 800d60c:	2301      	movs	r3, #1
 800d60e:	4622      	mov	r2, r4
 800d610:	4641      	mov	r1, r8
 800d612:	4638      	mov	r0, r7
 800d614:	47c8      	blx	r9
 800d616:	3001      	adds	r0, #1
 800d618:	d0e6      	beq.n	800d5e8 <_printf_common+0xa4>
 800d61a:	3601      	adds	r6, #1
 800d61c:	e7d9      	b.n	800d5d2 <_printf_common+0x8e>
	...

0800d620 <_printf_i>:
 800d620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d624:	7e0f      	ldrb	r7, [r1, #24]
 800d626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d628:	2f78      	cmp	r7, #120	@ 0x78
 800d62a:	4691      	mov	r9, r2
 800d62c:	4680      	mov	r8, r0
 800d62e:	460c      	mov	r4, r1
 800d630:	469a      	mov	sl, r3
 800d632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d636:	d807      	bhi.n	800d648 <_printf_i+0x28>
 800d638:	2f62      	cmp	r7, #98	@ 0x62
 800d63a:	d80a      	bhi.n	800d652 <_printf_i+0x32>
 800d63c:	2f00      	cmp	r7, #0
 800d63e:	f000 80d2 	beq.w	800d7e6 <_printf_i+0x1c6>
 800d642:	2f58      	cmp	r7, #88	@ 0x58
 800d644:	f000 80b9 	beq.w	800d7ba <_printf_i+0x19a>
 800d648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d64c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d650:	e03a      	b.n	800d6c8 <_printf_i+0xa8>
 800d652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d656:	2b15      	cmp	r3, #21
 800d658:	d8f6      	bhi.n	800d648 <_printf_i+0x28>
 800d65a:	a101      	add	r1, pc, #4	@ (adr r1, 800d660 <_printf_i+0x40>)
 800d65c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d660:	0800d6b9 	.word	0x0800d6b9
 800d664:	0800d6cd 	.word	0x0800d6cd
 800d668:	0800d649 	.word	0x0800d649
 800d66c:	0800d649 	.word	0x0800d649
 800d670:	0800d649 	.word	0x0800d649
 800d674:	0800d649 	.word	0x0800d649
 800d678:	0800d6cd 	.word	0x0800d6cd
 800d67c:	0800d649 	.word	0x0800d649
 800d680:	0800d649 	.word	0x0800d649
 800d684:	0800d649 	.word	0x0800d649
 800d688:	0800d649 	.word	0x0800d649
 800d68c:	0800d7cd 	.word	0x0800d7cd
 800d690:	0800d6f7 	.word	0x0800d6f7
 800d694:	0800d787 	.word	0x0800d787
 800d698:	0800d649 	.word	0x0800d649
 800d69c:	0800d649 	.word	0x0800d649
 800d6a0:	0800d7ef 	.word	0x0800d7ef
 800d6a4:	0800d649 	.word	0x0800d649
 800d6a8:	0800d6f7 	.word	0x0800d6f7
 800d6ac:	0800d649 	.word	0x0800d649
 800d6b0:	0800d649 	.word	0x0800d649
 800d6b4:	0800d78f 	.word	0x0800d78f
 800d6b8:	6833      	ldr	r3, [r6, #0]
 800d6ba:	1d1a      	adds	r2, r3, #4
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	6032      	str	r2, [r6, #0]
 800d6c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e09d      	b.n	800d808 <_printf_i+0x1e8>
 800d6cc:	6833      	ldr	r3, [r6, #0]
 800d6ce:	6820      	ldr	r0, [r4, #0]
 800d6d0:	1d19      	adds	r1, r3, #4
 800d6d2:	6031      	str	r1, [r6, #0]
 800d6d4:	0606      	lsls	r6, r0, #24
 800d6d6:	d501      	bpl.n	800d6dc <_printf_i+0xbc>
 800d6d8:	681d      	ldr	r5, [r3, #0]
 800d6da:	e003      	b.n	800d6e4 <_printf_i+0xc4>
 800d6dc:	0645      	lsls	r5, r0, #25
 800d6de:	d5fb      	bpl.n	800d6d8 <_printf_i+0xb8>
 800d6e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	da03      	bge.n	800d6f0 <_printf_i+0xd0>
 800d6e8:	232d      	movs	r3, #45	@ 0x2d
 800d6ea:	426d      	negs	r5, r5
 800d6ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6f0:	4859      	ldr	r0, [pc, #356]	@ (800d858 <_printf_i+0x238>)
 800d6f2:	230a      	movs	r3, #10
 800d6f4:	e011      	b.n	800d71a <_printf_i+0xfa>
 800d6f6:	6821      	ldr	r1, [r4, #0]
 800d6f8:	6833      	ldr	r3, [r6, #0]
 800d6fa:	0608      	lsls	r0, r1, #24
 800d6fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800d700:	d402      	bmi.n	800d708 <_printf_i+0xe8>
 800d702:	0649      	lsls	r1, r1, #25
 800d704:	bf48      	it	mi
 800d706:	b2ad      	uxthmi	r5, r5
 800d708:	2f6f      	cmp	r7, #111	@ 0x6f
 800d70a:	4853      	ldr	r0, [pc, #332]	@ (800d858 <_printf_i+0x238>)
 800d70c:	6033      	str	r3, [r6, #0]
 800d70e:	bf14      	ite	ne
 800d710:	230a      	movne	r3, #10
 800d712:	2308      	moveq	r3, #8
 800d714:	2100      	movs	r1, #0
 800d716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d71a:	6866      	ldr	r6, [r4, #4]
 800d71c:	60a6      	str	r6, [r4, #8]
 800d71e:	2e00      	cmp	r6, #0
 800d720:	bfa2      	ittt	ge
 800d722:	6821      	ldrge	r1, [r4, #0]
 800d724:	f021 0104 	bicge.w	r1, r1, #4
 800d728:	6021      	strge	r1, [r4, #0]
 800d72a:	b90d      	cbnz	r5, 800d730 <_printf_i+0x110>
 800d72c:	2e00      	cmp	r6, #0
 800d72e:	d04b      	beq.n	800d7c8 <_printf_i+0x1a8>
 800d730:	4616      	mov	r6, r2
 800d732:	fbb5 f1f3 	udiv	r1, r5, r3
 800d736:	fb03 5711 	mls	r7, r3, r1, r5
 800d73a:	5dc7      	ldrb	r7, [r0, r7]
 800d73c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d740:	462f      	mov	r7, r5
 800d742:	42bb      	cmp	r3, r7
 800d744:	460d      	mov	r5, r1
 800d746:	d9f4      	bls.n	800d732 <_printf_i+0x112>
 800d748:	2b08      	cmp	r3, #8
 800d74a:	d10b      	bne.n	800d764 <_printf_i+0x144>
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	07df      	lsls	r7, r3, #31
 800d750:	d508      	bpl.n	800d764 <_printf_i+0x144>
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	6861      	ldr	r1, [r4, #4]
 800d756:	4299      	cmp	r1, r3
 800d758:	bfde      	ittt	le
 800d75a:	2330      	movle	r3, #48	@ 0x30
 800d75c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d760:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d764:	1b92      	subs	r2, r2, r6
 800d766:	6122      	str	r2, [r4, #16]
 800d768:	f8cd a000 	str.w	sl, [sp]
 800d76c:	464b      	mov	r3, r9
 800d76e:	aa03      	add	r2, sp, #12
 800d770:	4621      	mov	r1, r4
 800d772:	4640      	mov	r0, r8
 800d774:	f7ff fee6 	bl	800d544 <_printf_common>
 800d778:	3001      	adds	r0, #1
 800d77a:	d14a      	bne.n	800d812 <_printf_i+0x1f2>
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	b004      	add	sp, #16
 800d782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	f043 0320 	orr.w	r3, r3, #32
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	4833      	ldr	r0, [pc, #204]	@ (800d85c <_printf_i+0x23c>)
 800d790:	2778      	movs	r7, #120	@ 0x78
 800d792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	6831      	ldr	r1, [r6, #0]
 800d79a:	061f      	lsls	r7, r3, #24
 800d79c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7a0:	d402      	bmi.n	800d7a8 <_printf_i+0x188>
 800d7a2:	065f      	lsls	r7, r3, #25
 800d7a4:	bf48      	it	mi
 800d7a6:	b2ad      	uxthmi	r5, r5
 800d7a8:	6031      	str	r1, [r6, #0]
 800d7aa:	07d9      	lsls	r1, r3, #31
 800d7ac:	bf44      	itt	mi
 800d7ae:	f043 0320 	orrmi.w	r3, r3, #32
 800d7b2:	6023      	strmi	r3, [r4, #0]
 800d7b4:	b11d      	cbz	r5, 800d7be <_printf_i+0x19e>
 800d7b6:	2310      	movs	r3, #16
 800d7b8:	e7ac      	b.n	800d714 <_printf_i+0xf4>
 800d7ba:	4827      	ldr	r0, [pc, #156]	@ (800d858 <_printf_i+0x238>)
 800d7bc:	e7e9      	b.n	800d792 <_printf_i+0x172>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	f023 0320 	bic.w	r3, r3, #32
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	e7f6      	b.n	800d7b6 <_printf_i+0x196>
 800d7c8:	4616      	mov	r6, r2
 800d7ca:	e7bd      	b.n	800d748 <_printf_i+0x128>
 800d7cc:	6833      	ldr	r3, [r6, #0]
 800d7ce:	6825      	ldr	r5, [r4, #0]
 800d7d0:	6961      	ldr	r1, [r4, #20]
 800d7d2:	1d18      	adds	r0, r3, #4
 800d7d4:	6030      	str	r0, [r6, #0]
 800d7d6:	062e      	lsls	r6, r5, #24
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	d501      	bpl.n	800d7e0 <_printf_i+0x1c0>
 800d7dc:	6019      	str	r1, [r3, #0]
 800d7de:	e002      	b.n	800d7e6 <_printf_i+0x1c6>
 800d7e0:	0668      	lsls	r0, r5, #25
 800d7e2:	d5fb      	bpl.n	800d7dc <_printf_i+0x1bc>
 800d7e4:	8019      	strh	r1, [r3, #0]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	4616      	mov	r6, r2
 800d7ec:	e7bc      	b.n	800d768 <_printf_i+0x148>
 800d7ee:	6833      	ldr	r3, [r6, #0]
 800d7f0:	1d1a      	adds	r2, r3, #4
 800d7f2:	6032      	str	r2, [r6, #0]
 800d7f4:	681e      	ldr	r6, [r3, #0]
 800d7f6:	6862      	ldr	r2, [r4, #4]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f7f2 fd00 	bl	8000200 <memchr>
 800d800:	b108      	cbz	r0, 800d806 <_printf_i+0x1e6>
 800d802:	1b80      	subs	r0, r0, r6
 800d804:	6060      	str	r0, [r4, #4]
 800d806:	6863      	ldr	r3, [r4, #4]
 800d808:	6123      	str	r3, [r4, #16]
 800d80a:	2300      	movs	r3, #0
 800d80c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d810:	e7aa      	b.n	800d768 <_printf_i+0x148>
 800d812:	6923      	ldr	r3, [r4, #16]
 800d814:	4632      	mov	r2, r6
 800d816:	4649      	mov	r1, r9
 800d818:	4640      	mov	r0, r8
 800d81a:	47d0      	blx	sl
 800d81c:	3001      	adds	r0, #1
 800d81e:	d0ad      	beq.n	800d77c <_printf_i+0x15c>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	079b      	lsls	r3, r3, #30
 800d824:	d413      	bmi.n	800d84e <_printf_i+0x22e>
 800d826:	68e0      	ldr	r0, [r4, #12]
 800d828:	9b03      	ldr	r3, [sp, #12]
 800d82a:	4298      	cmp	r0, r3
 800d82c:	bfb8      	it	lt
 800d82e:	4618      	movlt	r0, r3
 800d830:	e7a6      	b.n	800d780 <_printf_i+0x160>
 800d832:	2301      	movs	r3, #1
 800d834:	4632      	mov	r2, r6
 800d836:	4649      	mov	r1, r9
 800d838:	4640      	mov	r0, r8
 800d83a:	47d0      	blx	sl
 800d83c:	3001      	adds	r0, #1
 800d83e:	d09d      	beq.n	800d77c <_printf_i+0x15c>
 800d840:	3501      	adds	r5, #1
 800d842:	68e3      	ldr	r3, [r4, #12]
 800d844:	9903      	ldr	r1, [sp, #12]
 800d846:	1a5b      	subs	r3, r3, r1
 800d848:	42ab      	cmp	r3, r5
 800d84a:	dcf2      	bgt.n	800d832 <_printf_i+0x212>
 800d84c:	e7eb      	b.n	800d826 <_printf_i+0x206>
 800d84e:	2500      	movs	r5, #0
 800d850:	f104 0619 	add.w	r6, r4, #25
 800d854:	e7f5      	b.n	800d842 <_printf_i+0x222>
 800d856:	bf00      	nop
 800d858:	08014d0e 	.word	0x08014d0e
 800d85c:	08014d1f 	.word	0x08014d1f

0800d860 <std>:
 800d860:	2300      	movs	r3, #0
 800d862:	b510      	push	{r4, lr}
 800d864:	4604      	mov	r4, r0
 800d866:	e9c0 3300 	strd	r3, r3, [r0]
 800d86a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d86e:	6083      	str	r3, [r0, #8]
 800d870:	8181      	strh	r1, [r0, #12]
 800d872:	6643      	str	r3, [r0, #100]	@ 0x64
 800d874:	81c2      	strh	r2, [r0, #14]
 800d876:	6183      	str	r3, [r0, #24]
 800d878:	4619      	mov	r1, r3
 800d87a:	2208      	movs	r2, #8
 800d87c:	305c      	adds	r0, #92	@ 0x5c
 800d87e:	f000 f90e 	bl	800da9e <memset>
 800d882:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b8 <std+0x58>)
 800d884:	6263      	str	r3, [r4, #36]	@ 0x24
 800d886:	4b0d      	ldr	r3, [pc, #52]	@ (800d8bc <std+0x5c>)
 800d888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d88a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c0 <std+0x60>)
 800d88c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d88e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c4 <std+0x64>)
 800d890:	6323      	str	r3, [r4, #48]	@ 0x30
 800d892:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c8 <std+0x68>)
 800d894:	6224      	str	r4, [r4, #32]
 800d896:	429c      	cmp	r4, r3
 800d898:	d006      	beq.n	800d8a8 <std+0x48>
 800d89a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d89e:	4294      	cmp	r4, r2
 800d8a0:	d002      	beq.n	800d8a8 <std+0x48>
 800d8a2:	33d0      	adds	r3, #208	@ 0xd0
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	d105      	bne.n	800d8b4 <std+0x54>
 800d8a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8b0:	f000 b982 	b.w	800dbb8 <__retarget_lock_init_recursive>
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0800da19 	.word	0x0800da19
 800d8bc:	0800da3b 	.word	0x0800da3b
 800d8c0:	0800da73 	.word	0x0800da73
 800d8c4:	0800da97 	.word	0x0800da97
 800d8c8:	200009fc 	.word	0x200009fc

0800d8cc <stdio_exit_handler>:
 800d8cc:	4a02      	ldr	r2, [pc, #8]	@ (800d8d8 <stdio_exit_handler+0xc>)
 800d8ce:	4903      	ldr	r1, [pc, #12]	@ (800d8dc <stdio_exit_handler+0x10>)
 800d8d0:	4803      	ldr	r0, [pc, #12]	@ (800d8e0 <stdio_exit_handler+0x14>)
 800d8d2:	f000 b869 	b.w	800d9a8 <_fwalk_sglue>
 800d8d6:	bf00      	nop
 800d8d8:	2000002c 	.word	0x2000002c
 800d8dc:	0800f39d 	.word	0x0800f39d
 800d8e0:	2000003c 	.word	0x2000003c

0800d8e4 <cleanup_stdio>:
 800d8e4:	6841      	ldr	r1, [r0, #4]
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d918 <cleanup_stdio+0x34>)
 800d8e8:	4299      	cmp	r1, r3
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	d001      	beq.n	800d8f4 <cleanup_stdio+0x10>
 800d8f0:	f001 fd54 	bl	800f39c <_fflush_r>
 800d8f4:	68a1      	ldr	r1, [r4, #8]
 800d8f6:	4b09      	ldr	r3, [pc, #36]	@ (800d91c <cleanup_stdio+0x38>)
 800d8f8:	4299      	cmp	r1, r3
 800d8fa:	d002      	beq.n	800d902 <cleanup_stdio+0x1e>
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f001 fd4d 	bl	800f39c <_fflush_r>
 800d902:	68e1      	ldr	r1, [r4, #12]
 800d904:	4b06      	ldr	r3, [pc, #24]	@ (800d920 <cleanup_stdio+0x3c>)
 800d906:	4299      	cmp	r1, r3
 800d908:	d004      	beq.n	800d914 <cleanup_stdio+0x30>
 800d90a:	4620      	mov	r0, r4
 800d90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d910:	f001 bd44 	b.w	800f39c <_fflush_r>
 800d914:	bd10      	pop	{r4, pc}
 800d916:	bf00      	nop
 800d918:	200009fc 	.word	0x200009fc
 800d91c:	20000a64 	.word	0x20000a64
 800d920:	20000acc 	.word	0x20000acc

0800d924 <global_stdio_init.part.0>:
 800d924:	b510      	push	{r4, lr}
 800d926:	4b0b      	ldr	r3, [pc, #44]	@ (800d954 <global_stdio_init.part.0+0x30>)
 800d928:	4c0b      	ldr	r4, [pc, #44]	@ (800d958 <global_stdio_init.part.0+0x34>)
 800d92a:	4a0c      	ldr	r2, [pc, #48]	@ (800d95c <global_stdio_init.part.0+0x38>)
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	4620      	mov	r0, r4
 800d930:	2200      	movs	r2, #0
 800d932:	2104      	movs	r1, #4
 800d934:	f7ff ff94 	bl	800d860 <std>
 800d938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d93c:	2201      	movs	r2, #1
 800d93e:	2109      	movs	r1, #9
 800d940:	f7ff ff8e 	bl	800d860 <std>
 800d944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d948:	2202      	movs	r2, #2
 800d94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d94e:	2112      	movs	r1, #18
 800d950:	f7ff bf86 	b.w	800d860 <std>
 800d954:	20000b34 	.word	0x20000b34
 800d958:	200009fc 	.word	0x200009fc
 800d95c:	0800d8cd 	.word	0x0800d8cd

0800d960 <__sfp_lock_acquire>:
 800d960:	4801      	ldr	r0, [pc, #4]	@ (800d968 <__sfp_lock_acquire+0x8>)
 800d962:	f000 b92a 	b.w	800dbba <__retarget_lock_acquire_recursive>
 800d966:	bf00      	nop
 800d968:	20000b3d 	.word	0x20000b3d

0800d96c <__sfp_lock_release>:
 800d96c:	4801      	ldr	r0, [pc, #4]	@ (800d974 <__sfp_lock_release+0x8>)
 800d96e:	f000 b925 	b.w	800dbbc <__retarget_lock_release_recursive>
 800d972:	bf00      	nop
 800d974:	20000b3d 	.word	0x20000b3d

0800d978 <__sinit>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	4604      	mov	r4, r0
 800d97c:	f7ff fff0 	bl	800d960 <__sfp_lock_acquire>
 800d980:	6a23      	ldr	r3, [r4, #32]
 800d982:	b11b      	cbz	r3, 800d98c <__sinit+0x14>
 800d984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d988:	f7ff bff0 	b.w	800d96c <__sfp_lock_release>
 800d98c:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <__sinit+0x28>)
 800d98e:	6223      	str	r3, [r4, #32]
 800d990:	4b04      	ldr	r3, [pc, #16]	@ (800d9a4 <__sinit+0x2c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1f5      	bne.n	800d984 <__sinit+0xc>
 800d998:	f7ff ffc4 	bl	800d924 <global_stdio_init.part.0>
 800d99c:	e7f2      	b.n	800d984 <__sinit+0xc>
 800d99e:	bf00      	nop
 800d9a0:	0800d8e5 	.word	0x0800d8e5
 800d9a4:	20000b34 	.word	0x20000b34

0800d9a8 <_fwalk_sglue>:
 800d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ac:	4607      	mov	r7, r0
 800d9ae:	4688      	mov	r8, r1
 800d9b0:	4614      	mov	r4, r2
 800d9b2:	2600      	movs	r6, #0
 800d9b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9b8:	f1b9 0901 	subs.w	r9, r9, #1
 800d9bc:	d505      	bpl.n	800d9ca <_fwalk_sglue+0x22>
 800d9be:	6824      	ldr	r4, [r4, #0]
 800d9c0:	2c00      	cmp	r4, #0
 800d9c2:	d1f7      	bne.n	800d9b4 <_fwalk_sglue+0xc>
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ca:	89ab      	ldrh	r3, [r5, #12]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d907      	bls.n	800d9e0 <_fwalk_sglue+0x38>
 800d9d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	d003      	beq.n	800d9e0 <_fwalk_sglue+0x38>
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4638      	mov	r0, r7
 800d9dc:	47c0      	blx	r8
 800d9de:	4306      	orrs	r6, r0
 800d9e0:	3568      	adds	r5, #104	@ 0x68
 800d9e2:	e7e9      	b.n	800d9b8 <_fwalk_sglue+0x10>

0800d9e4 <iprintf>:
 800d9e4:	b40f      	push	{r0, r1, r2, r3}
 800d9e6:	b507      	push	{r0, r1, r2, lr}
 800d9e8:	4906      	ldr	r1, [pc, #24]	@ (800da04 <iprintf+0x20>)
 800d9ea:	ab04      	add	r3, sp, #16
 800d9ec:	6808      	ldr	r0, [r1, #0]
 800d9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f2:	6881      	ldr	r1, [r0, #8]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	f001 fb35 	bl	800f064 <_vfiprintf_r>
 800d9fa:	b003      	add	sp, #12
 800d9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800da00:	b004      	add	sp, #16
 800da02:	4770      	bx	lr
 800da04:	20000038 	.word	0x20000038

0800da08 <putchar>:
 800da08:	4b02      	ldr	r3, [pc, #8]	@ (800da14 <putchar+0xc>)
 800da0a:	4601      	mov	r1, r0
 800da0c:	6818      	ldr	r0, [r3, #0]
 800da0e:	6882      	ldr	r2, [r0, #8]
 800da10:	f001 bcec 	b.w	800f3ec <_putc_r>
 800da14:	20000038 	.word	0x20000038

0800da18 <__sread>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	460c      	mov	r4, r1
 800da1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da20:	f000 f86c 	bl	800dafc <_read_r>
 800da24:	2800      	cmp	r0, #0
 800da26:	bfab      	itete	ge
 800da28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da2a:	89a3      	ldrhlt	r3, [r4, #12]
 800da2c:	181b      	addge	r3, r3, r0
 800da2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da32:	bfac      	ite	ge
 800da34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da36:	81a3      	strhlt	r3, [r4, #12]
 800da38:	bd10      	pop	{r4, pc}

0800da3a <__swrite>:
 800da3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3e:	461f      	mov	r7, r3
 800da40:	898b      	ldrh	r3, [r1, #12]
 800da42:	05db      	lsls	r3, r3, #23
 800da44:	4605      	mov	r5, r0
 800da46:	460c      	mov	r4, r1
 800da48:	4616      	mov	r6, r2
 800da4a:	d505      	bpl.n	800da58 <__swrite+0x1e>
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	2302      	movs	r3, #2
 800da52:	2200      	movs	r2, #0
 800da54:	f000 f840 	bl	800dad8 <_lseek_r>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	4632      	mov	r2, r6
 800da66:	463b      	mov	r3, r7
 800da68:	4628      	mov	r0, r5
 800da6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	f000 b867 	b.w	800db40 <_write_r>

0800da72 <__sseek>:
 800da72:	b510      	push	{r4, lr}
 800da74:	460c      	mov	r4, r1
 800da76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da7a:	f000 f82d 	bl	800dad8 <_lseek_r>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	bf15      	itete	ne
 800da84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da8e:	81a3      	strheq	r3, [r4, #12]
 800da90:	bf18      	it	ne
 800da92:	81a3      	strhne	r3, [r4, #12]
 800da94:	bd10      	pop	{r4, pc}

0800da96 <__sclose>:
 800da96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9a:	f000 b80d 	b.w	800dab8 <_close_r>

0800da9e <memset>:
 800da9e:	4402      	add	r2, r0
 800daa0:	4603      	mov	r3, r0
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d100      	bne.n	800daa8 <memset+0xa>
 800daa6:	4770      	bx	lr
 800daa8:	f803 1b01 	strb.w	r1, [r3], #1
 800daac:	e7f9      	b.n	800daa2 <memset+0x4>
	...

0800dab0 <_localeconv_r>:
 800dab0:	4800      	ldr	r0, [pc, #0]	@ (800dab4 <_localeconv_r+0x4>)
 800dab2:	4770      	bx	lr
 800dab4:	20000178 	.word	0x20000178

0800dab8 <_close_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d06      	ldr	r5, [pc, #24]	@ (800dad4 <_close_r+0x1c>)
 800dabc:	2300      	movs	r3, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	602b      	str	r3, [r5, #0]
 800dac4:	f7f5 fddd 	bl	8003682 <_close>
 800dac8:	1c43      	adds	r3, r0, #1
 800daca:	d102      	bne.n	800dad2 <_close_r+0x1a>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	b103      	cbz	r3, 800dad2 <_close_r+0x1a>
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	bd38      	pop	{r3, r4, r5, pc}
 800dad4:	20000b38 	.word	0x20000b38

0800dad8 <_lseek_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	@ (800daf8 <_lseek_r+0x20>)
 800dadc:	4604      	mov	r4, r0
 800dade:	4608      	mov	r0, r1
 800dae0:	4611      	mov	r1, r2
 800dae2:	2200      	movs	r2, #0
 800dae4:	602a      	str	r2, [r5, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	f7f5 fdf2 	bl	80036d0 <_lseek>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_lseek_r+0x1e>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_lseek_r+0x1e>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	20000b38 	.word	0x20000b38

0800dafc <_read_r>:
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	4d07      	ldr	r5, [pc, #28]	@ (800db1c <_read_r+0x20>)
 800db00:	4604      	mov	r4, r0
 800db02:	4608      	mov	r0, r1
 800db04:	4611      	mov	r1, r2
 800db06:	2200      	movs	r2, #0
 800db08:	602a      	str	r2, [r5, #0]
 800db0a:	461a      	mov	r2, r3
 800db0c:	f7f5 fd80 	bl	8003610 <_read>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	d102      	bne.n	800db1a <_read_r+0x1e>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	b103      	cbz	r3, 800db1a <_read_r+0x1e>
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	20000b38 	.word	0x20000b38

0800db20 <_sbrk_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4d06      	ldr	r5, [pc, #24]	@ (800db3c <_sbrk_r+0x1c>)
 800db24:	2300      	movs	r3, #0
 800db26:	4604      	mov	r4, r0
 800db28:	4608      	mov	r0, r1
 800db2a:	602b      	str	r3, [r5, #0]
 800db2c:	f7f5 fdde 	bl	80036ec <_sbrk>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	d102      	bne.n	800db3a <_sbrk_r+0x1a>
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	b103      	cbz	r3, 800db3a <_sbrk_r+0x1a>
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	bd38      	pop	{r3, r4, r5, pc}
 800db3c:	20000b38 	.word	0x20000b38

0800db40 <_write_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4d07      	ldr	r5, [pc, #28]	@ (800db60 <_write_r+0x20>)
 800db44:	4604      	mov	r4, r0
 800db46:	4608      	mov	r0, r1
 800db48:	4611      	mov	r1, r2
 800db4a:	2200      	movs	r2, #0
 800db4c:	602a      	str	r2, [r5, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	f7f5 fd7b 	bl	800364a <_write>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_write_r+0x1e>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_write_r+0x1e>
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	20000b38 	.word	0x20000b38

0800db64 <__errno>:
 800db64:	4b01      	ldr	r3, [pc, #4]	@ (800db6c <__errno+0x8>)
 800db66:	6818      	ldr	r0, [r3, #0]
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	20000038 	.word	0x20000038

0800db70 <__libc_init_array>:
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	4d0d      	ldr	r5, [pc, #52]	@ (800dba8 <__libc_init_array+0x38>)
 800db74:	4c0d      	ldr	r4, [pc, #52]	@ (800dbac <__libc_init_array+0x3c>)
 800db76:	1b64      	subs	r4, r4, r5
 800db78:	10a4      	asrs	r4, r4, #2
 800db7a:	2600      	movs	r6, #0
 800db7c:	42a6      	cmp	r6, r4
 800db7e:	d109      	bne.n	800db94 <__libc_init_array+0x24>
 800db80:	4d0b      	ldr	r5, [pc, #44]	@ (800dbb0 <__libc_init_array+0x40>)
 800db82:	4c0c      	ldr	r4, [pc, #48]	@ (800dbb4 <__libc_init_array+0x44>)
 800db84:	f001 fe2e 	bl	800f7e4 <_init>
 800db88:	1b64      	subs	r4, r4, r5
 800db8a:	10a4      	asrs	r4, r4, #2
 800db8c:	2600      	movs	r6, #0
 800db8e:	42a6      	cmp	r6, r4
 800db90:	d105      	bne.n	800db9e <__libc_init_array+0x2e>
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	f855 3b04 	ldr.w	r3, [r5], #4
 800db98:	4798      	blx	r3
 800db9a:	3601      	adds	r6, #1
 800db9c:	e7ee      	b.n	800db7c <__libc_init_array+0xc>
 800db9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba2:	4798      	blx	r3
 800dba4:	3601      	adds	r6, #1
 800dba6:	e7f2      	b.n	800db8e <__libc_init_array+0x1e>
 800dba8:	08015078 	.word	0x08015078
 800dbac:	08015078 	.word	0x08015078
 800dbb0:	08015078 	.word	0x08015078
 800dbb4:	0801507c 	.word	0x0801507c

0800dbb8 <__retarget_lock_init_recursive>:
 800dbb8:	4770      	bx	lr

0800dbba <__retarget_lock_acquire_recursive>:
 800dbba:	4770      	bx	lr

0800dbbc <__retarget_lock_release_recursive>:
 800dbbc:	4770      	bx	lr

0800dbbe <memcpy>:
 800dbbe:	440a      	add	r2, r1
 800dbc0:	4291      	cmp	r1, r2
 800dbc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbc6:	d100      	bne.n	800dbca <memcpy+0xc>
 800dbc8:	4770      	bx	lr
 800dbca:	b510      	push	{r4, lr}
 800dbcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbd4:	4291      	cmp	r1, r2
 800dbd6:	d1f9      	bne.n	800dbcc <memcpy+0xe>
 800dbd8:	bd10      	pop	{r4, pc}

0800dbda <quorem>:
 800dbda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbde:	6903      	ldr	r3, [r0, #16]
 800dbe0:	690c      	ldr	r4, [r1, #16]
 800dbe2:	42a3      	cmp	r3, r4
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	db7e      	blt.n	800dce6 <quorem+0x10c>
 800dbe8:	3c01      	subs	r4, #1
 800dbea:	f101 0814 	add.w	r8, r1, #20
 800dbee:	00a3      	lsls	r3, r4, #2
 800dbf0:	f100 0514 	add.w	r5, r0, #20
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbfa:	9301      	str	r3, [sp, #4]
 800dbfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc04:	3301      	adds	r3, #1
 800dc06:	429a      	cmp	r2, r3
 800dc08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc10:	d32e      	bcc.n	800dc70 <quorem+0x96>
 800dc12:	f04f 0a00 	mov.w	sl, #0
 800dc16:	46c4      	mov	ip, r8
 800dc18:	46ae      	mov	lr, r5
 800dc1a:	46d3      	mov	fp, sl
 800dc1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc20:	b298      	uxth	r0, r3
 800dc22:	fb06 a000 	mla	r0, r6, r0, sl
 800dc26:	0c02      	lsrs	r2, r0, #16
 800dc28:	0c1b      	lsrs	r3, r3, #16
 800dc2a:	fb06 2303 	mla	r3, r6, r3, r2
 800dc2e:	f8de 2000 	ldr.w	r2, [lr]
 800dc32:	b280      	uxth	r0, r0
 800dc34:	b292      	uxth	r2, r2
 800dc36:	1a12      	subs	r2, r2, r0
 800dc38:	445a      	add	r2, fp
 800dc3a:	f8de 0000 	ldr.w	r0, [lr]
 800dc3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc4c:	b292      	uxth	r2, r2
 800dc4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc52:	45e1      	cmp	r9, ip
 800dc54:	f84e 2b04 	str.w	r2, [lr], #4
 800dc58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc5c:	d2de      	bcs.n	800dc1c <quorem+0x42>
 800dc5e:	9b00      	ldr	r3, [sp, #0]
 800dc60:	58eb      	ldr	r3, [r5, r3]
 800dc62:	b92b      	cbnz	r3, 800dc70 <quorem+0x96>
 800dc64:	9b01      	ldr	r3, [sp, #4]
 800dc66:	3b04      	subs	r3, #4
 800dc68:	429d      	cmp	r5, r3
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	d32f      	bcc.n	800dcce <quorem+0xf4>
 800dc6e:	613c      	str	r4, [r7, #16]
 800dc70:	4638      	mov	r0, r7
 800dc72:	f001 f8c5 	bl	800ee00 <__mcmp>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	db25      	blt.n	800dcc6 <quorem+0xec>
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc82:	f8d1 c000 	ldr.w	ip, [r1]
 800dc86:	fa1f fe82 	uxth.w	lr, r2
 800dc8a:	fa1f f38c 	uxth.w	r3, ip
 800dc8e:	eba3 030e 	sub.w	r3, r3, lr
 800dc92:	4403      	add	r3, r0
 800dc94:	0c12      	lsrs	r2, r2, #16
 800dc96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dca4:	45c1      	cmp	r9, r8
 800dca6:	f841 3b04 	str.w	r3, [r1], #4
 800dcaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dcae:	d2e6      	bcs.n	800dc7e <quorem+0xa4>
 800dcb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcb8:	b922      	cbnz	r2, 800dcc4 <quorem+0xea>
 800dcba:	3b04      	subs	r3, #4
 800dcbc:	429d      	cmp	r5, r3
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	d30b      	bcc.n	800dcda <quorem+0x100>
 800dcc2:	613c      	str	r4, [r7, #16]
 800dcc4:	3601      	adds	r6, #1
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	b003      	add	sp, #12
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	6812      	ldr	r2, [r2, #0]
 800dcd0:	3b04      	subs	r3, #4
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	d1cb      	bne.n	800dc6e <quorem+0x94>
 800dcd6:	3c01      	subs	r4, #1
 800dcd8:	e7c6      	b.n	800dc68 <quorem+0x8e>
 800dcda:	6812      	ldr	r2, [r2, #0]
 800dcdc:	3b04      	subs	r3, #4
 800dcde:	2a00      	cmp	r2, #0
 800dce0:	d1ef      	bne.n	800dcc2 <quorem+0xe8>
 800dce2:	3c01      	subs	r4, #1
 800dce4:	e7ea      	b.n	800dcbc <quorem+0xe2>
 800dce6:	2000      	movs	r0, #0
 800dce8:	e7ee      	b.n	800dcc8 <quorem+0xee>
 800dcea:	0000      	movs	r0, r0
 800dcec:	0000      	movs	r0, r0
	...

0800dcf0 <_dtoa_r>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	69c7      	ldr	r7, [r0, #28]
 800dcf6:	b099      	sub	sp, #100	@ 0x64
 800dcf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcfc:	ec55 4b10 	vmov	r4, r5, d0
 800dd00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd02:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd04:	4683      	mov	fp, r0
 800dd06:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd0a:	b97f      	cbnz	r7, 800dd2c <_dtoa_r+0x3c>
 800dd0c:	2010      	movs	r0, #16
 800dd0e:	f7ff f899 	bl	800ce44 <malloc>
 800dd12:	4602      	mov	r2, r0
 800dd14:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd18:	b920      	cbnz	r0, 800dd24 <_dtoa_r+0x34>
 800dd1a:	4ba7      	ldr	r3, [pc, #668]	@ (800dfb8 <_dtoa_r+0x2c8>)
 800dd1c:	21ef      	movs	r1, #239	@ 0xef
 800dd1e:	48a7      	ldr	r0, [pc, #668]	@ (800dfbc <_dtoa_r+0x2cc>)
 800dd20:	f001 fc2c 	bl	800f57c <__assert_func>
 800dd24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd28:	6007      	str	r7, [r0, #0]
 800dd2a:	60c7      	str	r7, [r0, #12]
 800dd2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	b159      	cbz	r1, 800dd4c <_dtoa_r+0x5c>
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	604a      	str	r2, [r1, #4]
 800dd38:	2301      	movs	r3, #1
 800dd3a:	4093      	lsls	r3, r2
 800dd3c:	608b      	str	r3, [r1, #8]
 800dd3e:	4658      	mov	r0, fp
 800dd40:	f000 fe24 	bl	800e98c <_Bfree>
 800dd44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	1e2b      	subs	r3, r5, #0
 800dd4e:	bfb9      	ittee	lt
 800dd50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd54:	9303      	strlt	r3, [sp, #12]
 800dd56:	2300      	movge	r3, #0
 800dd58:	6033      	strge	r3, [r6, #0]
 800dd5a:	9f03      	ldr	r7, [sp, #12]
 800dd5c:	4b98      	ldr	r3, [pc, #608]	@ (800dfc0 <_dtoa_r+0x2d0>)
 800dd5e:	bfbc      	itt	lt
 800dd60:	2201      	movlt	r2, #1
 800dd62:	6032      	strlt	r2, [r6, #0]
 800dd64:	43bb      	bics	r3, r7
 800dd66:	d112      	bne.n	800dd8e <_dtoa_r+0x9e>
 800dd68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd74:	4323      	orrs	r3, r4
 800dd76:	f000 854d 	beq.w	800e814 <_dtoa_r+0xb24>
 800dd7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dfd4 <_dtoa_r+0x2e4>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 854f 	beq.w	800e824 <_dtoa_r+0xb34>
 800dd86:	f10a 0303 	add.w	r3, sl, #3
 800dd8a:	f000 bd49 	b.w	800e820 <_dtoa_r+0xb30>
 800dd8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd92:	2200      	movs	r2, #0
 800dd94:	ec51 0b17 	vmov	r0, r1, d7
 800dd98:	2300      	movs	r3, #0
 800dd9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dd9e:	f7f2 feab 	bl	8000af8 <__aeabi_dcmpeq>
 800dda2:	4680      	mov	r8, r0
 800dda4:	b158      	cbz	r0, 800ddbe <_dtoa_r+0xce>
 800dda6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dda8:	2301      	movs	r3, #1
 800ddaa:	6013      	str	r3, [r2, #0]
 800ddac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddae:	b113      	cbz	r3, 800ddb6 <_dtoa_r+0xc6>
 800ddb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ddb2:	4b84      	ldr	r3, [pc, #528]	@ (800dfc4 <_dtoa_r+0x2d4>)
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dfd8 <_dtoa_r+0x2e8>
 800ddba:	f000 bd33 	b.w	800e824 <_dtoa_r+0xb34>
 800ddbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddc2:	aa16      	add	r2, sp, #88	@ 0x58
 800ddc4:	a917      	add	r1, sp, #92	@ 0x5c
 800ddc6:	4658      	mov	r0, fp
 800ddc8:	f001 f8ca 	bl	800ef60 <__d2b>
 800ddcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ddd0:	4681      	mov	r9, r0
 800ddd2:	2e00      	cmp	r6, #0
 800ddd4:	d077      	beq.n	800dec6 <_dtoa_r+0x1d6>
 800ddd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dde0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dde4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dde8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ddec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4b74      	ldr	r3, [pc, #464]	@ (800dfc8 <_dtoa_r+0x2d8>)
 800ddf6:	f7f2 fa5f 	bl	80002b8 <__aeabi_dsub>
 800ddfa:	a369      	add	r3, pc, #420	@ (adr r3, 800dfa0 <_dtoa_r+0x2b0>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	f7f2 fc12 	bl	8000628 <__aeabi_dmul>
 800de04:	a368      	add	r3, pc, #416	@ (adr r3, 800dfa8 <_dtoa_r+0x2b8>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	f7f2 fa57 	bl	80002bc <__adddf3>
 800de0e:	4604      	mov	r4, r0
 800de10:	4630      	mov	r0, r6
 800de12:	460d      	mov	r5, r1
 800de14:	f7f2 fb9e 	bl	8000554 <__aeabi_i2d>
 800de18:	a365      	add	r3, pc, #404	@ (adr r3, 800dfb0 <_dtoa_r+0x2c0>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f7f2 fc03 	bl	8000628 <__aeabi_dmul>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4620      	mov	r0, r4
 800de28:	4629      	mov	r1, r5
 800de2a:	f7f2 fa47 	bl	80002bc <__adddf3>
 800de2e:	4604      	mov	r4, r0
 800de30:	460d      	mov	r5, r1
 800de32:	f7f2 fea9 	bl	8000b88 <__aeabi_d2iz>
 800de36:	2200      	movs	r2, #0
 800de38:	4607      	mov	r7, r0
 800de3a:	2300      	movs	r3, #0
 800de3c:	4620      	mov	r0, r4
 800de3e:	4629      	mov	r1, r5
 800de40:	f7f2 fe64 	bl	8000b0c <__aeabi_dcmplt>
 800de44:	b140      	cbz	r0, 800de58 <_dtoa_r+0x168>
 800de46:	4638      	mov	r0, r7
 800de48:	f7f2 fb84 	bl	8000554 <__aeabi_i2d>
 800de4c:	4622      	mov	r2, r4
 800de4e:	462b      	mov	r3, r5
 800de50:	f7f2 fe52 	bl	8000af8 <__aeabi_dcmpeq>
 800de54:	b900      	cbnz	r0, 800de58 <_dtoa_r+0x168>
 800de56:	3f01      	subs	r7, #1
 800de58:	2f16      	cmp	r7, #22
 800de5a:	d851      	bhi.n	800df00 <_dtoa_r+0x210>
 800de5c:	4b5b      	ldr	r3, [pc, #364]	@ (800dfcc <_dtoa_r+0x2dc>)
 800de5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de6a:	f7f2 fe4f 	bl	8000b0c <__aeabi_dcmplt>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d048      	beq.n	800df04 <_dtoa_r+0x214>
 800de72:	3f01      	subs	r7, #1
 800de74:	2300      	movs	r3, #0
 800de76:	9312      	str	r3, [sp, #72]	@ 0x48
 800de78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800de7a:	1b9b      	subs	r3, r3, r6
 800de7c:	1e5a      	subs	r2, r3, #1
 800de7e:	bf44      	itt	mi
 800de80:	f1c3 0801 	rsbmi	r8, r3, #1
 800de84:	2300      	movmi	r3, #0
 800de86:	9208      	str	r2, [sp, #32]
 800de88:	bf54      	ite	pl
 800de8a:	f04f 0800 	movpl.w	r8, #0
 800de8e:	9308      	strmi	r3, [sp, #32]
 800de90:	2f00      	cmp	r7, #0
 800de92:	db39      	blt.n	800df08 <_dtoa_r+0x218>
 800de94:	9b08      	ldr	r3, [sp, #32]
 800de96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800de98:	443b      	add	r3, r7
 800de9a:	9308      	str	r3, [sp, #32]
 800de9c:	2300      	movs	r3, #0
 800de9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea2:	2b09      	cmp	r3, #9
 800dea4:	d864      	bhi.n	800df70 <_dtoa_r+0x280>
 800dea6:	2b05      	cmp	r3, #5
 800dea8:	bfc4      	itt	gt
 800deaa:	3b04      	subgt	r3, #4
 800deac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800deae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb0:	f1a3 0302 	sub.w	r3, r3, #2
 800deb4:	bfcc      	ite	gt
 800deb6:	2400      	movgt	r4, #0
 800deb8:	2401      	movle	r4, #1
 800deba:	2b03      	cmp	r3, #3
 800debc:	d863      	bhi.n	800df86 <_dtoa_r+0x296>
 800debe:	e8df f003 	tbb	[pc, r3]
 800dec2:	372a      	.short	0x372a
 800dec4:	5535      	.short	0x5535
 800dec6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800deca:	441e      	add	r6, r3
 800decc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ded0:	2b20      	cmp	r3, #32
 800ded2:	bfc1      	itttt	gt
 800ded4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ded8:	409f      	lslgt	r7, r3
 800deda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dede:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dee2:	bfd6      	itet	le
 800dee4:	f1c3 0320 	rsble	r3, r3, #32
 800dee8:	ea47 0003 	orrgt.w	r0, r7, r3
 800deec:	fa04 f003 	lslle.w	r0, r4, r3
 800def0:	f7f2 fb20 	bl	8000534 <__aeabi_ui2d>
 800def4:	2201      	movs	r2, #1
 800def6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800defa:	3e01      	subs	r6, #1
 800defc:	9214      	str	r2, [sp, #80]	@ 0x50
 800defe:	e777      	b.n	800ddf0 <_dtoa_r+0x100>
 800df00:	2301      	movs	r3, #1
 800df02:	e7b8      	b.n	800de76 <_dtoa_r+0x186>
 800df04:	9012      	str	r0, [sp, #72]	@ 0x48
 800df06:	e7b7      	b.n	800de78 <_dtoa_r+0x188>
 800df08:	427b      	negs	r3, r7
 800df0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df0c:	2300      	movs	r3, #0
 800df0e:	eba8 0807 	sub.w	r8, r8, r7
 800df12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df14:	e7c4      	b.n	800dea0 <_dtoa_r+0x1b0>
 800df16:	2300      	movs	r3, #0
 800df18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dc35      	bgt.n	800df8c <_dtoa_r+0x29c>
 800df20:	2301      	movs	r3, #1
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	9307      	str	r3, [sp, #28]
 800df26:	461a      	mov	r2, r3
 800df28:	920e      	str	r2, [sp, #56]	@ 0x38
 800df2a:	e00b      	b.n	800df44 <_dtoa_r+0x254>
 800df2c:	2301      	movs	r3, #1
 800df2e:	e7f3      	b.n	800df18 <_dtoa_r+0x228>
 800df30:	2300      	movs	r3, #0
 800df32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df36:	18fb      	adds	r3, r7, r3
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	3301      	adds	r3, #1
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	9307      	str	r3, [sp, #28]
 800df40:	bfb8      	it	lt
 800df42:	2301      	movlt	r3, #1
 800df44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df48:	2100      	movs	r1, #0
 800df4a:	2204      	movs	r2, #4
 800df4c:	f102 0514 	add.w	r5, r2, #20
 800df50:	429d      	cmp	r5, r3
 800df52:	d91f      	bls.n	800df94 <_dtoa_r+0x2a4>
 800df54:	6041      	str	r1, [r0, #4]
 800df56:	4658      	mov	r0, fp
 800df58:	f000 fcd8 	bl	800e90c <_Balloc>
 800df5c:	4682      	mov	sl, r0
 800df5e:	2800      	cmp	r0, #0
 800df60:	d13c      	bne.n	800dfdc <_dtoa_r+0x2ec>
 800df62:	4b1b      	ldr	r3, [pc, #108]	@ (800dfd0 <_dtoa_r+0x2e0>)
 800df64:	4602      	mov	r2, r0
 800df66:	f240 11af 	movw	r1, #431	@ 0x1af
 800df6a:	e6d8      	b.n	800dd1e <_dtoa_r+0x2e>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e7e0      	b.n	800df32 <_dtoa_r+0x242>
 800df70:	2401      	movs	r4, #1
 800df72:	2300      	movs	r3, #0
 800df74:	9309      	str	r3, [sp, #36]	@ 0x24
 800df76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df78:	f04f 33ff 	mov.w	r3, #4294967295
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	2200      	movs	r2, #0
 800df82:	2312      	movs	r3, #18
 800df84:	e7d0      	b.n	800df28 <_dtoa_r+0x238>
 800df86:	2301      	movs	r3, #1
 800df88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df8a:	e7f5      	b.n	800df78 <_dtoa_r+0x288>
 800df8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	9307      	str	r3, [sp, #28]
 800df92:	e7d7      	b.n	800df44 <_dtoa_r+0x254>
 800df94:	3101      	adds	r1, #1
 800df96:	0052      	lsls	r2, r2, #1
 800df98:	e7d8      	b.n	800df4c <_dtoa_r+0x25c>
 800df9a:	bf00      	nop
 800df9c:	f3af 8000 	nop.w
 800dfa0:	636f4361 	.word	0x636f4361
 800dfa4:	3fd287a7 	.word	0x3fd287a7
 800dfa8:	8b60c8b3 	.word	0x8b60c8b3
 800dfac:	3fc68a28 	.word	0x3fc68a28
 800dfb0:	509f79fb 	.word	0x509f79fb
 800dfb4:	3fd34413 	.word	0x3fd34413
 800dfb8:	08014d3d 	.word	0x08014d3d
 800dfbc:	08014d54 	.word	0x08014d54
 800dfc0:	7ff00000 	.word	0x7ff00000
 800dfc4:	08014d0d 	.word	0x08014d0d
 800dfc8:	3ff80000 	.word	0x3ff80000
 800dfcc:	08014e50 	.word	0x08014e50
 800dfd0:	08014dac 	.word	0x08014dac
 800dfd4:	08014d39 	.word	0x08014d39
 800dfd8:	08014d0c 	.word	0x08014d0c
 800dfdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dfe0:	6018      	str	r0, [r3, #0]
 800dfe2:	9b07      	ldr	r3, [sp, #28]
 800dfe4:	2b0e      	cmp	r3, #14
 800dfe6:	f200 80a4 	bhi.w	800e132 <_dtoa_r+0x442>
 800dfea:	2c00      	cmp	r4, #0
 800dfec:	f000 80a1 	beq.w	800e132 <_dtoa_r+0x442>
 800dff0:	2f00      	cmp	r7, #0
 800dff2:	dd33      	ble.n	800e05c <_dtoa_r+0x36c>
 800dff4:	4bad      	ldr	r3, [pc, #692]	@ (800e2ac <_dtoa_r+0x5bc>)
 800dff6:	f007 020f 	and.w	r2, r7, #15
 800dffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dffe:	ed93 7b00 	vldr	d7, [r3]
 800e002:	05f8      	lsls	r0, r7, #23
 800e004:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e00c:	d516      	bpl.n	800e03c <_dtoa_r+0x34c>
 800e00e:	4ba8      	ldr	r3, [pc, #672]	@ (800e2b0 <_dtoa_r+0x5c0>)
 800e010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e018:	f7f2 fc30 	bl	800087c <__aeabi_ddiv>
 800e01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e020:	f004 040f 	and.w	r4, r4, #15
 800e024:	2603      	movs	r6, #3
 800e026:	4da2      	ldr	r5, [pc, #648]	@ (800e2b0 <_dtoa_r+0x5c0>)
 800e028:	b954      	cbnz	r4, 800e040 <_dtoa_r+0x350>
 800e02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e032:	f7f2 fc23 	bl	800087c <__aeabi_ddiv>
 800e036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e03a:	e028      	b.n	800e08e <_dtoa_r+0x39e>
 800e03c:	2602      	movs	r6, #2
 800e03e:	e7f2      	b.n	800e026 <_dtoa_r+0x336>
 800e040:	07e1      	lsls	r1, r4, #31
 800e042:	d508      	bpl.n	800e056 <_dtoa_r+0x366>
 800e044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e04c:	f7f2 faec 	bl	8000628 <__aeabi_dmul>
 800e050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e054:	3601      	adds	r6, #1
 800e056:	1064      	asrs	r4, r4, #1
 800e058:	3508      	adds	r5, #8
 800e05a:	e7e5      	b.n	800e028 <_dtoa_r+0x338>
 800e05c:	f000 80d2 	beq.w	800e204 <_dtoa_r+0x514>
 800e060:	427c      	negs	r4, r7
 800e062:	4b92      	ldr	r3, [pc, #584]	@ (800e2ac <_dtoa_r+0x5bc>)
 800e064:	4d92      	ldr	r5, [pc, #584]	@ (800e2b0 <_dtoa_r+0x5c0>)
 800e066:	f004 020f 	and.w	r2, r4, #15
 800e06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e076:	f7f2 fad7 	bl	8000628 <__aeabi_dmul>
 800e07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e07e:	1124      	asrs	r4, r4, #4
 800e080:	2300      	movs	r3, #0
 800e082:	2602      	movs	r6, #2
 800e084:	2c00      	cmp	r4, #0
 800e086:	f040 80b2 	bne.w	800e1ee <_dtoa_r+0x4fe>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1d3      	bne.n	800e036 <_dtoa_r+0x346>
 800e08e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e090:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 80b7 	beq.w	800e208 <_dtoa_r+0x518>
 800e09a:	4b86      	ldr	r3, [pc, #536]	@ (800e2b4 <_dtoa_r+0x5c4>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	4620      	mov	r0, r4
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7f2 fd33 	bl	8000b0c <__aeabi_dcmplt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f000 80ae 	beq.w	800e208 <_dtoa_r+0x518>
 800e0ac:	9b07      	ldr	r3, [sp, #28]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 80aa 	beq.w	800e208 <_dtoa_r+0x518>
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	dd37      	ble.n	800e12a <_dtoa_r+0x43a>
 800e0ba:	1e7b      	subs	r3, r7, #1
 800e0bc:	9304      	str	r3, [sp, #16]
 800e0be:	4620      	mov	r0, r4
 800e0c0:	4b7d      	ldr	r3, [pc, #500]	@ (800e2b8 <_dtoa_r+0x5c8>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	f7f2 faaf 	bl	8000628 <__aeabi_dmul>
 800e0ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0ce:	9c00      	ldr	r4, [sp, #0]
 800e0d0:	3601      	adds	r6, #1
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f7f2 fa3e 	bl	8000554 <__aeabi_i2d>
 800e0d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0dc:	f7f2 faa4 	bl	8000628 <__aeabi_dmul>
 800e0e0:	4b76      	ldr	r3, [pc, #472]	@ (800e2bc <_dtoa_r+0x5cc>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f7f2 f8ea 	bl	80002bc <__adddf3>
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e0ee:	2c00      	cmp	r4, #0
 800e0f0:	f040 808d 	bne.w	800e20e <_dtoa_r+0x51e>
 800e0f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0f8:	4b71      	ldr	r3, [pc, #452]	@ (800e2c0 <_dtoa_r+0x5d0>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f7f2 f8dc 	bl	80002b8 <__aeabi_dsub>
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e108:	462a      	mov	r2, r5
 800e10a:	4633      	mov	r3, r6
 800e10c:	f7f2 fd1c 	bl	8000b48 <__aeabi_dcmpgt>
 800e110:	2800      	cmp	r0, #0
 800e112:	f040 828b 	bne.w	800e62c <_dtoa_r+0x93c>
 800e116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e11a:	462a      	mov	r2, r5
 800e11c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e120:	f7f2 fcf4 	bl	8000b0c <__aeabi_dcmplt>
 800e124:	2800      	cmp	r0, #0
 800e126:	f040 8128 	bne.w	800e37a <_dtoa_r+0x68a>
 800e12a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e12e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e134:	2b00      	cmp	r3, #0
 800e136:	f2c0 815a 	blt.w	800e3ee <_dtoa_r+0x6fe>
 800e13a:	2f0e      	cmp	r7, #14
 800e13c:	f300 8157 	bgt.w	800e3ee <_dtoa_r+0x6fe>
 800e140:	4b5a      	ldr	r3, [pc, #360]	@ (800e2ac <_dtoa_r+0x5bc>)
 800e142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e146:	ed93 7b00 	vldr	d7, [r3]
 800e14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	ed8d 7b00 	vstr	d7, [sp]
 800e152:	da03      	bge.n	800e15c <_dtoa_r+0x46c>
 800e154:	9b07      	ldr	r3, [sp, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f340 8101 	ble.w	800e35e <_dtoa_r+0x66e>
 800e15c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e160:	4656      	mov	r6, sl
 800e162:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e166:	4620      	mov	r0, r4
 800e168:	4629      	mov	r1, r5
 800e16a:	f7f2 fb87 	bl	800087c <__aeabi_ddiv>
 800e16e:	f7f2 fd0b 	bl	8000b88 <__aeabi_d2iz>
 800e172:	4680      	mov	r8, r0
 800e174:	f7f2 f9ee 	bl	8000554 <__aeabi_i2d>
 800e178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e17c:	f7f2 fa54 	bl	8000628 <__aeabi_dmul>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4620      	mov	r0, r4
 800e186:	4629      	mov	r1, r5
 800e188:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e18c:	f7f2 f894 	bl	80002b8 <__aeabi_dsub>
 800e190:	f806 4b01 	strb.w	r4, [r6], #1
 800e194:	9d07      	ldr	r5, [sp, #28]
 800e196:	eba6 040a 	sub.w	r4, r6, sl
 800e19a:	42a5      	cmp	r5, r4
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	f040 8117 	bne.w	800e3d2 <_dtoa_r+0x6e2>
 800e1a4:	f7f2 f88a 	bl	80002bc <__adddf3>
 800e1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	f7f2 fcca 	bl	8000b48 <__aeabi_dcmpgt>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	f040 80f9 	bne.w	800e3ac <_dtoa_r+0x6bc>
 800e1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fc99 	bl	8000af8 <__aeabi_dcmpeq>
 800e1c6:	b118      	cbz	r0, 800e1d0 <_dtoa_r+0x4e0>
 800e1c8:	f018 0f01 	tst.w	r8, #1
 800e1cc:	f040 80ee 	bne.w	800e3ac <_dtoa_r+0x6bc>
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	4658      	mov	r0, fp
 800e1d4:	f000 fbda 	bl	800e98c <_Bfree>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	7033      	strb	r3, [r6, #0]
 800e1dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1de:	3701      	adds	r7, #1
 800e1e0:	601f      	str	r7, [r3, #0]
 800e1e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 831d 	beq.w	800e824 <_dtoa_r+0xb34>
 800e1ea:	601e      	str	r6, [r3, #0]
 800e1ec:	e31a      	b.n	800e824 <_dtoa_r+0xb34>
 800e1ee:	07e2      	lsls	r2, r4, #31
 800e1f0:	d505      	bpl.n	800e1fe <_dtoa_r+0x50e>
 800e1f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1f6:	f7f2 fa17 	bl	8000628 <__aeabi_dmul>
 800e1fa:	3601      	adds	r6, #1
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	1064      	asrs	r4, r4, #1
 800e200:	3508      	adds	r5, #8
 800e202:	e73f      	b.n	800e084 <_dtoa_r+0x394>
 800e204:	2602      	movs	r6, #2
 800e206:	e742      	b.n	800e08e <_dtoa_r+0x39e>
 800e208:	9c07      	ldr	r4, [sp, #28]
 800e20a:	9704      	str	r7, [sp, #16]
 800e20c:	e761      	b.n	800e0d2 <_dtoa_r+0x3e2>
 800e20e:	4b27      	ldr	r3, [pc, #156]	@ (800e2ac <_dtoa_r+0x5bc>)
 800e210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e21a:	4454      	add	r4, sl
 800e21c:	2900      	cmp	r1, #0
 800e21e:	d053      	beq.n	800e2c8 <_dtoa_r+0x5d8>
 800e220:	4928      	ldr	r1, [pc, #160]	@ (800e2c4 <_dtoa_r+0x5d4>)
 800e222:	2000      	movs	r0, #0
 800e224:	f7f2 fb2a 	bl	800087c <__aeabi_ddiv>
 800e228:	4633      	mov	r3, r6
 800e22a:	462a      	mov	r2, r5
 800e22c:	f7f2 f844 	bl	80002b8 <__aeabi_dsub>
 800e230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e234:	4656      	mov	r6, sl
 800e236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e23a:	f7f2 fca5 	bl	8000b88 <__aeabi_d2iz>
 800e23e:	4605      	mov	r5, r0
 800e240:	f7f2 f988 	bl	8000554 <__aeabi_i2d>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e24c:	f7f2 f834 	bl	80002b8 <__aeabi_dsub>
 800e250:	3530      	adds	r5, #48	@ 0x30
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e25a:	f806 5b01 	strb.w	r5, [r6], #1
 800e25e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e262:	f7f2 fc53 	bl	8000b0c <__aeabi_dcmplt>
 800e266:	2800      	cmp	r0, #0
 800e268:	d171      	bne.n	800e34e <_dtoa_r+0x65e>
 800e26a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e26e:	4911      	ldr	r1, [pc, #68]	@ (800e2b4 <_dtoa_r+0x5c4>)
 800e270:	2000      	movs	r0, #0
 800e272:	f7f2 f821 	bl	80002b8 <__aeabi_dsub>
 800e276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e27a:	f7f2 fc47 	bl	8000b0c <__aeabi_dcmplt>
 800e27e:	2800      	cmp	r0, #0
 800e280:	f040 8095 	bne.w	800e3ae <_dtoa_r+0x6be>
 800e284:	42a6      	cmp	r6, r4
 800e286:	f43f af50 	beq.w	800e12a <_dtoa_r+0x43a>
 800e28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e28e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2b8 <_dtoa_r+0x5c8>)
 800e290:	2200      	movs	r2, #0
 800e292:	f7f2 f9c9 	bl	8000628 <__aeabi_dmul>
 800e296:	4b08      	ldr	r3, [pc, #32]	@ (800e2b8 <_dtoa_r+0x5c8>)
 800e298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e29c:	2200      	movs	r2, #0
 800e29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a2:	f7f2 f9c1 	bl	8000628 <__aeabi_dmul>
 800e2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2aa:	e7c4      	b.n	800e236 <_dtoa_r+0x546>
 800e2ac:	08014e50 	.word	0x08014e50
 800e2b0:	08014e28 	.word	0x08014e28
 800e2b4:	3ff00000 	.word	0x3ff00000
 800e2b8:	40240000 	.word	0x40240000
 800e2bc:	401c0000 	.word	0x401c0000
 800e2c0:	40140000 	.word	0x40140000
 800e2c4:	3fe00000 	.word	0x3fe00000
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f7f2 f9ac 	bl	8000628 <__aeabi_dmul>
 800e2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e2d6:	4656      	mov	r6, sl
 800e2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2dc:	f7f2 fc54 	bl	8000b88 <__aeabi_d2iz>
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	f7f2 f937 	bl	8000554 <__aeabi_i2d>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ee:	f7f1 ffe3 	bl	80002b8 <__aeabi_dsub>
 800e2f2:	3530      	adds	r5, #48	@ 0x30
 800e2f4:	f806 5b01 	strb.w	r5, [r6], #1
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	42a6      	cmp	r6, r4
 800e2fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e302:	f04f 0200 	mov.w	r2, #0
 800e306:	d124      	bne.n	800e352 <_dtoa_r+0x662>
 800e308:	4bac      	ldr	r3, [pc, #688]	@ (800e5bc <_dtoa_r+0x8cc>)
 800e30a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e30e:	f7f1 ffd5 	bl	80002bc <__adddf3>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e31a:	f7f2 fc15 	bl	8000b48 <__aeabi_dcmpgt>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d145      	bne.n	800e3ae <_dtoa_r+0x6be>
 800e322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e326:	49a5      	ldr	r1, [pc, #660]	@ (800e5bc <_dtoa_r+0x8cc>)
 800e328:	2000      	movs	r0, #0
 800e32a:	f7f1 ffc5 	bl	80002b8 <__aeabi_dsub>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e336:	f7f2 fbe9 	bl	8000b0c <__aeabi_dcmplt>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	f43f aef5 	beq.w	800e12a <_dtoa_r+0x43a>
 800e340:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e342:	1e73      	subs	r3, r6, #1
 800e344:	9315      	str	r3, [sp, #84]	@ 0x54
 800e346:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e34a:	2b30      	cmp	r3, #48	@ 0x30
 800e34c:	d0f8      	beq.n	800e340 <_dtoa_r+0x650>
 800e34e:	9f04      	ldr	r7, [sp, #16]
 800e350:	e73e      	b.n	800e1d0 <_dtoa_r+0x4e0>
 800e352:	4b9b      	ldr	r3, [pc, #620]	@ (800e5c0 <_dtoa_r+0x8d0>)
 800e354:	f7f2 f968 	bl	8000628 <__aeabi_dmul>
 800e358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e35c:	e7bc      	b.n	800e2d8 <_dtoa_r+0x5e8>
 800e35e:	d10c      	bne.n	800e37a <_dtoa_r+0x68a>
 800e360:	4b98      	ldr	r3, [pc, #608]	@ (800e5c4 <_dtoa_r+0x8d4>)
 800e362:	2200      	movs	r2, #0
 800e364:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e368:	f7f2 f95e 	bl	8000628 <__aeabi_dmul>
 800e36c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e370:	f7f2 fbe0 	bl	8000b34 <__aeabi_dcmpge>
 800e374:	2800      	cmp	r0, #0
 800e376:	f000 8157 	beq.w	800e628 <_dtoa_r+0x938>
 800e37a:	2400      	movs	r4, #0
 800e37c:	4625      	mov	r5, r4
 800e37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e380:	43db      	mvns	r3, r3
 800e382:	9304      	str	r3, [sp, #16]
 800e384:	4656      	mov	r6, sl
 800e386:	2700      	movs	r7, #0
 800e388:	4621      	mov	r1, r4
 800e38a:	4658      	mov	r0, fp
 800e38c:	f000 fafe 	bl	800e98c <_Bfree>
 800e390:	2d00      	cmp	r5, #0
 800e392:	d0dc      	beq.n	800e34e <_dtoa_r+0x65e>
 800e394:	b12f      	cbz	r7, 800e3a2 <_dtoa_r+0x6b2>
 800e396:	42af      	cmp	r7, r5
 800e398:	d003      	beq.n	800e3a2 <_dtoa_r+0x6b2>
 800e39a:	4639      	mov	r1, r7
 800e39c:	4658      	mov	r0, fp
 800e39e:	f000 faf5 	bl	800e98c <_Bfree>
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4658      	mov	r0, fp
 800e3a6:	f000 faf1 	bl	800e98c <_Bfree>
 800e3aa:	e7d0      	b.n	800e34e <_dtoa_r+0x65e>
 800e3ac:	9704      	str	r7, [sp, #16]
 800e3ae:	4633      	mov	r3, r6
 800e3b0:	461e      	mov	r6, r3
 800e3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3b6:	2a39      	cmp	r2, #57	@ 0x39
 800e3b8:	d107      	bne.n	800e3ca <_dtoa_r+0x6da>
 800e3ba:	459a      	cmp	sl, r3
 800e3bc:	d1f8      	bne.n	800e3b0 <_dtoa_r+0x6c0>
 800e3be:	9a04      	ldr	r2, [sp, #16]
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	9204      	str	r2, [sp, #16]
 800e3c4:	2230      	movs	r2, #48	@ 0x30
 800e3c6:	f88a 2000 	strb.w	r2, [sl]
 800e3ca:	781a      	ldrb	r2, [r3, #0]
 800e3cc:	3201      	adds	r2, #1
 800e3ce:	701a      	strb	r2, [r3, #0]
 800e3d0:	e7bd      	b.n	800e34e <_dtoa_r+0x65e>
 800e3d2:	4b7b      	ldr	r3, [pc, #492]	@ (800e5c0 <_dtoa_r+0x8d0>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f7f2 f927 	bl	8000628 <__aeabi_dmul>
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2300      	movs	r3, #0
 800e3de:	4604      	mov	r4, r0
 800e3e0:	460d      	mov	r5, r1
 800e3e2:	f7f2 fb89 	bl	8000af8 <__aeabi_dcmpeq>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	f43f aebb 	beq.w	800e162 <_dtoa_r+0x472>
 800e3ec:	e6f0      	b.n	800e1d0 <_dtoa_r+0x4e0>
 800e3ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	f000 80db 	beq.w	800e5ac <_dtoa_r+0x8bc>
 800e3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3f8:	2a01      	cmp	r2, #1
 800e3fa:	f300 80bf 	bgt.w	800e57c <_dtoa_r+0x88c>
 800e3fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e400:	2a00      	cmp	r2, #0
 800e402:	f000 80b7 	beq.w	800e574 <_dtoa_r+0x884>
 800e406:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e40a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e40c:	4646      	mov	r6, r8
 800e40e:	9a08      	ldr	r2, [sp, #32]
 800e410:	2101      	movs	r1, #1
 800e412:	441a      	add	r2, r3
 800e414:	4658      	mov	r0, fp
 800e416:	4498      	add	r8, r3
 800e418:	9208      	str	r2, [sp, #32]
 800e41a:	f000 fb6b 	bl	800eaf4 <__i2b>
 800e41e:	4605      	mov	r5, r0
 800e420:	b15e      	cbz	r6, 800e43a <_dtoa_r+0x74a>
 800e422:	9b08      	ldr	r3, [sp, #32]
 800e424:	2b00      	cmp	r3, #0
 800e426:	dd08      	ble.n	800e43a <_dtoa_r+0x74a>
 800e428:	42b3      	cmp	r3, r6
 800e42a:	9a08      	ldr	r2, [sp, #32]
 800e42c:	bfa8      	it	ge
 800e42e:	4633      	movge	r3, r6
 800e430:	eba8 0803 	sub.w	r8, r8, r3
 800e434:	1af6      	subs	r6, r6, r3
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	9308      	str	r3, [sp, #32]
 800e43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e43c:	b1f3      	cbz	r3, 800e47c <_dtoa_r+0x78c>
 800e43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 80b7 	beq.w	800e5b4 <_dtoa_r+0x8c4>
 800e446:	b18c      	cbz	r4, 800e46c <_dtoa_r+0x77c>
 800e448:	4629      	mov	r1, r5
 800e44a:	4622      	mov	r2, r4
 800e44c:	4658      	mov	r0, fp
 800e44e:	f000 fc11 	bl	800ec74 <__pow5mult>
 800e452:	464a      	mov	r2, r9
 800e454:	4601      	mov	r1, r0
 800e456:	4605      	mov	r5, r0
 800e458:	4658      	mov	r0, fp
 800e45a:	f000 fb61 	bl	800eb20 <__multiply>
 800e45e:	4649      	mov	r1, r9
 800e460:	9004      	str	r0, [sp, #16]
 800e462:	4658      	mov	r0, fp
 800e464:	f000 fa92 	bl	800e98c <_Bfree>
 800e468:	9b04      	ldr	r3, [sp, #16]
 800e46a:	4699      	mov	r9, r3
 800e46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e46e:	1b1a      	subs	r2, r3, r4
 800e470:	d004      	beq.n	800e47c <_dtoa_r+0x78c>
 800e472:	4649      	mov	r1, r9
 800e474:	4658      	mov	r0, fp
 800e476:	f000 fbfd 	bl	800ec74 <__pow5mult>
 800e47a:	4681      	mov	r9, r0
 800e47c:	2101      	movs	r1, #1
 800e47e:	4658      	mov	r0, fp
 800e480:	f000 fb38 	bl	800eaf4 <__i2b>
 800e484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e486:	4604      	mov	r4, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 81cf 	beq.w	800e82c <_dtoa_r+0xb3c>
 800e48e:	461a      	mov	r2, r3
 800e490:	4601      	mov	r1, r0
 800e492:	4658      	mov	r0, fp
 800e494:	f000 fbee 	bl	800ec74 <__pow5mult>
 800e498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	4604      	mov	r4, r0
 800e49e:	f300 8095 	bgt.w	800e5cc <_dtoa_r+0x8dc>
 800e4a2:	9b02      	ldr	r3, [sp, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f040 8087 	bne.w	800e5b8 <_dtoa_r+0x8c8>
 800e4aa:	9b03      	ldr	r3, [sp, #12]
 800e4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f040 8089 	bne.w	800e5c8 <_dtoa_r+0x8d8>
 800e4b6:	9b03      	ldr	r3, [sp, #12]
 800e4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4bc:	0d1b      	lsrs	r3, r3, #20
 800e4be:	051b      	lsls	r3, r3, #20
 800e4c0:	b12b      	cbz	r3, 800e4ce <_dtoa_r+0x7de>
 800e4c2:	9b08      	ldr	r3, [sp, #32]
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	9308      	str	r3, [sp, #32]
 800e4c8:	f108 0801 	add.w	r8, r8, #1
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 81b0 	beq.w	800e838 <_dtoa_r+0xb48>
 800e4d8:	6923      	ldr	r3, [r4, #16]
 800e4da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4de:	6918      	ldr	r0, [r3, #16]
 800e4e0:	f000 fabc 	bl	800ea5c <__hi0bits>
 800e4e4:	f1c0 0020 	rsb	r0, r0, #32
 800e4e8:	9b08      	ldr	r3, [sp, #32]
 800e4ea:	4418      	add	r0, r3
 800e4ec:	f010 001f 	ands.w	r0, r0, #31
 800e4f0:	d077      	beq.n	800e5e2 <_dtoa_r+0x8f2>
 800e4f2:	f1c0 0320 	rsb	r3, r0, #32
 800e4f6:	2b04      	cmp	r3, #4
 800e4f8:	dd6b      	ble.n	800e5d2 <_dtoa_r+0x8e2>
 800e4fa:	9b08      	ldr	r3, [sp, #32]
 800e4fc:	f1c0 001c 	rsb	r0, r0, #28
 800e500:	4403      	add	r3, r0
 800e502:	4480      	add	r8, r0
 800e504:	4406      	add	r6, r0
 800e506:	9308      	str	r3, [sp, #32]
 800e508:	f1b8 0f00 	cmp.w	r8, #0
 800e50c:	dd05      	ble.n	800e51a <_dtoa_r+0x82a>
 800e50e:	4649      	mov	r1, r9
 800e510:	4642      	mov	r2, r8
 800e512:	4658      	mov	r0, fp
 800e514:	f000 fc08 	bl	800ed28 <__lshift>
 800e518:	4681      	mov	r9, r0
 800e51a:	9b08      	ldr	r3, [sp, #32]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	dd05      	ble.n	800e52c <_dtoa_r+0x83c>
 800e520:	4621      	mov	r1, r4
 800e522:	461a      	mov	r2, r3
 800e524:	4658      	mov	r0, fp
 800e526:	f000 fbff 	bl	800ed28 <__lshift>
 800e52a:	4604      	mov	r4, r0
 800e52c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d059      	beq.n	800e5e6 <_dtoa_r+0x8f6>
 800e532:	4621      	mov	r1, r4
 800e534:	4648      	mov	r0, r9
 800e536:	f000 fc63 	bl	800ee00 <__mcmp>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	da53      	bge.n	800e5e6 <_dtoa_r+0x8f6>
 800e53e:	1e7b      	subs	r3, r7, #1
 800e540:	9304      	str	r3, [sp, #16]
 800e542:	4649      	mov	r1, r9
 800e544:	2300      	movs	r3, #0
 800e546:	220a      	movs	r2, #10
 800e548:	4658      	mov	r0, fp
 800e54a:	f000 fa41 	bl	800e9d0 <__multadd>
 800e54e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e550:	4681      	mov	r9, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 8172 	beq.w	800e83c <_dtoa_r+0xb4c>
 800e558:	2300      	movs	r3, #0
 800e55a:	4629      	mov	r1, r5
 800e55c:	220a      	movs	r2, #10
 800e55e:	4658      	mov	r0, fp
 800e560:	f000 fa36 	bl	800e9d0 <__multadd>
 800e564:	9b00      	ldr	r3, [sp, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	4605      	mov	r5, r0
 800e56a:	dc67      	bgt.n	800e63c <_dtoa_r+0x94c>
 800e56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56e:	2b02      	cmp	r3, #2
 800e570:	dc41      	bgt.n	800e5f6 <_dtoa_r+0x906>
 800e572:	e063      	b.n	800e63c <_dtoa_r+0x94c>
 800e574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e57a:	e746      	b.n	800e40a <_dtoa_r+0x71a>
 800e57c:	9b07      	ldr	r3, [sp, #28]
 800e57e:	1e5c      	subs	r4, r3, #1
 800e580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e582:	42a3      	cmp	r3, r4
 800e584:	bfbf      	itttt	lt
 800e586:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e588:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e58a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e58c:	1ae3      	sublt	r3, r4, r3
 800e58e:	bfb4      	ite	lt
 800e590:	18d2      	addlt	r2, r2, r3
 800e592:	1b1c      	subge	r4, r3, r4
 800e594:	9b07      	ldr	r3, [sp, #28]
 800e596:	bfbc      	itt	lt
 800e598:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e59a:	2400      	movlt	r4, #0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	bfb5      	itete	lt
 800e5a0:	eba8 0603 	sublt.w	r6, r8, r3
 800e5a4:	9b07      	ldrge	r3, [sp, #28]
 800e5a6:	2300      	movlt	r3, #0
 800e5a8:	4646      	movge	r6, r8
 800e5aa:	e730      	b.n	800e40e <_dtoa_r+0x71e>
 800e5ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e5b0:	4646      	mov	r6, r8
 800e5b2:	e735      	b.n	800e420 <_dtoa_r+0x730>
 800e5b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5b6:	e75c      	b.n	800e472 <_dtoa_r+0x782>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e788      	b.n	800e4ce <_dtoa_r+0x7de>
 800e5bc:	3fe00000 	.word	0x3fe00000
 800e5c0:	40240000 	.word	0x40240000
 800e5c4:	40140000 	.word	0x40140000
 800e5c8:	9b02      	ldr	r3, [sp, #8]
 800e5ca:	e780      	b.n	800e4ce <_dtoa_r+0x7de>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5d0:	e782      	b.n	800e4d8 <_dtoa_r+0x7e8>
 800e5d2:	d099      	beq.n	800e508 <_dtoa_r+0x818>
 800e5d4:	9a08      	ldr	r2, [sp, #32]
 800e5d6:	331c      	adds	r3, #28
 800e5d8:	441a      	add	r2, r3
 800e5da:	4498      	add	r8, r3
 800e5dc:	441e      	add	r6, r3
 800e5de:	9208      	str	r2, [sp, #32]
 800e5e0:	e792      	b.n	800e508 <_dtoa_r+0x818>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	e7f6      	b.n	800e5d4 <_dtoa_r+0x8e4>
 800e5e6:	9b07      	ldr	r3, [sp, #28]
 800e5e8:	9704      	str	r7, [sp, #16]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	dc20      	bgt.n	800e630 <_dtoa_r+0x940>
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	dd1e      	ble.n	800e634 <_dtoa_r+0x944>
 800e5f6:	9b00      	ldr	r3, [sp, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f47f aec0 	bne.w	800e37e <_dtoa_r+0x68e>
 800e5fe:	4621      	mov	r1, r4
 800e600:	2205      	movs	r2, #5
 800e602:	4658      	mov	r0, fp
 800e604:	f000 f9e4 	bl	800e9d0 <__multadd>
 800e608:	4601      	mov	r1, r0
 800e60a:	4604      	mov	r4, r0
 800e60c:	4648      	mov	r0, r9
 800e60e:	f000 fbf7 	bl	800ee00 <__mcmp>
 800e612:	2800      	cmp	r0, #0
 800e614:	f77f aeb3 	ble.w	800e37e <_dtoa_r+0x68e>
 800e618:	4656      	mov	r6, sl
 800e61a:	2331      	movs	r3, #49	@ 0x31
 800e61c:	f806 3b01 	strb.w	r3, [r6], #1
 800e620:	9b04      	ldr	r3, [sp, #16]
 800e622:	3301      	adds	r3, #1
 800e624:	9304      	str	r3, [sp, #16]
 800e626:	e6ae      	b.n	800e386 <_dtoa_r+0x696>
 800e628:	9c07      	ldr	r4, [sp, #28]
 800e62a:	9704      	str	r7, [sp, #16]
 800e62c:	4625      	mov	r5, r4
 800e62e:	e7f3      	b.n	800e618 <_dtoa_r+0x928>
 800e630:	9b07      	ldr	r3, [sp, #28]
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 8104 	beq.w	800e844 <_dtoa_r+0xb54>
 800e63c:	2e00      	cmp	r6, #0
 800e63e:	dd05      	ble.n	800e64c <_dtoa_r+0x95c>
 800e640:	4629      	mov	r1, r5
 800e642:	4632      	mov	r2, r6
 800e644:	4658      	mov	r0, fp
 800e646:	f000 fb6f 	bl	800ed28 <__lshift>
 800e64a:	4605      	mov	r5, r0
 800e64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d05a      	beq.n	800e708 <_dtoa_r+0xa18>
 800e652:	6869      	ldr	r1, [r5, #4]
 800e654:	4658      	mov	r0, fp
 800e656:	f000 f959 	bl	800e90c <_Balloc>
 800e65a:	4606      	mov	r6, r0
 800e65c:	b928      	cbnz	r0, 800e66a <_dtoa_r+0x97a>
 800e65e:	4b84      	ldr	r3, [pc, #528]	@ (800e870 <_dtoa_r+0xb80>)
 800e660:	4602      	mov	r2, r0
 800e662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e666:	f7ff bb5a 	b.w	800dd1e <_dtoa_r+0x2e>
 800e66a:	692a      	ldr	r2, [r5, #16]
 800e66c:	3202      	adds	r2, #2
 800e66e:	0092      	lsls	r2, r2, #2
 800e670:	f105 010c 	add.w	r1, r5, #12
 800e674:	300c      	adds	r0, #12
 800e676:	f7ff faa2 	bl	800dbbe <memcpy>
 800e67a:	2201      	movs	r2, #1
 800e67c:	4631      	mov	r1, r6
 800e67e:	4658      	mov	r0, fp
 800e680:	f000 fb52 	bl	800ed28 <__lshift>
 800e684:	f10a 0301 	add.w	r3, sl, #1
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	9b00      	ldr	r3, [sp, #0]
 800e68c:	4453      	add	r3, sl
 800e68e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e690:	9b02      	ldr	r3, [sp, #8]
 800e692:	f003 0301 	and.w	r3, r3, #1
 800e696:	462f      	mov	r7, r5
 800e698:	930a      	str	r3, [sp, #40]	@ 0x28
 800e69a:	4605      	mov	r5, r0
 800e69c:	9b07      	ldr	r3, [sp, #28]
 800e69e:	4621      	mov	r1, r4
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	4648      	mov	r0, r9
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	f7ff fa98 	bl	800dbda <quorem>
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	9002      	str	r0, [sp, #8]
 800e6ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6b2:	4648      	mov	r0, r9
 800e6b4:	f000 fba4 	bl	800ee00 <__mcmp>
 800e6b8:	462a      	mov	r2, r5
 800e6ba:	9008      	str	r0, [sp, #32]
 800e6bc:	4621      	mov	r1, r4
 800e6be:	4658      	mov	r0, fp
 800e6c0:	f000 fbba 	bl	800ee38 <__mdiff>
 800e6c4:	68c2      	ldr	r2, [r0, #12]
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	bb02      	cbnz	r2, 800e70c <_dtoa_r+0xa1c>
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	4648      	mov	r0, r9
 800e6ce:	f000 fb97 	bl	800ee00 <__mcmp>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4658      	mov	r0, fp
 800e6d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6da:	f000 f957 	bl	800e98c <_Bfree>
 800e6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6e2:	9e07      	ldr	r6, [sp, #28]
 800e6e4:	ea43 0102 	orr.w	r1, r3, r2
 800e6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6ea:	4319      	orrs	r1, r3
 800e6ec:	d110      	bne.n	800e710 <_dtoa_r+0xa20>
 800e6ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e6f2:	d029      	beq.n	800e748 <_dtoa_r+0xa58>
 800e6f4:	9b08      	ldr	r3, [sp, #32]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	dd02      	ble.n	800e700 <_dtoa_r+0xa10>
 800e6fa:	9b02      	ldr	r3, [sp, #8]
 800e6fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e700:	9b00      	ldr	r3, [sp, #0]
 800e702:	f883 8000 	strb.w	r8, [r3]
 800e706:	e63f      	b.n	800e388 <_dtoa_r+0x698>
 800e708:	4628      	mov	r0, r5
 800e70a:	e7bb      	b.n	800e684 <_dtoa_r+0x994>
 800e70c:	2201      	movs	r2, #1
 800e70e:	e7e1      	b.n	800e6d4 <_dtoa_r+0x9e4>
 800e710:	9b08      	ldr	r3, [sp, #32]
 800e712:	2b00      	cmp	r3, #0
 800e714:	db04      	blt.n	800e720 <_dtoa_r+0xa30>
 800e716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e718:	430b      	orrs	r3, r1
 800e71a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e71c:	430b      	orrs	r3, r1
 800e71e:	d120      	bne.n	800e762 <_dtoa_r+0xa72>
 800e720:	2a00      	cmp	r2, #0
 800e722:	dded      	ble.n	800e700 <_dtoa_r+0xa10>
 800e724:	4649      	mov	r1, r9
 800e726:	2201      	movs	r2, #1
 800e728:	4658      	mov	r0, fp
 800e72a:	f000 fafd 	bl	800ed28 <__lshift>
 800e72e:	4621      	mov	r1, r4
 800e730:	4681      	mov	r9, r0
 800e732:	f000 fb65 	bl	800ee00 <__mcmp>
 800e736:	2800      	cmp	r0, #0
 800e738:	dc03      	bgt.n	800e742 <_dtoa_r+0xa52>
 800e73a:	d1e1      	bne.n	800e700 <_dtoa_r+0xa10>
 800e73c:	f018 0f01 	tst.w	r8, #1
 800e740:	d0de      	beq.n	800e700 <_dtoa_r+0xa10>
 800e742:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e746:	d1d8      	bne.n	800e6fa <_dtoa_r+0xa0a>
 800e748:	9a00      	ldr	r2, [sp, #0]
 800e74a:	2339      	movs	r3, #57	@ 0x39
 800e74c:	7013      	strb	r3, [r2, #0]
 800e74e:	4633      	mov	r3, r6
 800e750:	461e      	mov	r6, r3
 800e752:	3b01      	subs	r3, #1
 800e754:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e758:	2a39      	cmp	r2, #57	@ 0x39
 800e75a:	d052      	beq.n	800e802 <_dtoa_r+0xb12>
 800e75c:	3201      	adds	r2, #1
 800e75e:	701a      	strb	r2, [r3, #0]
 800e760:	e612      	b.n	800e388 <_dtoa_r+0x698>
 800e762:	2a00      	cmp	r2, #0
 800e764:	dd07      	ble.n	800e776 <_dtoa_r+0xa86>
 800e766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e76a:	d0ed      	beq.n	800e748 <_dtoa_r+0xa58>
 800e76c:	9a00      	ldr	r2, [sp, #0]
 800e76e:	f108 0301 	add.w	r3, r8, #1
 800e772:	7013      	strb	r3, [r2, #0]
 800e774:	e608      	b.n	800e388 <_dtoa_r+0x698>
 800e776:	9b07      	ldr	r3, [sp, #28]
 800e778:	9a07      	ldr	r2, [sp, #28]
 800e77a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e780:	4293      	cmp	r3, r2
 800e782:	d028      	beq.n	800e7d6 <_dtoa_r+0xae6>
 800e784:	4649      	mov	r1, r9
 800e786:	2300      	movs	r3, #0
 800e788:	220a      	movs	r2, #10
 800e78a:	4658      	mov	r0, fp
 800e78c:	f000 f920 	bl	800e9d0 <__multadd>
 800e790:	42af      	cmp	r7, r5
 800e792:	4681      	mov	r9, r0
 800e794:	f04f 0300 	mov.w	r3, #0
 800e798:	f04f 020a 	mov.w	r2, #10
 800e79c:	4639      	mov	r1, r7
 800e79e:	4658      	mov	r0, fp
 800e7a0:	d107      	bne.n	800e7b2 <_dtoa_r+0xac2>
 800e7a2:	f000 f915 	bl	800e9d0 <__multadd>
 800e7a6:	4607      	mov	r7, r0
 800e7a8:	4605      	mov	r5, r0
 800e7aa:	9b07      	ldr	r3, [sp, #28]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	9307      	str	r3, [sp, #28]
 800e7b0:	e774      	b.n	800e69c <_dtoa_r+0x9ac>
 800e7b2:	f000 f90d 	bl	800e9d0 <__multadd>
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	220a      	movs	r2, #10
 800e7be:	4658      	mov	r0, fp
 800e7c0:	f000 f906 	bl	800e9d0 <__multadd>
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	e7f0      	b.n	800e7aa <_dtoa_r+0xaba>
 800e7c8:	9b00      	ldr	r3, [sp, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	bfcc      	ite	gt
 800e7ce:	461e      	movgt	r6, r3
 800e7d0:	2601      	movle	r6, #1
 800e7d2:	4456      	add	r6, sl
 800e7d4:	2700      	movs	r7, #0
 800e7d6:	4649      	mov	r1, r9
 800e7d8:	2201      	movs	r2, #1
 800e7da:	4658      	mov	r0, fp
 800e7dc:	f000 faa4 	bl	800ed28 <__lshift>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4681      	mov	r9, r0
 800e7e4:	f000 fb0c 	bl	800ee00 <__mcmp>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	dcb0      	bgt.n	800e74e <_dtoa_r+0xa5e>
 800e7ec:	d102      	bne.n	800e7f4 <_dtoa_r+0xb04>
 800e7ee:	f018 0f01 	tst.w	r8, #1
 800e7f2:	d1ac      	bne.n	800e74e <_dtoa_r+0xa5e>
 800e7f4:	4633      	mov	r3, r6
 800e7f6:	461e      	mov	r6, r3
 800e7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7fc:	2a30      	cmp	r2, #48	@ 0x30
 800e7fe:	d0fa      	beq.n	800e7f6 <_dtoa_r+0xb06>
 800e800:	e5c2      	b.n	800e388 <_dtoa_r+0x698>
 800e802:	459a      	cmp	sl, r3
 800e804:	d1a4      	bne.n	800e750 <_dtoa_r+0xa60>
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	3301      	adds	r3, #1
 800e80a:	9304      	str	r3, [sp, #16]
 800e80c:	2331      	movs	r3, #49	@ 0x31
 800e80e:	f88a 3000 	strb.w	r3, [sl]
 800e812:	e5b9      	b.n	800e388 <_dtoa_r+0x698>
 800e814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e816:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e874 <_dtoa_r+0xb84>
 800e81a:	b11b      	cbz	r3, 800e824 <_dtoa_r+0xb34>
 800e81c:	f10a 0308 	add.w	r3, sl, #8
 800e820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e822:	6013      	str	r3, [r2, #0]
 800e824:	4650      	mov	r0, sl
 800e826:	b019      	add	sp, #100	@ 0x64
 800e828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e82e:	2b01      	cmp	r3, #1
 800e830:	f77f ae37 	ble.w	800e4a2 <_dtoa_r+0x7b2>
 800e834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e836:	930a      	str	r3, [sp, #40]	@ 0x28
 800e838:	2001      	movs	r0, #1
 800e83a:	e655      	b.n	800e4e8 <_dtoa_r+0x7f8>
 800e83c:	9b00      	ldr	r3, [sp, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f77f aed6 	ble.w	800e5f0 <_dtoa_r+0x900>
 800e844:	4656      	mov	r6, sl
 800e846:	4621      	mov	r1, r4
 800e848:	4648      	mov	r0, r9
 800e84a:	f7ff f9c6 	bl	800dbda <quorem>
 800e84e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e852:	f806 8b01 	strb.w	r8, [r6], #1
 800e856:	9b00      	ldr	r3, [sp, #0]
 800e858:	eba6 020a 	sub.w	r2, r6, sl
 800e85c:	4293      	cmp	r3, r2
 800e85e:	ddb3      	ble.n	800e7c8 <_dtoa_r+0xad8>
 800e860:	4649      	mov	r1, r9
 800e862:	2300      	movs	r3, #0
 800e864:	220a      	movs	r2, #10
 800e866:	4658      	mov	r0, fp
 800e868:	f000 f8b2 	bl	800e9d0 <__multadd>
 800e86c:	4681      	mov	r9, r0
 800e86e:	e7ea      	b.n	800e846 <_dtoa_r+0xb56>
 800e870:	08014dac 	.word	0x08014dac
 800e874:	08014d30 	.word	0x08014d30

0800e878 <_free_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4605      	mov	r5, r0
 800e87c:	2900      	cmp	r1, #0
 800e87e:	d041      	beq.n	800e904 <_free_r+0x8c>
 800e880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e884:	1f0c      	subs	r4, r1, #4
 800e886:	2b00      	cmp	r3, #0
 800e888:	bfb8      	it	lt
 800e88a:	18e4      	addlt	r4, r4, r3
 800e88c:	f7fe fb84 	bl	800cf98 <__malloc_lock>
 800e890:	4a1d      	ldr	r2, [pc, #116]	@ (800e908 <_free_r+0x90>)
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	b933      	cbnz	r3, 800e8a4 <_free_r+0x2c>
 800e896:	6063      	str	r3, [r4, #4]
 800e898:	6014      	str	r4, [r2, #0]
 800e89a:	4628      	mov	r0, r5
 800e89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8a0:	f7fe bb80 	b.w	800cfa4 <__malloc_unlock>
 800e8a4:	42a3      	cmp	r3, r4
 800e8a6:	d908      	bls.n	800e8ba <_free_r+0x42>
 800e8a8:	6820      	ldr	r0, [r4, #0]
 800e8aa:	1821      	adds	r1, r4, r0
 800e8ac:	428b      	cmp	r3, r1
 800e8ae:	bf01      	itttt	eq
 800e8b0:	6819      	ldreq	r1, [r3, #0]
 800e8b2:	685b      	ldreq	r3, [r3, #4]
 800e8b4:	1809      	addeq	r1, r1, r0
 800e8b6:	6021      	streq	r1, [r4, #0]
 800e8b8:	e7ed      	b.n	800e896 <_free_r+0x1e>
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	b10b      	cbz	r3, 800e8c4 <_free_r+0x4c>
 800e8c0:	42a3      	cmp	r3, r4
 800e8c2:	d9fa      	bls.n	800e8ba <_free_r+0x42>
 800e8c4:	6811      	ldr	r1, [r2, #0]
 800e8c6:	1850      	adds	r0, r2, r1
 800e8c8:	42a0      	cmp	r0, r4
 800e8ca:	d10b      	bne.n	800e8e4 <_free_r+0x6c>
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	4401      	add	r1, r0
 800e8d0:	1850      	adds	r0, r2, r1
 800e8d2:	4283      	cmp	r3, r0
 800e8d4:	6011      	str	r1, [r2, #0]
 800e8d6:	d1e0      	bne.n	800e89a <_free_r+0x22>
 800e8d8:	6818      	ldr	r0, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	6053      	str	r3, [r2, #4]
 800e8de:	4408      	add	r0, r1
 800e8e0:	6010      	str	r0, [r2, #0]
 800e8e2:	e7da      	b.n	800e89a <_free_r+0x22>
 800e8e4:	d902      	bls.n	800e8ec <_free_r+0x74>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	602b      	str	r3, [r5, #0]
 800e8ea:	e7d6      	b.n	800e89a <_free_r+0x22>
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	1821      	adds	r1, r4, r0
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	bf04      	itt	eq
 800e8f4:	6819      	ldreq	r1, [r3, #0]
 800e8f6:	685b      	ldreq	r3, [r3, #4]
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	bf04      	itt	eq
 800e8fc:	1809      	addeq	r1, r1, r0
 800e8fe:	6021      	streq	r1, [r4, #0]
 800e900:	6054      	str	r4, [r2, #4]
 800e902:	e7ca      	b.n	800e89a <_free_r+0x22>
 800e904:	bd38      	pop	{r3, r4, r5, pc}
 800e906:	bf00      	nop
 800e908:	200009f8 	.word	0x200009f8

0800e90c <_Balloc>:
 800e90c:	b570      	push	{r4, r5, r6, lr}
 800e90e:	69c6      	ldr	r6, [r0, #28]
 800e910:	4604      	mov	r4, r0
 800e912:	460d      	mov	r5, r1
 800e914:	b976      	cbnz	r6, 800e934 <_Balloc+0x28>
 800e916:	2010      	movs	r0, #16
 800e918:	f7fe fa94 	bl	800ce44 <malloc>
 800e91c:	4602      	mov	r2, r0
 800e91e:	61e0      	str	r0, [r4, #28]
 800e920:	b920      	cbnz	r0, 800e92c <_Balloc+0x20>
 800e922:	4b18      	ldr	r3, [pc, #96]	@ (800e984 <_Balloc+0x78>)
 800e924:	4818      	ldr	r0, [pc, #96]	@ (800e988 <_Balloc+0x7c>)
 800e926:	216b      	movs	r1, #107	@ 0x6b
 800e928:	f000 fe28 	bl	800f57c <__assert_func>
 800e92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e930:	6006      	str	r6, [r0, #0]
 800e932:	60c6      	str	r6, [r0, #12]
 800e934:	69e6      	ldr	r6, [r4, #28]
 800e936:	68f3      	ldr	r3, [r6, #12]
 800e938:	b183      	cbz	r3, 800e95c <_Balloc+0x50>
 800e93a:	69e3      	ldr	r3, [r4, #28]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e942:	b9b8      	cbnz	r0, 800e974 <_Balloc+0x68>
 800e944:	2101      	movs	r1, #1
 800e946:	fa01 f605 	lsl.w	r6, r1, r5
 800e94a:	1d72      	adds	r2, r6, #5
 800e94c:	0092      	lsls	r2, r2, #2
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 fe32 	bl	800f5b8 <_calloc_r>
 800e954:	b160      	cbz	r0, 800e970 <_Balloc+0x64>
 800e956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e95a:	e00e      	b.n	800e97a <_Balloc+0x6e>
 800e95c:	2221      	movs	r2, #33	@ 0x21
 800e95e:	2104      	movs	r1, #4
 800e960:	4620      	mov	r0, r4
 800e962:	f000 fe29 	bl	800f5b8 <_calloc_r>
 800e966:	69e3      	ldr	r3, [r4, #28]
 800e968:	60f0      	str	r0, [r6, #12]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1e4      	bne.n	800e93a <_Balloc+0x2e>
 800e970:	2000      	movs	r0, #0
 800e972:	bd70      	pop	{r4, r5, r6, pc}
 800e974:	6802      	ldr	r2, [r0, #0]
 800e976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e97a:	2300      	movs	r3, #0
 800e97c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e980:	e7f7      	b.n	800e972 <_Balloc+0x66>
 800e982:	bf00      	nop
 800e984:	08014d3d 	.word	0x08014d3d
 800e988:	08014dbd 	.word	0x08014dbd

0800e98c <_Bfree>:
 800e98c:	b570      	push	{r4, r5, r6, lr}
 800e98e:	69c6      	ldr	r6, [r0, #28]
 800e990:	4605      	mov	r5, r0
 800e992:	460c      	mov	r4, r1
 800e994:	b976      	cbnz	r6, 800e9b4 <_Bfree+0x28>
 800e996:	2010      	movs	r0, #16
 800e998:	f7fe fa54 	bl	800ce44 <malloc>
 800e99c:	4602      	mov	r2, r0
 800e99e:	61e8      	str	r0, [r5, #28]
 800e9a0:	b920      	cbnz	r0, 800e9ac <_Bfree+0x20>
 800e9a2:	4b09      	ldr	r3, [pc, #36]	@ (800e9c8 <_Bfree+0x3c>)
 800e9a4:	4809      	ldr	r0, [pc, #36]	@ (800e9cc <_Bfree+0x40>)
 800e9a6:	218f      	movs	r1, #143	@ 0x8f
 800e9a8:	f000 fde8 	bl	800f57c <__assert_func>
 800e9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9b0:	6006      	str	r6, [r0, #0]
 800e9b2:	60c6      	str	r6, [r0, #12]
 800e9b4:	b13c      	cbz	r4, 800e9c6 <_Bfree+0x3a>
 800e9b6:	69eb      	ldr	r3, [r5, #28]
 800e9b8:	6862      	ldr	r2, [r4, #4]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9c0:	6021      	str	r1, [r4, #0]
 800e9c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e9c6:	bd70      	pop	{r4, r5, r6, pc}
 800e9c8:	08014d3d 	.word	0x08014d3d
 800e9cc:	08014dbd 	.word	0x08014dbd

0800e9d0 <__multadd>:
 800e9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d4:	690d      	ldr	r5, [r1, #16]
 800e9d6:	4607      	mov	r7, r0
 800e9d8:	460c      	mov	r4, r1
 800e9da:	461e      	mov	r6, r3
 800e9dc:	f101 0c14 	add.w	ip, r1, #20
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	f8dc 3000 	ldr.w	r3, [ip]
 800e9e6:	b299      	uxth	r1, r3
 800e9e8:	fb02 6101 	mla	r1, r2, r1, r6
 800e9ec:	0c1e      	lsrs	r6, r3, #16
 800e9ee:	0c0b      	lsrs	r3, r1, #16
 800e9f0:	fb02 3306 	mla	r3, r2, r6, r3
 800e9f4:	b289      	uxth	r1, r1
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e9fc:	4285      	cmp	r5, r0
 800e9fe:	f84c 1b04 	str.w	r1, [ip], #4
 800ea02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea06:	dcec      	bgt.n	800e9e2 <__multadd+0x12>
 800ea08:	b30e      	cbz	r6, 800ea4e <__multadd+0x7e>
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	42ab      	cmp	r3, r5
 800ea0e:	dc19      	bgt.n	800ea44 <__multadd+0x74>
 800ea10:	6861      	ldr	r1, [r4, #4]
 800ea12:	4638      	mov	r0, r7
 800ea14:	3101      	adds	r1, #1
 800ea16:	f7ff ff79 	bl	800e90c <_Balloc>
 800ea1a:	4680      	mov	r8, r0
 800ea1c:	b928      	cbnz	r0, 800ea2a <__multadd+0x5a>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	4b0c      	ldr	r3, [pc, #48]	@ (800ea54 <__multadd+0x84>)
 800ea22:	480d      	ldr	r0, [pc, #52]	@ (800ea58 <__multadd+0x88>)
 800ea24:	21ba      	movs	r1, #186	@ 0xba
 800ea26:	f000 fda9 	bl	800f57c <__assert_func>
 800ea2a:	6922      	ldr	r2, [r4, #16]
 800ea2c:	3202      	adds	r2, #2
 800ea2e:	f104 010c 	add.w	r1, r4, #12
 800ea32:	0092      	lsls	r2, r2, #2
 800ea34:	300c      	adds	r0, #12
 800ea36:	f7ff f8c2 	bl	800dbbe <memcpy>
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4638      	mov	r0, r7
 800ea3e:	f7ff ffa5 	bl	800e98c <_Bfree>
 800ea42:	4644      	mov	r4, r8
 800ea44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea48:	3501      	adds	r5, #1
 800ea4a:	615e      	str	r6, [r3, #20]
 800ea4c:	6125      	str	r5, [r4, #16]
 800ea4e:	4620      	mov	r0, r4
 800ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea54:	08014dac 	.word	0x08014dac
 800ea58:	08014dbd 	.word	0x08014dbd

0800ea5c <__hi0bits>:
 800ea5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea60:	4603      	mov	r3, r0
 800ea62:	bf36      	itet	cc
 800ea64:	0403      	lslcc	r3, r0, #16
 800ea66:	2000      	movcs	r0, #0
 800ea68:	2010      	movcc	r0, #16
 800ea6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea6e:	bf3c      	itt	cc
 800ea70:	021b      	lslcc	r3, r3, #8
 800ea72:	3008      	addcc	r0, #8
 800ea74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea78:	bf3c      	itt	cc
 800ea7a:	011b      	lslcc	r3, r3, #4
 800ea7c:	3004      	addcc	r0, #4
 800ea7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea82:	bf3c      	itt	cc
 800ea84:	009b      	lslcc	r3, r3, #2
 800ea86:	3002      	addcc	r0, #2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	db05      	blt.n	800ea98 <__hi0bits+0x3c>
 800ea8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea90:	f100 0001 	add.w	r0, r0, #1
 800ea94:	bf08      	it	eq
 800ea96:	2020      	moveq	r0, #32
 800ea98:	4770      	bx	lr

0800ea9a <__lo0bits>:
 800ea9a:	6803      	ldr	r3, [r0, #0]
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	f013 0007 	ands.w	r0, r3, #7
 800eaa2:	d00b      	beq.n	800eabc <__lo0bits+0x22>
 800eaa4:	07d9      	lsls	r1, r3, #31
 800eaa6:	d421      	bmi.n	800eaec <__lo0bits+0x52>
 800eaa8:	0798      	lsls	r0, r3, #30
 800eaaa:	bf49      	itett	mi
 800eaac:	085b      	lsrmi	r3, r3, #1
 800eaae:	089b      	lsrpl	r3, r3, #2
 800eab0:	2001      	movmi	r0, #1
 800eab2:	6013      	strmi	r3, [r2, #0]
 800eab4:	bf5c      	itt	pl
 800eab6:	6013      	strpl	r3, [r2, #0]
 800eab8:	2002      	movpl	r0, #2
 800eaba:	4770      	bx	lr
 800eabc:	b299      	uxth	r1, r3
 800eabe:	b909      	cbnz	r1, 800eac4 <__lo0bits+0x2a>
 800eac0:	0c1b      	lsrs	r3, r3, #16
 800eac2:	2010      	movs	r0, #16
 800eac4:	b2d9      	uxtb	r1, r3
 800eac6:	b909      	cbnz	r1, 800eacc <__lo0bits+0x32>
 800eac8:	3008      	adds	r0, #8
 800eaca:	0a1b      	lsrs	r3, r3, #8
 800eacc:	0719      	lsls	r1, r3, #28
 800eace:	bf04      	itt	eq
 800ead0:	091b      	lsreq	r3, r3, #4
 800ead2:	3004      	addeq	r0, #4
 800ead4:	0799      	lsls	r1, r3, #30
 800ead6:	bf04      	itt	eq
 800ead8:	089b      	lsreq	r3, r3, #2
 800eada:	3002      	addeq	r0, #2
 800eadc:	07d9      	lsls	r1, r3, #31
 800eade:	d403      	bmi.n	800eae8 <__lo0bits+0x4e>
 800eae0:	085b      	lsrs	r3, r3, #1
 800eae2:	f100 0001 	add.w	r0, r0, #1
 800eae6:	d003      	beq.n	800eaf0 <__lo0bits+0x56>
 800eae8:	6013      	str	r3, [r2, #0]
 800eaea:	4770      	bx	lr
 800eaec:	2000      	movs	r0, #0
 800eaee:	4770      	bx	lr
 800eaf0:	2020      	movs	r0, #32
 800eaf2:	4770      	bx	lr

0800eaf4 <__i2b>:
 800eaf4:	b510      	push	{r4, lr}
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	2101      	movs	r1, #1
 800eafa:	f7ff ff07 	bl	800e90c <_Balloc>
 800eafe:	4602      	mov	r2, r0
 800eb00:	b928      	cbnz	r0, 800eb0e <__i2b+0x1a>
 800eb02:	4b05      	ldr	r3, [pc, #20]	@ (800eb18 <__i2b+0x24>)
 800eb04:	4805      	ldr	r0, [pc, #20]	@ (800eb1c <__i2b+0x28>)
 800eb06:	f240 1145 	movw	r1, #325	@ 0x145
 800eb0a:	f000 fd37 	bl	800f57c <__assert_func>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	6144      	str	r4, [r0, #20]
 800eb12:	6103      	str	r3, [r0, #16]
 800eb14:	bd10      	pop	{r4, pc}
 800eb16:	bf00      	nop
 800eb18:	08014dac 	.word	0x08014dac
 800eb1c:	08014dbd 	.word	0x08014dbd

0800eb20 <__multiply>:
 800eb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	4614      	mov	r4, r2
 800eb26:	690a      	ldr	r2, [r1, #16]
 800eb28:	6923      	ldr	r3, [r4, #16]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	bfa8      	it	ge
 800eb2e:	4623      	movge	r3, r4
 800eb30:	460f      	mov	r7, r1
 800eb32:	bfa4      	itt	ge
 800eb34:	460c      	movge	r4, r1
 800eb36:	461f      	movge	r7, r3
 800eb38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eb3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eb40:	68a3      	ldr	r3, [r4, #8]
 800eb42:	6861      	ldr	r1, [r4, #4]
 800eb44:	eb0a 0609 	add.w	r6, sl, r9
 800eb48:	42b3      	cmp	r3, r6
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	bfb8      	it	lt
 800eb4e:	3101      	addlt	r1, #1
 800eb50:	f7ff fedc 	bl	800e90c <_Balloc>
 800eb54:	b930      	cbnz	r0, 800eb64 <__multiply+0x44>
 800eb56:	4602      	mov	r2, r0
 800eb58:	4b44      	ldr	r3, [pc, #272]	@ (800ec6c <__multiply+0x14c>)
 800eb5a:	4845      	ldr	r0, [pc, #276]	@ (800ec70 <__multiply+0x150>)
 800eb5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb60:	f000 fd0c 	bl	800f57c <__assert_func>
 800eb64:	f100 0514 	add.w	r5, r0, #20
 800eb68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb6c:	462b      	mov	r3, r5
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4543      	cmp	r3, r8
 800eb72:	d321      	bcc.n	800ebb8 <__multiply+0x98>
 800eb74:	f107 0114 	add.w	r1, r7, #20
 800eb78:	f104 0214 	add.w	r2, r4, #20
 800eb7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eb80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eb84:	9302      	str	r3, [sp, #8]
 800eb86:	1b13      	subs	r3, r2, r4
 800eb88:	3b15      	subs	r3, #21
 800eb8a:	f023 0303 	bic.w	r3, r3, #3
 800eb8e:	3304      	adds	r3, #4
 800eb90:	f104 0715 	add.w	r7, r4, #21
 800eb94:	42ba      	cmp	r2, r7
 800eb96:	bf38      	it	cc
 800eb98:	2304      	movcc	r3, #4
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	9b02      	ldr	r3, [sp, #8]
 800eb9e:	9103      	str	r1, [sp, #12]
 800eba0:	428b      	cmp	r3, r1
 800eba2:	d80c      	bhi.n	800ebbe <__multiply+0x9e>
 800eba4:	2e00      	cmp	r6, #0
 800eba6:	dd03      	ble.n	800ebb0 <__multiply+0x90>
 800eba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d05b      	beq.n	800ec68 <__multiply+0x148>
 800ebb0:	6106      	str	r6, [r0, #16]
 800ebb2:	b005      	add	sp, #20
 800ebb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb8:	f843 2b04 	str.w	r2, [r3], #4
 800ebbc:	e7d8      	b.n	800eb70 <__multiply+0x50>
 800ebbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800ebc2:	f1ba 0f00 	cmp.w	sl, #0
 800ebc6:	d024      	beq.n	800ec12 <__multiply+0xf2>
 800ebc8:	f104 0e14 	add.w	lr, r4, #20
 800ebcc:	46a9      	mov	r9, r5
 800ebce:	f04f 0c00 	mov.w	ip, #0
 800ebd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ebd6:	f8d9 3000 	ldr.w	r3, [r9]
 800ebda:	fa1f fb87 	uxth.w	fp, r7
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ebe4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ebe8:	f8d9 7000 	ldr.w	r7, [r9]
 800ebec:	4463      	add	r3, ip
 800ebee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebf2:	fb0a c70b 	mla	r7, sl, fp, ip
 800ebf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec00:	4572      	cmp	r2, lr
 800ec02:	f849 3b04 	str.w	r3, [r9], #4
 800ec06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec0a:	d8e2      	bhi.n	800ebd2 <__multiply+0xb2>
 800ec0c:	9b01      	ldr	r3, [sp, #4]
 800ec0e:	f845 c003 	str.w	ip, [r5, r3]
 800ec12:	9b03      	ldr	r3, [sp, #12]
 800ec14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec18:	3104      	adds	r1, #4
 800ec1a:	f1b9 0f00 	cmp.w	r9, #0
 800ec1e:	d021      	beq.n	800ec64 <__multiply+0x144>
 800ec20:	682b      	ldr	r3, [r5, #0]
 800ec22:	f104 0c14 	add.w	ip, r4, #20
 800ec26:	46ae      	mov	lr, r5
 800ec28:	f04f 0a00 	mov.w	sl, #0
 800ec2c:	f8bc b000 	ldrh.w	fp, [ip]
 800ec30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec34:	fb09 770b 	mla	r7, r9, fp, r7
 800ec38:	4457      	add	r7, sl
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec40:	f84e 3b04 	str.w	r3, [lr], #4
 800ec44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec4c:	f8be 3000 	ldrh.w	r3, [lr]
 800ec50:	fb09 330a 	mla	r3, r9, sl, r3
 800ec54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ec58:	4562      	cmp	r2, ip
 800ec5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec5e:	d8e5      	bhi.n	800ec2c <__multiply+0x10c>
 800ec60:	9f01      	ldr	r7, [sp, #4]
 800ec62:	51eb      	str	r3, [r5, r7]
 800ec64:	3504      	adds	r5, #4
 800ec66:	e799      	b.n	800eb9c <__multiply+0x7c>
 800ec68:	3e01      	subs	r6, #1
 800ec6a:	e79b      	b.n	800eba4 <__multiply+0x84>
 800ec6c:	08014dac 	.word	0x08014dac
 800ec70:	08014dbd 	.word	0x08014dbd

0800ec74 <__pow5mult>:
 800ec74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec78:	4615      	mov	r5, r2
 800ec7a:	f012 0203 	ands.w	r2, r2, #3
 800ec7e:	4607      	mov	r7, r0
 800ec80:	460e      	mov	r6, r1
 800ec82:	d007      	beq.n	800ec94 <__pow5mult+0x20>
 800ec84:	4c25      	ldr	r4, [pc, #148]	@ (800ed1c <__pow5mult+0xa8>)
 800ec86:	3a01      	subs	r2, #1
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec8e:	f7ff fe9f 	bl	800e9d0 <__multadd>
 800ec92:	4606      	mov	r6, r0
 800ec94:	10ad      	asrs	r5, r5, #2
 800ec96:	d03d      	beq.n	800ed14 <__pow5mult+0xa0>
 800ec98:	69fc      	ldr	r4, [r7, #28]
 800ec9a:	b97c      	cbnz	r4, 800ecbc <__pow5mult+0x48>
 800ec9c:	2010      	movs	r0, #16
 800ec9e:	f7fe f8d1 	bl	800ce44 <malloc>
 800eca2:	4602      	mov	r2, r0
 800eca4:	61f8      	str	r0, [r7, #28]
 800eca6:	b928      	cbnz	r0, 800ecb4 <__pow5mult+0x40>
 800eca8:	4b1d      	ldr	r3, [pc, #116]	@ (800ed20 <__pow5mult+0xac>)
 800ecaa:	481e      	ldr	r0, [pc, #120]	@ (800ed24 <__pow5mult+0xb0>)
 800ecac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ecb0:	f000 fc64 	bl	800f57c <__assert_func>
 800ecb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ecb8:	6004      	str	r4, [r0, #0]
 800ecba:	60c4      	str	r4, [r0, #12]
 800ecbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ecc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ecc4:	b94c      	cbnz	r4, 800ecda <__pow5mult+0x66>
 800ecc6:	f240 2171 	movw	r1, #625	@ 0x271
 800ecca:	4638      	mov	r0, r7
 800eccc:	f7ff ff12 	bl	800eaf4 <__i2b>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	6003      	str	r3, [r0, #0]
 800ecda:	f04f 0900 	mov.w	r9, #0
 800ecde:	07eb      	lsls	r3, r5, #31
 800ece0:	d50a      	bpl.n	800ecf8 <__pow5mult+0x84>
 800ece2:	4631      	mov	r1, r6
 800ece4:	4622      	mov	r2, r4
 800ece6:	4638      	mov	r0, r7
 800ece8:	f7ff ff1a 	bl	800eb20 <__multiply>
 800ecec:	4631      	mov	r1, r6
 800ecee:	4680      	mov	r8, r0
 800ecf0:	4638      	mov	r0, r7
 800ecf2:	f7ff fe4b 	bl	800e98c <_Bfree>
 800ecf6:	4646      	mov	r6, r8
 800ecf8:	106d      	asrs	r5, r5, #1
 800ecfa:	d00b      	beq.n	800ed14 <__pow5mult+0xa0>
 800ecfc:	6820      	ldr	r0, [r4, #0]
 800ecfe:	b938      	cbnz	r0, 800ed10 <__pow5mult+0x9c>
 800ed00:	4622      	mov	r2, r4
 800ed02:	4621      	mov	r1, r4
 800ed04:	4638      	mov	r0, r7
 800ed06:	f7ff ff0b 	bl	800eb20 <__multiply>
 800ed0a:	6020      	str	r0, [r4, #0]
 800ed0c:	f8c0 9000 	str.w	r9, [r0]
 800ed10:	4604      	mov	r4, r0
 800ed12:	e7e4      	b.n	800ecde <__pow5mult+0x6a>
 800ed14:	4630      	mov	r0, r6
 800ed16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1a:	bf00      	nop
 800ed1c:	08014e18 	.word	0x08014e18
 800ed20:	08014d3d 	.word	0x08014d3d
 800ed24:	08014dbd 	.word	0x08014dbd

0800ed28 <__lshift>:
 800ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	6849      	ldr	r1, [r1, #4]
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	4607      	mov	r7, r0
 800ed3a:	4691      	mov	r9, r2
 800ed3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed40:	f108 0601 	add.w	r6, r8, #1
 800ed44:	42b3      	cmp	r3, r6
 800ed46:	db0b      	blt.n	800ed60 <__lshift+0x38>
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f7ff fddf 	bl	800e90c <_Balloc>
 800ed4e:	4605      	mov	r5, r0
 800ed50:	b948      	cbnz	r0, 800ed66 <__lshift+0x3e>
 800ed52:	4602      	mov	r2, r0
 800ed54:	4b28      	ldr	r3, [pc, #160]	@ (800edf8 <__lshift+0xd0>)
 800ed56:	4829      	ldr	r0, [pc, #164]	@ (800edfc <__lshift+0xd4>)
 800ed58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed5c:	f000 fc0e 	bl	800f57c <__assert_func>
 800ed60:	3101      	adds	r1, #1
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	e7ee      	b.n	800ed44 <__lshift+0x1c>
 800ed66:	2300      	movs	r3, #0
 800ed68:	f100 0114 	add.w	r1, r0, #20
 800ed6c:	f100 0210 	add.w	r2, r0, #16
 800ed70:	4618      	mov	r0, r3
 800ed72:	4553      	cmp	r3, sl
 800ed74:	db33      	blt.n	800edde <__lshift+0xb6>
 800ed76:	6920      	ldr	r0, [r4, #16]
 800ed78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed7c:	f104 0314 	add.w	r3, r4, #20
 800ed80:	f019 091f 	ands.w	r9, r9, #31
 800ed84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed8c:	d02b      	beq.n	800ede6 <__lshift+0xbe>
 800ed8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ed92:	468a      	mov	sl, r1
 800ed94:	2200      	movs	r2, #0
 800ed96:	6818      	ldr	r0, [r3, #0]
 800ed98:	fa00 f009 	lsl.w	r0, r0, r9
 800ed9c:	4310      	orrs	r0, r2
 800ed9e:	f84a 0b04 	str.w	r0, [sl], #4
 800eda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda6:	459c      	cmp	ip, r3
 800eda8:	fa22 f20e 	lsr.w	r2, r2, lr
 800edac:	d8f3      	bhi.n	800ed96 <__lshift+0x6e>
 800edae:	ebac 0304 	sub.w	r3, ip, r4
 800edb2:	3b15      	subs	r3, #21
 800edb4:	f023 0303 	bic.w	r3, r3, #3
 800edb8:	3304      	adds	r3, #4
 800edba:	f104 0015 	add.w	r0, r4, #21
 800edbe:	4584      	cmp	ip, r0
 800edc0:	bf38      	it	cc
 800edc2:	2304      	movcc	r3, #4
 800edc4:	50ca      	str	r2, [r1, r3]
 800edc6:	b10a      	cbz	r2, 800edcc <__lshift+0xa4>
 800edc8:	f108 0602 	add.w	r6, r8, #2
 800edcc:	3e01      	subs	r6, #1
 800edce:	4638      	mov	r0, r7
 800edd0:	612e      	str	r6, [r5, #16]
 800edd2:	4621      	mov	r1, r4
 800edd4:	f7ff fdda 	bl	800e98c <_Bfree>
 800edd8:	4628      	mov	r0, r5
 800edda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ede2:	3301      	adds	r3, #1
 800ede4:	e7c5      	b.n	800ed72 <__lshift+0x4a>
 800ede6:	3904      	subs	r1, #4
 800ede8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edec:	f841 2f04 	str.w	r2, [r1, #4]!
 800edf0:	459c      	cmp	ip, r3
 800edf2:	d8f9      	bhi.n	800ede8 <__lshift+0xc0>
 800edf4:	e7ea      	b.n	800edcc <__lshift+0xa4>
 800edf6:	bf00      	nop
 800edf8:	08014dac 	.word	0x08014dac
 800edfc:	08014dbd 	.word	0x08014dbd

0800ee00 <__mcmp>:
 800ee00:	690a      	ldr	r2, [r1, #16]
 800ee02:	4603      	mov	r3, r0
 800ee04:	6900      	ldr	r0, [r0, #16]
 800ee06:	1a80      	subs	r0, r0, r2
 800ee08:	b530      	push	{r4, r5, lr}
 800ee0a:	d10e      	bne.n	800ee2a <__mcmp+0x2a>
 800ee0c:	3314      	adds	r3, #20
 800ee0e:	3114      	adds	r1, #20
 800ee10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee20:	4295      	cmp	r5, r2
 800ee22:	d003      	beq.n	800ee2c <__mcmp+0x2c>
 800ee24:	d205      	bcs.n	800ee32 <__mcmp+0x32>
 800ee26:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2a:	bd30      	pop	{r4, r5, pc}
 800ee2c:	42a3      	cmp	r3, r4
 800ee2e:	d3f3      	bcc.n	800ee18 <__mcmp+0x18>
 800ee30:	e7fb      	b.n	800ee2a <__mcmp+0x2a>
 800ee32:	2001      	movs	r0, #1
 800ee34:	e7f9      	b.n	800ee2a <__mcmp+0x2a>
	...

0800ee38 <__mdiff>:
 800ee38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	4689      	mov	r9, r1
 800ee3e:	4606      	mov	r6, r0
 800ee40:	4611      	mov	r1, r2
 800ee42:	4648      	mov	r0, r9
 800ee44:	4614      	mov	r4, r2
 800ee46:	f7ff ffdb 	bl	800ee00 <__mcmp>
 800ee4a:	1e05      	subs	r5, r0, #0
 800ee4c:	d112      	bne.n	800ee74 <__mdiff+0x3c>
 800ee4e:	4629      	mov	r1, r5
 800ee50:	4630      	mov	r0, r6
 800ee52:	f7ff fd5b 	bl	800e90c <_Balloc>
 800ee56:	4602      	mov	r2, r0
 800ee58:	b928      	cbnz	r0, 800ee66 <__mdiff+0x2e>
 800ee5a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef58 <__mdiff+0x120>)
 800ee5c:	f240 2137 	movw	r1, #567	@ 0x237
 800ee60:	483e      	ldr	r0, [pc, #248]	@ (800ef5c <__mdiff+0x124>)
 800ee62:	f000 fb8b 	bl	800f57c <__assert_func>
 800ee66:	2301      	movs	r3, #1
 800ee68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	b003      	add	sp, #12
 800ee70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee74:	bfbc      	itt	lt
 800ee76:	464b      	movlt	r3, r9
 800ee78:	46a1      	movlt	r9, r4
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee80:	bfba      	itte	lt
 800ee82:	461c      	movlt	r4, r3
 800ee84:	2501      	movlt	r5, #1
 800ee86:	2500      	movge	r5, #0
 800ee88:	f7ff fd40 	bl	800e90c <_Balloc>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	b918      	cbnz	r0, 800ee98 <__mdiff+0x60>
 800ee90:	4b31      	ldr	r3, [pc, #196]	@ (800ef58 <__mdiff+0x120>)
 800ee92:	f240 2145 	movw	r1, #581	@ 0x245
 800ee96:	e7e3      	b.n	800ee60 <__mdiff+0x28>
 800ee98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee9c:	6926      	ldr	r6, [r4, #16]
 800ee9e:	60c5      	str	r5, [r0, #12]
 800eea0:	f109 0310 	add.w	r3, r9, #16
 800eea4:	f109 0514 	add.w	r5, r9, #20
 800eea8:	f104 0e14 	add.w	lr, r4, #20
 800eeac:	f100 0b14 	add.w	fp, r0, #20
 800eeb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eeb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eeb8:	9301      	str	r3, [sp, #4]
 800eeba:	46d9      	mov	r9, fp
 800eebc:	f04f 0c00 	mov.w	ip, #0
 800eec0:	9b01      	ldr	r3, [sp, #4]
 800eec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eeca:	9301      	str	r3, [sp, #4]
 800eecc:	fa1f f38a 	uxth.w	r3, sl
 800eed0:	4619      	mov	r1, r3
 800eed2:	b283      	uxth	r3, r0
 800eed4:	1acb      	subs	r3, r1, r3
 800eed6:	0c00      	lsrs	r0, r0, #16
 800eed8:	4463      	add	r3, ip
 800eeda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eee8:	4576      	cmp	r6, lr
 800eeea:	f849 3b04 	str.w	r3, [r9], #4
 800eeee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eef2:	d8e5      	bhi.n	800eec0 <__mdiff+0x88>
 800eef4:	1b33      	subs	r3, r6, r4
 800eef6:	3b15      	subs	r3, #21
 800eef8:	f023 0303 	bic.w	r3, r3, #3
 800eefc:	3415      	adds	r4, #21
 800eefe:	3304      	adds	r3, #4
 800ef00:	42a6      	cmp	r6, r4
 800ef02:	bf38      	it	cc
 800ef04:	2304      	movcc	r3, #4
 800ef06:	441d      	add	r5, r3
 800ef08:	445b      	add	r3, fp
 800ef0a:	461e      	mov	r6, r3
 800ef0c:	462c      	mov	r4, r5
 800ef0e:	4544      	cmp	r4, r8
 800ef10:	d30e      	bcc.n	800ef30 <__mdiff+0xf8>
 800ef12:	f108 0103 	add.w	r1, r8, #3
 800ef16:	1b49      	subs	r1, r1, r5
 800ef18:	f021 0103 	bic.w	r1, r1, #3
 800ef1c:	3d03      	subs	r5, #3
 800ef1e:	45a8      	cmp	r8, r5
 800ef20:	bf38      	it	cc
 800ef22:	2100      	movcc	r1, #0
 800ef24:	440b      	add	r3, r1
 800ef26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef2a:	b191      	cbz	r1, 800ef52 <__mdiff+0x11a>
 800ef2c:	6117      	str	r7, [r2, #16]
 800ef2e:	e79d      	b.n	800ee6c <__mdiff+0x34>
 800ef30:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef34:	46e6      	mov	lr, ip
 800ef36:	0c08      	lsrs	r0, r1, #16
 800ef38:	fa1c fc81 	uxtah	ip, ip, r1
 800ef3c:	4471      	add	r1, lr
 800ef3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef42:	b289      	uxth	r1, r1
 800ef44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef48:	f846 1b04 	str.w	r1, [r6], #4
 800ef4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef50:	e7dd      	b.n	800ef0e <__mdiff+0xd6>
 800ef52:	3f01      	subs	r7, #1
 800ef54:	e7e7      	b.n	800ef26 <__mdiff+0xee>
 800ef56:	bf00      	nop
 800ef58:	08014dac 	.word	0x08014dac
 800ef5c:	08014dbd 	.word	0x08014dbd

0800ef60 <__d2b>:
 800ef60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef64:	460f      	mov	r7, r1
 800ef66:	2101      	movs	r1, #1
 800ef68:	ec59 8b10 	vmov	r8, r9, d0
 800ef6c:	4616      	mov	r6, r2
 800ef6e:	f7ff fccd 	bl	800e90c <_Balloc>
 800ef72:	4604      	mov	r4, r0
 800ef74:	b930      	cbnz	r0, 800ef84 <__d2b+0x24>
 800ef76:	4602      	mov	r2, r0
 800ef78:	4b23      	ldr	r3, [pc, #140]	@ (800f008 <__d2b+0xa8>)
 800ef7a:	4824      	ldr	r0, [pc, #144]	@ (800f00c <__d2b+0xac>)
 800ef7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef80:	f000 fafc 	bl	800f57c <__assert_func>
 800ef84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef8c:	b10d      	cbz	r5, 800ef92 <__d2b+0x32>
 800ef8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef92:	9301      	str	r3, [sp, #4]
 800ef94:	f1b8 0300 	subs.w	r3, r8, #0
 800ef98:	d023      	beq.n	800efe2 <__d2b+0x82>
 800ef9a:	4668      	mov	r0, sp
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	f7ff fd7c 	bl	800ea9a <__lo0bits>
 800efa2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800efa6:	b1d0      	cbz	r0, 800efde <__d2b+0x7e>
 800efa8:	f1c0 0320 	rsb	r3, r0, #32
 800efac:	fa02 f303 	lsl.w	r3, r2, r3
 800efb0:	430b      	orrs	r3, r1
 800efb2:	40c2      	lsrs	r2, r0
 800efb4:	6163      	str	r3, [r4, #20]
 800efb6:	9201      	str	r2, [sp, #4]
 800efb8:	9b01      	ldr	r3, [sp, #4]
 800efba:	61a3      	str	r3, [r4, #24]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	bf0c      	ite	eq
 800efc0:	2201      	moveq	r2, #1
 800efc2:	2202      	movne	r2, #2
 800efc4:	6122      	str	r2, [r4, #16]
 800efc6:	b1a5      	cbz	r5, 800eff2 <__d2b+0x92>
 800efc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800efcc:	4405      	add	r5, r0
 800efce:	603d      	str	r5, [r7, #0]
 800efd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efd4:	6030      	str	r0, [r6, #0]
 800efd6:	4620      	mov	r0, r4
 800efd8:	b003      	add	sp, #12
 800efda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efde:	6161      	str	r1, [r4, #20]
 800efe0:	e7ea      	b.n	800efb8 <__d2b+0x58>
 800efe2:	a801      	add	r0, sp, #4
 800efe4:	f7ff fd59 	bl	800ea9a <__lo0bits>
 800efe8:	9b01      	ldr	r3, [sp, #4]
 800efea:	6163      	str	r3, [r4, #20]
 800efec:	3020      	adds	r0, #32
 800efee:	2201      	movs	r2, #1
 800eff0:	e7e8      	b.n	800efc4 <__d2b+0x64>
 800eff2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eff6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800effa:	6038      	str	r0, [r7, #0]
 800effc:	6918      	ldr	r0, [r3, #16]
 800effe:	f7ff fd2d 	bl	800ea5c <__hi0bits>
 800f002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f006:	e7e5      	b.n	800efd4 <__d2b+0x74>
 800f008:	08014dac 	.word	0x08014dac
 800f00c:	08014dbd 	.word	0x08014dbd

0800f010 <__sfputc_r>:
 800f010:	6893      	ldr	r3, [r2, #8]
 800f012:	3b01      	subs	r3, #1
 800f014:	2b00      	cmp	r3, #0
 800f016:	b410      	push	{r4}
 800f018:	6093      	str	r3, [r2, #8]
 800f01a:	da08      	bge.n	800f02e <__sfputc_r+0x1e>
 800f01c:	6994      	ldr	r4, [r2, #24]
 800f01e:	42a3      	cmp	r3, r4
 800f020:	db01      	blt.n	800f026 <__sfputc_r+0x16>
 800f022:	290a      	cmp	r1, #10
 800f024:	d103      	bne.n	800f02e <__sfputc_r+0x1e>
 800f026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f02a:	f000 ba13 	b.w	800f454 <__swbuf_r>
 800f02e:	6813      	ldr	r3, [r2, #0]
 800f030:	1c58      	adds	r0, r3, #1
 800f032:	6010      	str	r0, [r2, #0]
 800f034:	7019      	strb	r1, [r3, #0]
 800f036:	4608      	mov	r0, r1
 800f038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03c:	4770      	bx	lr

0800f03e <__sfputs_r>:
 800f03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f040:	4606      	mov	r6, r0
 800f042:	460f      	mov	r7, r1
 800f044:	4614      	mov	r4, r2
 800f046:	18d5      	adds	r5, r2, r3
 800f048:	42ac      	cmp	r4, r5
 800f04a:	d101      	bne.n	800f050 <__sfputs_r+0x12>
 800f04c:	2000      	movs	r0, #0
 800f04e:	e007      	b.n	800f060 <__sfputs_r+0x22>
 800f050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f054:	463a      	mov	r2, r7
 800f056:	4630      	mov	r0, r6
 800f058:	f7ff ffda 	bl	800f010 <__sfputc_r>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	d1f3      	bne.n	800f048 <__sfputs_r+0xa>
 800f060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f064 <_vfiprintf_r>:
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	460d      	mov	r5, r1
 800f06a:	b09d      	sub	sp, #116	@ 0x74
 800f06c:	4614      	mov	r4, r2
 800f06e:	4698      	mov	r8, r3
 800f070:	4606      	mov	r6, r0
 800f072:	b118      	cbz	r0, 800f07c <_vfiprintf_r+0x18>
 800f074:	6a03      	ldr	r3, [r0, #32]
 800f076:	b90b      	cbnz	r3, 800f07c <_vfiprintf_r+0x18>
 800f078:	f7fe fc7e 	bl	800d978 <__sinit>
 800f07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f07e:	07d9      	lsls	r1, r3, #31
 800f080:	d405      	bmi.n	800f08e <_vfiprintf_r+0x2a>
 800f082:	89ab      	ldrh	r3, [r5, #12]
 800f084:	059a      	lsls	r2, r3, #22
 800f086:	d402      	bmi.n	800f08e <_vfiprintf_r+0x2a>
 800f088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f08a:	f7fe fd96 	bl	800dbba <__retarget_lock_acquire_recursive>
 800f08e:	89ab      	ldrh	r3, [r5, #12]
 800f090:	071b      	lsls	r3, r3, #28
 800f092:	d501      	bpl.n	800f098 <_vfiprintf_r+0x34>
 800f094:	692b      	ldr	r3, [r5, #16]
 800f096:	b99b      	cbnz	r3, 800f0c0 <_vfiprintf_r+0x5c>
 800f098:	4629      	mov	r1, r5
 800f09a:	4630      	mov	r0, r6
 800f09c:	f000 fa18 	bl	800f4d0 <__swsetup_r>
 800f0a0:	b170      	cbz	r0, 800f0c0 <_vfiprintf_r+0x5c>
 800f0a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0a4:	07dc      	lsls	r4, r3, #31
 800f0a6:	d504      	bpl.n	800f0b2 <_vfiprintf_r+0x4e>
 800f0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ac:	b01d      	add	sp, #116	@ 0x74
 800f0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b2:	89ab      	ldrh	r3, [r5, #12]
 800f0b4:	0598      	lsls	r0, r3, #22
 800f0b6:	d4f7      	bmi.n	800f0a8 <_vfiprintf_r+0x44>
 800f0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0ba:	f7fe fd7f 	bl	800dbbc <__retarget_lock_release_recursive>
 800f0be:	e7f3      	b.n	800f0a8 <_vfiprintf_r+0x44>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0c4:	2320      	movs	r3, #32
 800f0c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0ce:	2330      	movs	r3, #48	@ 0x30
 800f0d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f280 <_vfiprintf_r+0x21c>
 800f0d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0d8:	f04f 0901 	mov.w	r9, #1
 800f0dc:	4623      	mov	r3, r4
 800f0de:	469a      	mov	sl, r3
 800f0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0e4:	b10a      	cbz	r2, 800f0ea <_vfiprintf_r+0x86>
 800f0e6:	2a25      	cmp	r2, #37	@ 0x25
 800f0e8:	d1f9      	bne.n	800f0de <_vfiprintf_r+0x7a>
 800f0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f0ee:	d00b      	beq.n	800f108 <_vfiprintf_r+0xa4>
 800f0f0:	465b      	mov	r3, fp
 800f0f2:	4622      	mov	r2, r4
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7ff ffa1 	bl	800f03e <__sfputs_r>
 800f0fc:	3001      	adds	r0, #1
 800f0fe:	f000 80a7 	beq.w	800f250 <_vfiprintf_r+0x1ec>
 800f102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f104:	445a      	add	r2, fp
 800f106:	9209      	str	r2, [sp, #36]	@ 0x24
 800f108:	f89a 3000 	ldrb.w	r3, [sl]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f000 809f 	beq.w	800f250 <_vfiprintf_r+0x1ec>
 800f112:	2300      	movs	r3, #0
 800f114:	f04f 32ff 	mov.w	r2, #4294967295
 800f118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f11c:	f10a 0a01 	add.w	sl, sl, #1
 800f120:	9304      	str	r3, [sp, #16]
 800f122:	9307      	str	r3, [sp, #28]
 800f124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f128:	931a      	str	r3, [sp, #104]	@ 0x68
 800f12a:	4654      	mov	r4, sl
 800f12c:	2205      	movs	r2, #5
 800f12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f132:	4853      	ldr	r0, [pc, #332]	@ (800f280 <_vfiprintf_r+0x21c>)
 800f134:	f7f1 f864 	bl	8000200 <memchr>
 800f138:	9a04      	ldr	r2, [sp, #16]
 800f13a:	b9d8      	cbnz	r0, 800f174 <_vfiprintf_r+0x110>
 800f13c:	06d1      	lsls	r1, r2, #27
 800f13e:	bf44      	itt	mi
 800f140:	2320      	movmi	r3, #32
 800f142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f146:	0713      	lsls	r3, r2, #28
 800f148:	bf44      	itt	mi
 800f14a:	232b      	movmi	r3, #43	@ 0x2b
 800f14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f150:	f89a 3000 	ldrb.w	r3, [sl]
 800f154:	2b2a      	cmp	r3, #42	@ 0x2a
 800f156:	d015      	beq.n	800f184 <_vfiprintf_r+0x120>
 800f158:	9a07      	ldr	r2, [sp, #28]
 800f15a:	4654      	mov	r4, sl
 800f15c:	2000      	movs	r0, #0
 800f15e:	f04f 0c0a 	mov.w	ip, #10
 800f162:	4621      	mov	r1, r4
 800f164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f168:	3b30      	subs	r3, #48	@ 0x30
 800f16a:	2b09      	cmp	r3, #9
 800f16c:	d94b      	bls.n	800f206 <_vfiprintf_r+0x1a2>
 800f16e:	b1b0      	cbz	r0, 800f19e <_vfiprintf_r+0x13a>
 800f170:	9207      	str	r2, [sp, #28]
 800f172:	e014      	b.n	800f19e <_vfiprintf_r+0x13a>
 800f174:	eba0 0308 	sub.w	r3, r0, r8
 800f178:	fa09 f303 	lsl.w	r3, r9, r3
 800f17c:	4313      	orrs	r3, r2
 800f17e:	9304      	str	r3, [sp, #16]
 800f180:	46a2      	mov	sl, r4
 800f182:	e7d2      	b.n	800f12a <_vfiprintf_r+0xc6>
 800f184:	9b03      	ldr	r3, [sp, #12]
 800f186:	1d19      	adds	r1, r3, #4
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	9103      	str	r1, [sp, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	bfbb      	ittet	lt
 800f190:	425b      	neglt	r3, r3
 800f192:	f042 0202 	orrlt.w	r2, r2, #2
 800f196:	9307      	strge	r3, [sp, #28]
 800f198:	9307      	strlt	r3, [sp, #28]
 800f19a:	bfb8      	it	lt
 800f19c:	9204      	strlt	r2, [sp, #16]
 800f19e:	7823      	ldrb	r3, [r4, #0]
 800f1a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1a2:	d10a      	bne.n	800f1ba <_vfiprintf_r+0x156>
 800f1a4:	7863      	ldrb	r3, [r4, #1]
 800f1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1a8:	d132      	bne.n	800f210 <_vfiprintf_r+0x1ac>
 800f1aa:	9b03      	ldr	r3, [sp, #12]
 800f1ac:	1d1a      	adds	r2, r3, #4
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	9203      	str	r2, [sp, #12]
 800f1b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1b6:	3402      	adds	r4, #2
 800f1b8:	9305      	str	r3, [sp, #20]
 800f1ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f290 <_vfiprintf_r+0x22c>
 800f1be:	7821      	ldrb	r1, [r4, #0]
 800f1c0:	2203      	movs	r2, #3
 800f1c2:	4650      	mov	r0, sl
 800f1c4:	f7f1 f81c 	bl	8000200 <memchr>
 800f1c8:	b138      	cbz	r0, 800f1da <_vfiprintf_r+0x176>
 800f1ca:	9b04      	ldr	r3, [sp, #16]
 800f1cc:	eba0 000a 	sub.w	r0, r0, sl
 800f1d0:	2240      	movs	r2, #64	@ 0x40
 800f1d2:	4082      	lsls	r2, r0
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	3401      	adds	r4, #1
 800f1d8:	9304      	str	r3, [sp, #16]
 800f1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1de:	4829      	ldr	r0, [pc, #164]	@ (800f284 <_vfiprintf_r+0x220>)
 800f1e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1e4:	2206      	movs	r2, #6
 800f1e6:	f7f1 f80b 	bl	8000200 <memchr>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d03f      	beq.n	800f26e <_vfiprintf_r+0x20a>
 800f1ee:	4b26      	ldr	r3, [pc, #152]	@ (800f288 <_vfiprintf_r+0x224>)
 800f1f0:	bb1b      	cbnz	r3, 800f23a <_vfiprintf_r+0x1d6>
 800f1f2:	9b03      	ldr	r3, [sp, #12]
 800f1f4:	3307      	adds	r3, #7
 800f1f6:	f023 0307 	bic.w	r3, r3, #7
 800f1fa:	3308      	adds	r3, #8
 800f1fc:	9303      	str	r3, [sp, #12]
 800f1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f200:	443b      	add	r3, r7
 800f202:	9309      	str	r3, [sp, #36]	@ 0x24
 800f204:	e76a      	b.n	800f0dc <_vfiprintf_r+0x78>
 800f206:	fb0c 3202 	mla	r2, ip, r2, r3
 800f20a:	460c      	mov	r4, r1
 800f20c:	2001      	movs	r0, #1
 800f20e:	e7a8      	b.n	800f162 <_vfiprintf_r+0xfe>
 800f210:	2300      	movs	r3, #0
 800f212:	3401      	adds	r4, #1
 800f214:	9305      	str	r3, [sp, #20]
 800f216:	4619      	mov	r1, r3
 800f218:	f04f 0c0a 	mov.w	ip, #10
 800f21c:	4620      	mov	r0, r4
 800f21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f222:	3a30      	subs	r2, #48	@ 0x30
 800f224:	2a09      	cmp	r2, #9
 800f226:	d903      	bls.n	800f230 <_vfiprintf_r+0x1cc>
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d0c6      	beq.n	800f1ba <_vfiprintf_r+0x156>
 800f22c:	9105      	str	r1, [sp, #20]
 800f22e:	e7c4      	b.n	800f1ba <_vfiprintf_r+0x156>
 800f230:	fb0c 2101 	mla	r1, ip, r1, r2
 800f234:	4604      	mov	r4, r0
 800f236:	2301      	movs	r3, #1
 800f238:	e7f0      	b.n	800f21c <_vfiprintf_r+0x1b8>
 800f23a:	ab03      	add	r3, sp, #12
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	462a      	mov	r2, r5
 800f240:	4b12      	ldr	r3, [pc, #72]	@ (800f28c <_vfiprintf_r+0x228>)
 800f242:	a904      	add	r1, sp, #16
 800f244:	4630      	mov	r0, r6
 800f246:	f7fd ff53 	bl	800d0f0 <_printf_float>
 800f24a:	4607      	mov	r7, r0
 800f24c:	1c78      	adds	r0, r7, #1
 800f24e:	d1d6      	bne.n	800f1fe <_vfiprintf_r+0x19a>
 800f250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f252:	07d9      	lsls	r1, r3, #31
 800f254:	d405      	bmi.n	800f262 <_vfiprintf_r+0x1fe>
 800f256:	89ab      	ldrh	r3, [r5, #12]
 800f258:	059a      	lsls	r2, r3, #22
 800f25a:	d402      	bmi.n	800f262 <_vfiprintf_r+0x1fe>
 800f25c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f25e:	f7fe fcad 	bl	800dbbc <__retarget_lock_release_recursive>
 800f262:	89ab      	ldrh	r3, [r5, #12]
 800f264:	065b      	lsls	r3, r3, #25
 800f266:	f53f af1f 	bmi.w	800f0a8 <_vfiprintf_r+0x44>
 800f26a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f26c:	e71e      	b.n	800f0ac <_vfiprintf_r+0x48>
 800f26e:	ab03      	add	r3, sp, #12
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	462a      	mov	r2, r5
 800f274:	4b05      	ldr	r3, [pc, #20]	@ (800f28c <_vfiprintf_r+0x228>)
 800f276:	a904      	add	r1, sp, #16
 800f278:	4630      	mov	r0, r6
 800f27a:	f7fe f9d1 	bl	800d620 <_printf_i>
 800f27e:	e7e4      	b.n	800f24a <_vfiprintf_r+0x1e6>
 800f280:	08014f18 	.word	0x08014f18
 800f284:	08014f22 	.word	0x08014f22
 800f288:	0800d0f1 	.word	0x0800d0f1
 800f28c:	0800f03f 	.word	0x0800f03f
 800f290:	08014f1e 	.word	0x08014f1e

0800f294 <__sflush_r>:
 800f294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	0716      	lsls	r6, r2, #28
 800f29e:	4605      	mov	r5, r0
 800f2a0:	460c      	mov	r4, r1
 800f2a2:	d454      	bmi.n	800f34e <__sflush_r+0xba>
 800f2a4:	684b      	ldr	r3, [r1, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	dc02      	bgt.n	800f2b0 <__sflush_r+0x1c>
 800f2aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dd48      	ble.n	800f342 <__sflush_r+0xae>
 800f2b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2b2:	2e00      	cmp	r6, #0
 800f2b4:	d045      	beq.n	800f342 <__sflush_r+0xae>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f2bc:	682f      	ldr	r7, [r5, #0]
 800f2be:	6a21      	ldr	r1, [r4, #32]
 800f2c0:	602b      	str	r3, [r5, #0]
 800f2c2:	d030      	beq.n	800f326 <__sflush_r+0x92>
 800f2c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	0759      	lsls	r1, r3, #29
 800f2ca:	d505      	bpl.n	800f2d8 <__sflush_r+0x44>
 800f2cc:	6863      	ldr	r3, [r4, #4]
 800f2ce:	1ad2      	subs	r2, r2, r3
 800f2d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2d2:	b10b      	cbz	r3, 800f2d8 <__sflush_r+0x44>
 800f2d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2d6:	1ad2      	subs	r2, r2, r3
 800f2d8:	2300      	movs	r3, #0
 800f2da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2dc:	6a21      	ldr	r1, [r4, #32]
 800f2de:	4628      	mov	r0, r5
 800f2e0:	47b0      	blx	r6
 800f2e2:	1c43      	adds	r3, r0, #1
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	d106      	bne.n	800f2f6 <__sflush_r+0x62>
 800f2e8:	6829      	ldr	r1, [r5, #0]
 800f2ea:	291d      	cmp	r1, #29
 800f2ec:	d82b      	bhi.n	800f346 <__sflush_r+0xb2>
 800f2ee:	4a2a      	ldr	r2, [pc, #168]	@ (800f398 <__sflush_r+0x104>)
 800f2f0:	410a      	asrs	r2, r1
 800f2f2:	07d6      	lsls	r6, r2, #31
 800f2f4:	d427      	bmi.n	800f346 <__sflush_r+0xb2>
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	6062      	str	r2, [r4, #4]
 800f2fa:	04d9      	lsls	r1, r3, #19
 800f2fc:	6922      	ldr	r2, [r4, #16]
 800f2fe:	6022      	str	r2, [r4, #0]
 800f300:	d504      	bpl.n	800f30c <__sflush_r+0x78>
 800f302:	1c42      	adds	r2, r0, #1
 800f304:	d101      	bne.n	800f30a <__sflush_r+0x76>
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	b903      	cbnz	r3, 800f30c <__sflush_r+0x78>
 800f30a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f30c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f30e:	602f      	str	r7, [r5, #0]
 800f310:	b1b9      	cbz	r1, 800f342 <__sflush_r+0xae>
 800f312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f316:	4299      	cmp	r1, r3
 800f318:	d002      	beq.n	800f320 <__sflush_r+0x8c>
 800f31a:	4628      	mov	r0, r5
 800f31c:	f7ff faac 	bl	800e878 <_free_r>
 800f320:	2300      	movs	r3, #0
 800f322:	6363      	str	r3, [r4, #52]	@ 0x34
 800f324:	e00d      	b.n	800f342 <__sflush_r+0xae>
 800f326:	2301      	movs	r3, #1
 800f328:	4628      	mov	r0, r5
 800f32a:	47b0      	blx	r6
 800f32c:	4602      	mov	r2, r0
 800f32e:	1c50      	adds	r0, r2, #1
 800f330:	d1c9      	bne.n	800f2c6 <__sflush_r+0x32>
 800f332:	682b      	ldr	r3, [r5, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d0c6      	beq.n	800f2c6 <__sflush_r+0x32>
 800f338:	2b1d      	cmp	r3, #29
 800f33a:	d001      	beq.n	800f340 <__sflush_r+0xac>
 800f33c:	2b16      	cmp	r3, #22
 800f33e:	d11e      	bne.n	800f37e <__sflush_r+0xea>
 800f340:	602f      	str	r7, [r5, #0]
 800f342:	2000      	movs	r0, #0
 800f344:	e022      	b.n	800f38c <__sflush_r+0xf8>
 800f346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f34a:	b21b      	sxth	r3, r3
 800f34c:	e01b      	b.n	800f386 <__sflush_r+0xf2>
 800f34e:	690f      	ldr	r7, [r1, #16]
 800f350:	2f00      	cmp	r7, #0
 800f352:	d0f6      	beq.n	800f342 <__sflush_r+0xae>
 800f354:	0793      	lsls	r3, r2, #30
 800f356:	680e      	ldr	r6, [r1, #0]
 800f358:	bf08      	it	eq
 800f35a:	694b      	ldreq	r3, [r1, #20]
 800f35c:	600f      	str	r7, [r1, #0]
 800f35e:	bf18      	it	ne
 800f360:	2300      	movne	r3, #0
 800f362:	eba6 0807 	sub.w	r8, r6, r7
 800f366:	608b      	str	r3, [r1, #8]
 800f368:	f1b8 0f00 	cmp.w	r8, #0
 800f36c:	dde9      	ble.n	800f342 <__sflush_r+0xae>
 800f36e:	6a21      	ldr	r1, [r4, #32]
 800f370:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f372:	4643      	mov	r3, r8
 800f374:	463a      	mov	r2, r7
 800f376:	4628      	mov	r0, r5
 800f378:	47b0      	blx	r6
 800f37a:	2800      	cmp	r0, #0
 800f37c:	dc08      	bgt.n	800f390 <__sflush_r+0xfc>
 800f37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f386:	81a3      	strh	r3, [r4, #12]
 800f388:	f04f 30ff 	mov.w	r0, #4294967295
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	4407      	add	r7, r0
 800f392:	eba8 0800 	sub.w	r8, r8, r0
 800f396:	e7e7      	b.n	800f368 <__sflush_r+0xd4>
 800f398:	dfbffffe 	.word	0xdfbffffe

0800f39c <_fflush_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	690b      	ldr	r3, [r1, #16]
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	b913      	cbnz	r3, 800f3ac <_fflush_r+0x10>
 800f3a6:	2500      	movs	r5, #0
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	b118      	cbz	r0, 800f3b6 <_fflush_r+0x1a>
 800f3ae:	6a03      	ldr	r3, [r0, #32]
 800f3b0:	b90b      	cbnz	r3, 800f3b6 <_fflush_r+0x1a>
 800f3b2:	f7fe fae1 	bl	800d978 <__sinit>
 800f3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d0f3      	beq.n	800f3a6 <_fflush_r+0xa>
 800f3be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3c0:	07d0      	lsls	r0, r2, #31
 800f3c2:	d404      	bmi.n	800f3ce <_fflush_r+0x32>
 800f3c4:	0599      	lsls	r1, r3, #22
 800f3c6:	d402      	bmi.n	800f3ce <_fflush_r+0x32>
 800f3c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3ca:	f7fe fbf6 	bl	800dbba <__retarget_lock_acquire_recursive>
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	f7ff ff5f 	bl	800f294 <__sflush_r>
 800f3d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3d8:	07da      	lsls	r2, r3, #31
 800f3da:	4605      	mov	r5, r0
 800f3dc:	d4e4      	bmi.n	800f3a8 <_fflush_r+0xc>
 800f3de:	89a3      	ldrh	r3, [r4, #12]
 800f3e0:	059b      	lsls	r3, r3, #22
 800f3e2:	d4e1      	bmi.n	800f3a8 <_fflush_r+0xc>
 800f3e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3e6:	f7fe fbe9 	bl	800dbbc <__retarget_lock_release_recursive>
 800f3ea:	e7dd      	b.n	800f3a8 <_fflush_r+0xc>

0800f3ec <_putc_r>:
 800f3ec:	b570      	push	{r4, r5, r6, lr}
 800f3ee:	460d      	mov	r5, r1
 800f3f0:	4614      	mov	r4, r2
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	b118      	cbz	r0, 800f3fe <_putc_r+0x12>
 800f3f6:	6a03      	ldr	r3, [r0, #32]
 800f3f8:	b90b      	cbnz	r3, 800f3fe <_putc_r+0x12>
 800f3fa:	f7fe fabd 	bl	800d978 <__sinit>
 800f3fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f400:	07d8      	lsls	r0, r3, #31
 800f402:	d405      	bmi.n	800f410 <_putc_r+0x24>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	0599      	lsls	r1, r3, #22
 800f408:	d402      	bmi.n	800f410 <_putc_r+0x24>
 800f40a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f40c:	f7fe fbd5 	bl	800dbba <__retarget_lock_acquire_recursive>
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	3b01      	subs	r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	60a3      	str	r3, [r4, #8]
 800f418:	da05      	bge.n	800f426 <_putc_r+0x3a>
 800f41a:	69a2      	ldr	r2, [r4, #24]
 800f41c:	4293      	cmp	r3, r2
 800f41e:	db12      	blt.n	800f446 <_putc_r+0x5a>
 800f420:	b2eb      	uxtb	r3, r5
 800f422:	2b0a      	cmp	r3, #10
 800f424:	d00f      	beq.n	800f446 <_putc_r+0x5a>
 800f426:	6823      	ldr	r3, [r4, #0]
 800f428:	1c5a      	adds	r2, r3, #1
 800f42a:	6022      	str	r2, [r4, #0]
 800f42c:	701d      	strb	r5, [r3, #0]
 800f42e:	b2ed      	uxtb	r5, r5
 800f430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f432:	07da      	lsls	r2, r3, #31
 800f434:	d405      	bmi.n	800f442 <_putc_r+0x56>
 800f436:	89a3      	ldrh	r3, [r4, #12]
 800f438:	059b      	lsls	r3, r3, #22
 800f43a:	d402      	bmi.n	800f442 <_putc_r+0x56>
 800f43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f43e:	f7fe fbbd 	bl	800dbbc <__retarget_lock_release_recursive>
 800f442:	4628      	mov	r0, r5
 800f444:	bd70      	pop	{r4, r5, r6, pc}
 800f446:	4629      	mov	r1, r5
 800f448:	4622      	mov	r2, r4
 800f44a:	4630      	mov	r0, r6
 800f44c:	f000 f802 	bl	800f454 <__swbuf_r>
 800f450:	4605      	mov	r5, r0
 800f452:	e7ed      	b.n	800f430 <_putc_r+0x44>

0800f454 <__swbuf_r>:
 800f454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f456:	460e      	mov	r6, r1
 800f458:	4614      	mov	r4, r2
 800f45a:	4605      	mov	r5, r0
 800f45c:	b118      	cbz	r0, 800f466 <__swbuf_r+0x12>
 800f45e:	6a03      	ldr	r3, [r0, #32]
 800f460:	b90b      	cbnz	r3, 800f466 <__swbuf_r+0x12>
 800f462:	f7fe fa89 	bl	800d978 <__sinit>
 800f466:	69a3      	ldr	r3, [r4, #24]
 800f468:	60a3      	str	r3, [r4, #8]
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	071a      	lsls	r2, r3, #28
 800f46e:	d501      	bpl.n	800f474 <__swbuf_r+0x20>
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	b943      	cbnz	r3, 800f486 <__swbuf_r+0x32>
 800f474:	4621      	mov	r1, r4
 800f476:	4628      	mov	r0, r5
 800f478:	f000 f82a 	bl	800f4d0 <__swsetup_r>
 800f47c:	b118      	cbz	r0, 800f486 <__swbuf_r+0x32>
 800f47e:	f04f 37ff 	mov.w	r7, #4294967295
 800f482:	4638      	mov	r0, r7
 800f484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	6922      	ldr	r2, [r4, #16]
 800f48a:	1a98      	subs	r0, r3, r2
 800f48c:	6963      	ldr	r3, [r4, #20]
 800f48e:	b2f6      	uxtb	r6, r6
 800f490:	4283      	cmp	r3, r0
 800f492:	4637      	mov	r7, r6
 800f494:	dc05      	bgt.n	800f4a2 <__swbuf_r+0x4e>
 800f496:	4621      	mov	r1, r4
 800f498:	4628      	mov	r0, r5
 800f49a:	f7ff ff7f 	bl	800f39c <_fflush_r>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	d1ed      	bne.n	800f47e <__swbuf_r+0x2a>
 800f4a2:	68a3      	ldr	r3, [r4, #8]
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	60a3      	str	r3, [r4, #8]
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	1c5a      	adds	r2, r3, #1
 800f4ac:	6022      	str	r2, [r4, #0]
 800f4ae:	701e      	strb	r6, [r3, #0]
 800f4b0:	6962      	ldr	r2, [r4, #20]
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d004      	beq.n	800f4c2 <__swbuf_r+0x6e>
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	07db      	lsls	r3, r3, #31
 800f4bc:	d5e1      	bpl.n	800f482 <__swbuf_r+0x2e>
 800f4be:	2e0a      	cmp	r6, #10
 800f4c0:	d1df      	bne.n	800f482 <__swbuf_r+0x2e>
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f7ff ff69 	bl	800f39c <_fflush_r>
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d0d9      	beq.n	800f482 <__swbuf_r+0x2e>
 800f4ce:	e7d6      	b.n	800f47e <__swbuf_r+0x2a>

0800f4d0 <__swsetup_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4b29      	ldr	r3, [pc, #164]	@ (800f578 <__swsetup_r+0xa8>)
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	6818      	ldr	r0, [r3, #0]
 800f4d8:	460c      	mov	r4, r1
 800f4da:	b118      	cbz	r0, 800f4e4 <__swsetup_r+0x14>
 800f4dc:	6a03      	ldr	r3, [r0, #32]
 800f4de:	b90b      	cbnz	r3, 800f4e4 <__swsetup_r+0x14>
 800f4e0:	f7fe fa4a 	bl	800d978 <__sinit>
 800f4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4e8:	0719      	lsls	r1, r3, #28
 800f4ea:	d422      	bmi.n	800f532 <__swsetup_r+0x62>
 800f4ec:	06da      	lsls	r2, r3, #27
 800f4ee:	d407      	bmi.n	800f500 <__swsetup_r+0x30>
 800f4f0:	2209      	movs	r2, #9
 800f4f2:	602a      	str	r2, [r5, #0]
 800f4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4f8:	81a3      	strh	r3, [r4, #12]
 800f4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fe:	e033      	b.n	800f568 <__swsetup_r+0x98>
 800f500:	0758      	lsls	r0, r3, #29
 800f502:	d512      	bpl.n	800f52a <__swsetup_r+0x5a>
 800f504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f506:	b141      	cbz	r1, 800f51a <__swsetup_r+0x4a>
 800f508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f50c:	4299      	cmp	r1, r3
 800f50e:	d002      	beq.n	800f516 <__swsetup_r+0x46>
 800f510:	4628      	mov	r0, r5
 800f512:	f7ff f9b1 	bl	800e878 <_free_r>
 800f516:	2300      	movs	r3, #0
 800f518:	6363      	str	r3, [r4, #52]	@ 0x34
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f520:	81a3      	strh	r3, [r4, #12]
 800f522:	2300      	movs	r3, #0
 800f524:	6063      	str	r3, [r4, #4]
 800f526:	6923      	ldr	r3, [r4, #16]
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	89a3      	ldrh	r3, [r4, #12]
 800f52c:	f043 0308 	orr.w	r3, r3, #8
 800f530:	81a3      	strh	r3, [r4, #12]
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	b94b      	cbnz	r3, 800f54a <__swsetup_r+0x7a>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f540:	d003      	beq.n	800f54a <__swsetup_r+0x7a>
 800f542:	4621      	mov	r1, r4
 800f544:	4628      	mov	r0, r5
 800f546:	f000 f8a3 	bl	800f690 <__smakebuf_r>
 800f54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f54e:	f013 0201 	ands.w	r2, r3, #1
 800f552:	d00a      	beq.n	800f56a <__swsetup_r+0x9a>
 800f554:	2200      	movs	r2, #0
 800f556:	60a2      	str	r2, [r4, #8]
 800f558:	6962      	ldr	r2, [r4, #20]
 800f55a:	4252      	negs	r2, r2
 800f55c:	61a2      	str	r2, [r4, #24]
 800f55e:	6922      	ldr	r2, [r4, #16]
 800f560:	b942      	cbnz	r2, 800f574 <__swsetup_r+0xa4>
 800f562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f566:	d1c5      	bne.n	800f4f4 <__swsetup_r+0x24>
 800f568:	bd38      	pop	{r3, r4, r5, pc}
 800f56a:	0799      	lsls	r1, r3, #30
 800f56c:	bf58      	it	pl
 800f56e:	6962      	ldrpl	r2, [r4, #20]
 800f570:	60a2      	str	r2, [r4, #8]
 800f572:	e7f4      	b.n	800f55e <__swsetup_r+0x8e>
 800f574:	2000      	movs	r0, #0
 800f576:	e7f7      	b.n	800f568 <__swsetup_r+0x98>
 800f578:	20000038 	.word	0x20000038

0800f57c <__assert_func>:
 800f57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f57e:	4614      	mov	r4, r2
 800f580:	461a      	mov	r2, r3
 800f582:	4b09      	ldr	r3, [pc, #36]	@ (800f5a8 <__assert_func+0x2c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4605      	mov	r5, r0
 800f588:	68d8      	ldr	r0, [r3, #12]
 800f58a:	b954      	cbnz	r4, 800f5a2 <__assert_func+0x26>
 800f58c:	4b07      	ldr	r3, [pc, #28]	@ (800f5ac <__assert_func+0x30>)
 800f58e:	461c      	mov	r4, r3
 800f590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f594:	9100      	str	r1, [sp, #0]
 800f596:	462b      	mov	r3, r5
 800f598:	4905      	ldr	r1, [pc, #20]	@ (800f5b0 <__assert_func+0x34>)
 800f59a:	f000 f841 	bl	800f620 <fiprintf>
 800f59e:	f000 f8d5 	bl	800f74c <abort>
 800f5a2:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <__assert_func+0x38>)
 800f5a4:	e7f4      	b.n	800f590 <__assert_func+0x14>
 800f5a6:	bf00      	nop
 800f5a8:	20000038 	.word	0x20000038
 800f5ac:	08014f6e 	.word	0x08014f6e
 800f5b0:	08014f40 	.word	0x08014f40
 800f5b4:	08014f33 	.word	0x08014f33

0800f5b8 <_calloc_r>:
 800f5b8:	b570      	push	{r4, r5, r6, lr}
 800f5ba:	fba1 5402 	umull	r5, r4, r1, r2
 800f5be:	b93c      	cbnz	r4, 800f5d0 <_calloc_r+0x18>
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	f7fd fc69 	bl	800ce98 <_malloc_r>
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	b928      	cbnz	r0, 800f5d6 <_calloc_r+0x1e>
 800f5ca:	2600      	movs	r6, #0
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	bd70      	pop	{r4, r5, r6, pc}
 800f5d0:	220c      	movs	r2, #12
 800f5d2:	6002      	str	r2, [r0, #0]
 800f5d4:	e7f9      	b.n	800f5ca <_calloc_r+0x12>
 800f5d6:	462a      	mov	r2, r5
 800f5d8:	4621      	mov	r1, r4
 800f5da:	f7fe fa60 	bl	800da9e <memset>
 800f5de:	e7f5      	b.n	800f5cc <_calloc_r+0x14>

0800f5e0 <__ascii_mbtowc>:
 800f5e0:	b082      	sub	sp, #8
 800f5e2:	b901      	cbnz	r1, 800f5e6 <__ascii_mbtowc+0x6>
 800f5e4:	a901      	add	r1, sp, #4
 800f5e6:	b142      	cbz	r2, 800f5fa <__ascii_mbtowc+0x1a>
 800f5e8:	b14b      	cbz	r3, 800f5fe <__ascii_mbtowc+0x1e>
 800f5ea:	7813      	ldrb	r3, [r2, #0]
 800f5ec:	600b      	str	r3, [r1, #0]
 800f5ee:	7812      	ldrb	r2, [r2, #0]
 800f5f0:	1e10      	subs	r0, r2, #0
 800f5f2:	bf18      	it	ne
 800f5f4:	2001      	movne	r0, #1
 800f5f6:	b002      	add	sp, #8
 800f5f8:	4770      	bx	lr
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	e7fb      	b.n	800f5f6 <__ascii_mbtowc+0x16>
 800f5fe:	f06f 0001 	mvn.w	r0, #1
 800f602:	e7f8      	b.n	800f5f6 <__ascii_mbtowc+0x16>

0800f604 <__ascii_wctomb>:
 800f604:	4603      	mov	r3, r0
 800f606:	4608      	mov	r0, r1
 800f608:	b141      	cbz	r1, 800f61c <__ascii_wctomb+0x18>
 800f60a:	2aff      	cmp	r2, #255	@ 0xff
 800f60c:	d904      	bls.n	800f618 <__ascii_wctomb+0x14>
 800f60e:	228a      	movs	r2, #138	@ 0x8a
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	f04f 30ff 	mov.w	r0, #4294967295
 800f616:	4770      	bx	lr
 800f618:	700a      	strb	r2, [r1, #0]
 800f61a:	2001      	movs	r0, #1
 800f61c:	4770      	bx	lr
	...

0800f620 <fiprintf>:
 800f620:	b40e      	push	{r1, r2, r3}
 800f622:	b503      	push	{r0, r1, lr}
 800f624:	4601      	mov	r1, r0
 800f626:	ab03      	add	r3, sp, #12
 800f628:	4805      	ldr	r0, [pc, #20]	@ (800f640 <fiprintf+0x20>)
 800f62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f62e:	6800      	ldr	r0, [r0, #0]
 800f630:	9301      	str	r3, [sp, #4]
 800f632:	f7ff fd17 	bl	800f064 <_vfiprintf_r>
 800f636:	b002      	add	sp, #8
 800f638:	f85d eb04 	ldr.w	lr, [sp], #4
 800f63c:	b003      	add	sp, #12
 800f63e:	4770      	bx	lr
 800f640:	20000038 	.word	0x20000038

0800f644 <__swhatbuf_r>:
 800f644:	b570      	push	{r4, r5, r6, lr}
 800f646:	460c      	mov	r4, r1
 800f648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f64c:	2900      	cmp	r1, #0
 800f64e:	b096      	sub	sp, #88	@ 0x58
 800f650:	4615      	mov	r5, r2
 800f652:	461e      	mov	r6, r3
 800f654:	da0d      	bge.n	800f672 <__swhatbuf_r+0x2e>
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f65c:	f04f 0100 	mov.w	r1, #0
 800f660:	bf14      	ite	ne
 800f662:	2340      	movne	r3, #64	@ 0x40
 800f664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f668:	2000      	movs	r0, #0
 800f66a:	6031      	str	r1, [r6, #0]
 800f66c:	602b      	str	r3, [r5, #0]
 800f66e:	b016      	add	sp, #88	@ 0x58
 800f670:	bd70      	pop	{r4, r5, r6, pc}
 800f672:	466a      	mov	r2, sp
 800f674:	f000 f848 	bl	800f708 <_fstat_r>
 800f678:	2800      	cmp	r0, #0
 800f67a:	dbec      	blt.n	800f656 <__swhatbuf_r+0x12>
 800f67c:	9901      	ldr	r1, [sp, #4]
 800f67e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f686:	4259      	negs	r1, r3
 800f688:	4159      	adcs	r1, r3
 800f68a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f68e:	e7eb      	b.n	800f668 <__swhatbuf_r+0x24>

0800f690 <__smakebuf_r>:
 800f690:	898b      	ldrh	r3, [r1, #12]
 800f692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f694:	079d      	lsls	r5, r3, #30
 800f696:	4606      	mov	r6, r0
 800f698:	460c      	mov	r4, r1
 800f69a:	d507      	bpl.n	800f6ac <__smakebuf_r+0x1c>
 800f69c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	6123      	str	r3, [r4, #16]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	6163      	str	r3, [r4, #20]
 800f6a8:	b003      	add	sp, #12
 800f6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ac:	ab01      	add	r3, sp, #4
 800f6ae:	466a      	mov	r2, sp
 800f6b0:	f7ff ffc8 	bl	800f644 <__swhatbuf_r>
 800f6b4:	9f00      	ldr	r7, [sp, #0]
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	4639      	mov	r1, r7
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f7fd fbec 	bl	800ce98 <_malloc_r>
 800f6c0:	b948      	cbnz	r0, 800f6d6 <__smakebuf_r+0x46>
 800f6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c6:	059a      	lsls	r2, r3, #22
 800f6c8:	d4ee      	bmi.n	800f6a8 <__smakebuf_r+0x18>
 800f6ca:	f023 0303 	bic.w	r3, r3, #3
 800f6ce:	f043 0302 	orr.w	r3, r3, #2
 800f6d2:	81a3      	strh	r3, [r4, #12]
 800f6d4:	e7e2      	b.n	800f69c <__smakebuf_r+0xc>
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	6020      	str	r0, [r4, #0]
 800f6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6de:	81a3      	strh	r3, [r4, #12]
 800f6e0:	9b01      	ldr	r3, [sp, #4]
 800f6e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f6e6:	b15b      	cbz	r3, 800f700 <__smakebuf_r+0x70>
 800f6e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f000 f81d 	bl	800f72c <_isatty_r>
 800f6f2:	b128      	cbz	r0, 800f700 <__smakebuf_r+0x70>
 800f6f4:	89a3      	ldrh	r3, [r4, #12]
 800f6f6:	f023 0303 	bic.w	r3, r3, #3
 800f6fa:	f043 0301 	orr.w	r3, r3, #1
 800f6fe:	81a3      	strh	r3, [r4, #12]
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	431d      	orrs	r5, r3
 800f704:	81a5      	strh	r5, [r4, #12]
 800f706:	e7cf      	b.n	800f6a8 <__smakebuf_r+0x18>

0800f708 <_fstat_r>:
 800f708:	b538      	push	{r3, r4, r5, lr}
 800f70a:	4d07      	ldr	r5, [pc, #28]	@ (800f728 <_fstat_r+0x20>)
 800f70c:	2300      	movs	r3, #0
 800f70e:	4604      	mov	r4, r0
 800f710:	4608      	mov	r0, r1
 800f712:	4611      	mov	r1, r2
 800f714:	602b      	str	r3, [r5, #0]
 800f716:	f7f3 ffc0 	bl	800369a <_fstat>
 800f71a:	1c43      	adds	r3, r0, #1
 800f71c:	d102      	bne.n	800f724 <_fstat_r+0x1c>
 800f71e:	682b      	ldr	r3, [r5, #0]
 800f720:	b103      	cbz	r3, 800f724 <_fstat_r+0x1c>
 800f722:	6023      	str	r3, [r4, #0]
 800f724:	bd38      	pop	{r3, r4, r5, pc}
 800f726:	bf00      	nop
 800f728:	20000b38 	.word	0x20000b38

0800f72c <_isatty_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4d06      	ldr	r5, [pc, #24]	@ (800f748 <_isatty_r+0x1c>)
 800f730:	2300      	movs	r3, #0
 800f732:	4604      	mov	r4, r0
 800f734:	4608      	mov	r0, r1
 800f736:	602b      	str	r3, [r5, #0]
 800f738:	f7f3 ffbf 	bl	80036ba <_isatty>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d102      	bne.n	800f746 <_isatty_r+0x1a>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	b103      	cbz	r3, 800f746 <_isatty_r+0x1a>
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	20000b38 	.word	0x20000b38

0800f74c <abort>:
 800f74c:	b508      	push	{r3, lr}
 800f74e:	2006      	movs	r0, #6
 800f750:	f000 f82c 	bl	800f7ac <raise>
 800f754:	2001      	movs	r0, #1
 800f756:	f7f3 ff50 	bl	80035fa <_exit>

0800f75a <_raise_r>:
 800f75a:	291f      	cmp	r1, #31
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	4605      	mov	r5, r0
 800f760:	460c      	mov	r4, r1
 800f762:	d904      	bls.n	800f76e <_raise_r+0x14>
 800f764:	2316      	movs	r3, #22
 800f766:	6003      	str	r3, [r0, #0]
 800f768:	f04f 30ff 	mov.w	r0, #4294967295
 800f76c:	bd38      	pop	{r3, r4, r5, pc}
 800f76e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f770:	b112      	cbz	r2, 800f778 <_raise_r+0x1e>
 800f772:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f776:	b94b      	cbnz	r3, 800f78c <_raise_r+0x32>
 800f778:	4628      	mov	r0, r5
 800f77a:	f000 f831 	bl	800f7e0 <_getpid_r>
 800f77e:	4622      	mov	r2, r4
 800f780:	4601      	mov	r1, r0
 800f782:	4628      	mov	r0, r5
 800f784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f788:	f000 b818 	b.w	800f7bc <_kill_r>
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d00a      	beq.n	800f7a6 <_raise_r+0x4c>
 800f790:	1c59      	adds	r1, r3, #1
 800f792:	d103      	bne.n	800f79c <_raise_r+0x42>
 800f794:	2316      	movs	r3, #22
 800f796:	6003      	str	r3, [r0, #0]
 800f798:	2001      	movs	r0, #1
 800f79a:	e7e7      	b.n	800f76c <_raise_r+0x12>
 800f79c:	2100      	movs	r1, #0
 800f79e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	4798      	blx	r3
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	e7e0      	b.n	800f76c <_raise_r+0x12>
	...

0800f7ac <raise>:
 800f7ac:	4b02      	ldr	r3, [pc, #8]	@ (800f7b8 <raise+0xc>)
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	f7ff bfd2 	b.w	800f75a <_raise_r>
 800f7b6:	bf00      	nop
 800f7b8:	20000038 	.word	0x20000038

0800f7bc <_kill_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	@ (800f7dc <_kill_r+0x20>)
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4608      	mov	r0, r1
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	602b      	str	r3, [r5, #0]
 800f7ca:	f7f3 ff06 	bl	80035da <_kill>
 800f7ce:	1c43      	adds	r3, r0, #1
 800f7d0:	d102      	bne.n	800f7d8 <_kill_r+0x1c>
 800f7d2:	682b      	ldr	r3, [r5, #0]
 800f7d4:	b103      	cbz	r3, 800f7d8 <_kill_r+0x1c>
 800f7d6:	6023      	str	r3, [r4, #0]
 800f7d8:	bd38      	pop	{r3, r4, r5, pc}
 800f7da:	bf00      	nop
 800f7dc:	20000b38 	.word	0x20000b38

0800f7e0 <_getpid_r>:
 800f7e0:	f7f3 bef3 	b.w	80035ca <_getpid>

0800f7e4 <_init>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	bf00      	nop
 800f7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ea:	bc08      	pop	{r3}
 800f7ec:	469e      	mov	lr, r3
 800f7ee:	4770      	bx	lr

0800f7f0 <_fini>:
 800f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f2:	bf00      	nop
 800f7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7f6:	bc08      	pop	{r3}
 800f7f8:	469e      	mov	lr, r3
 800f7fa:	4770      	bx	lr

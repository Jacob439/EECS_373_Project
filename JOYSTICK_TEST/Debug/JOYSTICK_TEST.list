
JOYSTICK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094dc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009708  08009708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009710  08009710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009710  08009710  00019710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08009724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08009724  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eef4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003546  00000000  00000000  0003ef73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  000424c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168d  00000000  00000000  00044160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e2d3  00000000  00000000  000457ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227e2  00000000  00000000  00073ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124723  00000000  00000000  000962a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ccc  00000000  00000000  001ba9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001c2694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009680 	.word	0x08009680

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08009680 	.word	0x08009680

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <writeRegister>:
	uint8_t _deviceAddress;


	//Write a byte value to a spot in the Joystick
  int writeRegister(uint8_t reg, uint8_t val)
  {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	4603      	mov	r3, r0
 8000500:	460a      	mov	r2, r1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	4613      	mov	r3, r2
 8000506:	71bb      	strb	r3, [r7, #6]
	  uint8_t buf[10] = {reg, val};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	811a      	strh	r2, [r3, #8]
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	733b      	strb	r3, [r7, #12]
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	737b      	strb	r3, [r7, #13]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, JOYSTICK_ADDRESS, &buf[0], 2, 1000);
 800051c:	f107 020c 	add.w	r2, r7, #12
 8000520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2302      	movs	r3, #2
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <writeRegister+0x5c>)
 800052c:	f003 fbf0 	bl	8003d10 <HAL_I2C_Master_Transmit>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <writeRegister+0x60>)
 8000536:	701a      	strb	r2, [r3, #0]


    if (ret != 0)
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <writeRegister+0x60>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <writeRegister+0x4c>
    {
      //Serial.println("No write ack!");
      return (0); //Device failed to ack
 8000540:	2300      	movs	r3, #0
 8000542:	e003      	b.n	800054c <writeRegister+0x54>
    }

    HAL_Delay(30); // allow EPROM time to store value
 8000544:	201e      	movs	r0, #30
 8000546:	f001 ff33 	bl	80023b0 <HAL_Delay>

    return (1);
 800054a:	2301      	movs	r3, #1
  }
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000110 	.word	0x20000110
 8000558:	20000770 	.word	0x20000770

0800055c <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	811a      	strh	r2, [r3, #8]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8000584:	f107 0214 	add.w	r2, r7, #20
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <readRegister+0x78>)
 8000594:	f003 fbbc 	bl	8003d10 <HAL_I2C_Master_Transmit>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <readRegister+0x7c>)
 800059e:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <readRegister+0x78>)
 80005b0:	f003 fcc6 	bl	8003f40 <HAL_I2C_Master_Receive>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <readRegister+0x7c>)
 80005ba:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <readRegister+0x7c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80005c4:	2300      	movs	r3, #0
 80005c6:	e000      	b.n	80005ca <readRegister+0x6e>
    }
    return buf0[0];
 80005c8:	7a3b      	ldrb	r3, [r7, #8]
  }
 80005ca:	4618      	mov	r0, r3
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000110 	.word	0x20000110
 80005d8:	20000770 	.word	0x20000770

080005dc <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80005e2:	2003      	movs	r0, #3
 80005e4:	f7ff ffba 	bl	800055c <readRegister>
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80005ec:	2004      	movs	r0, #4
 80005ee:	f7ff ffb5 	bl	800055c <readRegister>
 80005f2:	4603      	mov	r3, r0
 80005f4:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	021a      	lsls	r2, r3, #8
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	119b      	asrs	r3, r3, #6
 8000600:	b29b      	uxth	r3, r3
  }
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 8000610:	2005      	movs	r0, #5
 8000612:	f7ff ffa3 	bl	800055c <readRegister>
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 800061a:	2006      	movs	r0, #6
 800061c:	f7ff ff9e 	bl	800055c <readRegister>
 8000620:	4603      	mov	r3, r0
 8000622:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6;
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	021a      	lsls	r2, r3, #8
 8000628:	88bb      	ldrh	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	119b      	asrs	r3, r3, #6
 800062e:	b29b      	uxth	r3, r3
  }
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <getButton>:
  //Returns 0 button is currently being pressed
  uint8_t getButton()
  {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	  uint8_t button = readRegister(JOYSTICK_BUTTON);
 800063e:	2007      	movs	r0, #7
 8000640:	f7ff ff8c 	bl	800055c <readRegister>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
    //boolean pressed = status & (1<<statusButtonPressedBit);

    return(button);
 8000648:	79fb      	ldrb	r3, [r7, #7]
  }
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <checkButton>:

  //Returns 1 if button was pressed between reads of .getButton() or .checkButton()
  //the register is then cleared after read.
  //The joystick has a register where it saves if a button was pressed after the getbutton or checkbutton function was used
  uint8_t checkButton()
  {
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
	  uint8_t status = readRegister(JOYSTICK_STATUS);
 8000658:	2008      	movs	r0, #8
 800065a:	f7ff ff7f 	bl	800055c <readRegister>
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

    writeRegister(JOYSTICK_STATUS, 0x00); //We've read this status bit, now clear it
 8000662:	2100      	movs	r1, #0
 8000664:	2008      	movs	r0, #8
 8000666:	f7ff ff47 	bl	80004f8 <writeRegister>

    return(status);
 800066a:	79fb      	ldrb	r3, [r7, #7]
  }
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f001 fe24 	bl	80022c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f83b 	bl	80006f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000682:	f000 f89b 	bl	80007bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 ff31 	bl	80014ec <MX_GPIO_Init>
  MX_ADC1_Init();
 800068a:	f000 f8cb 	bl	8000824 <MX_ADC1_Init>
  MX_CAN1_Init();
 800068e:	f000 f92d 	bl	80008ec <MX_CAN1_Init>
  MX_COMP1_Init();
 8000692:	f000 f95f 	bl	8000954 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000696:	f000 f98b 	bl	80009b0 <MX_COMP2_Init>
  MX_I2C2_SMBUS_Init();
 800069a:	f000 f9f5 	bl	8000a88 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800069e:	f000 fa35 	bl	8000b0c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 fa81 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 facd 	bl	8000c44 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80006aa:	f000 fb17 	bl	8000cdc <MX_SAI1_Init>
  MX_SAI2_Init();
 80006ae:	f000 fbad 	bl	8000e0c <MX_SAI2_Init>
  MX_SPI1_Init();
 80006b2:	f000 fc13 	bl	8000edc <MX_SPI1_Init>
  MX_SPI3_Init();
 80006b6:	f000 fc4f 	bl	8000f58 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006ba:	f000 fc8b 	bl	8000fd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006be:	f000 fd59 	bl	8001174 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006c2:	f000 fdbb 	bl	800123c <MX_TIM3_Init>
  MX_TIM4_Init();
 80006c6:	f000 fe1f 	bl	8001308 <MX_TIM4_Init>
  MX_TIM15_Init();
 80006ca:	f000 fe83 	bl	80013d4 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80006ce:	f000 ff05 	bl	80014dc <MX_USB_OTG_FS_USB_Init>
  MX_I2C1_Init();
 80006d2:	f000 f999 	bl	8000a08 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint16_t xval = getHorizontal();
 80006d6:	f7ff ff81 	bl	80005dc <getHorizontal>
 80006da:	4603      	mov	r3, r0
 80006dc:	80fb      	strh	r3, [r7, #6]
	  uint16_t yval = getVertical();
 80006de:	f7ff ff94 	bl	800060a <getVertical>
 80006e2:	4603      	mov	r3, r0
 80006e4:	80bb      	strh	r3, [r7, #4]
	  uint8_t buttonval = getButton();
 80006e6:	f7ff ffa7 	bl	8000638 <getButton>
 80006ea:	4603      	mov	r3, r0
 80006ec:	70fb      	strb	r3, [r7, #3]
	  uint8_t buttoncheck = checkButton();
 80006ee:	f7ff ffb0 	bl	8000652 <checkButton>
 80006f2:	4603      	mov	r3, r0
 80006f4:	70bb      	strb	r3, [r7, #2]
  {
 80006f6:	e7ee      	b.n	80006d6 <main+0x62>

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b096      	sub	sp, #88	; 0x58
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2244      	movs	r2, #68	; 0x44
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f008 ff8e 	bl	8009628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071e:	f004 f85f 	bl	80047e0 <HAL_PWREx_ControlVoltageScaling>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000728:	f000 ff98 	bl	800165c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f004 f828 	bl	8004780 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <SystemClock_Config+0xc0>)
 8000732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <SystemClock_Config+0xc0>)
 8000738:	f023 0318 	bic.w	r3, r3, #24
 800073c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000740:	2314      	movs	r3, #20
 8000742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f004 f8e7 	bl	8004948 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000780:	f000 ff6c 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fced 	bl	800517c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a8:	f000 ff58 	bl	800165c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007ac:	f006 f9f6 	bl	8006b9c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007b0:	bf00      	nop
 80007b2:	3758      	adds	r7, #88	; 0x58
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0a6      	sub	sp, #152	; 0x98
 80007c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2294      	movs	r2, #148	; 0x94
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 ff2d 	bl	8009628 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80007ce:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80007d8:	2300      	movs	r3, #0
 80007da:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <PeriphCommonClock_Config+0x64>)
 8000804:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f004 ff75 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000814:	f000 ff22 	bl	800165c <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3798      	adds	r7, #152	; 0x98
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	01110000 	.word	0x01110000

08000824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <MX_ADC1_Init+0xc0>)
 800083e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800085a:	2204      	movs	r2, #4
 800085c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000860:	2200      	movs	r2, #0
 8000862:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000866:	2200      	movs	r2, #0
 8000868:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800086c:	2201      	movs	r2, #1
 800086e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_ADC1_Init+0xbc>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_ADC1_Init+0xbc>)
 800089c:	f001 ff4c 	bl	8002738 <HAL_ADC_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008a6:	f000 fed9 	bl	800165c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_ADC1_Init+0xc4>)
 80008ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ae:	2306      	movs	r3, #6
 80008b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b6:	237f      	movs	r3, #127	; 0x7f
 80008b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_ADC1_Init+0xbc>)
 80008c8:	f002 f87c 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008d2:	f000 fec3 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000028 	.word	0x20000028
 80008e4:	50040000 	.word	0x50040000
 80008e8:	04300002 	.word	0x04300002

080008ec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_CAN1_Init+0x60>)
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <MX_CAN1_Init+0x64>)
 80008f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_CAN1_Init+0x60>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_CAN1_Init+0x60>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_CAN1_Init+0x60>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_CAN1_Init+0x60>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_CAN1_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_CAN1_Init+0x60>)
 8000916:	2200      	movs	r2, #0
 8000918:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_CAN1_Init+0x60>)
 800091c:	2200      	movs	r2, #0
 800091e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_CAN1_Init+0x60>)
 8000922:	2200      	movs	r2, #0
 8000924:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_CAN1_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_CAN1_Init+0x60>)
 800092e:	2200      	movs	r2, #0
 8000930:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_CAN1_Init+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_CAN1_Init+0x60>)
 800093a:	f002 fc3f 	bl	80031bc <HAL_CAN_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 fe8a 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000090 	.word	0x20000090
 8000950:	40006400 	.word	0x40006400

08000954 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_COMP1_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_COMP1_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_COMP1_Init+0x50>)
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_COMP1_Init+0x58>)
 8000962:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_COMP1_Init+0x50>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_COMP1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_COMP1_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_COMP1_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_COMP1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_COMP1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_COMP1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_COMP1_Init+0x50>)
 8000990:	f002 fdb8 	bl	8003504 <HAL_COMP_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 800099a:	f000 fe5f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000b8 	.word	0x200000b8
 80009a8:	40010200 	.word	0x40010200
 80009ac:	00800030 	.word	0x00800030

080009b0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <MX_COMP2_Init+0x54>)
 80009b8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009bc:	2270      	movs	r2, #112	; 0x70
 80009be:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_COMP2_Init+0x50>)
 80009ec:	f002 fd8a 	bl	8003504 <HAL_COMP_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 fe31 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000e4 	.word	0x200000e4
 8000a04:	40010204 	.word	0x40010204

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_I2C1_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a44:	f003 f8c8 	bl	8003bd8 <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 fe05 	bl	800165c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a56:	f003 fdfb 	bl	8004650 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 fdfc 	bl	800165c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_I2C1_Init+0x74>)
 8000a68:	f003 fe3d 	bl	80046e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 fdf3 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000110 	.word	0x20000110
 8000a80:	40005400 	.word	0x40005400
 8000a84:	00707cbb 	.word	0x00707cbb

08000a88 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <MX_I2C2_SMBUS_Init+0x7c>)
 8000a90:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000a94:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_I2C2_SMBUS_Init+0x80>)
 8000a96:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000ad6:	f248 1286 	movw	r2, #33158	; 0x8186
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000ade:	f006 fee5 	bl	80078ac <HAL_SMBUS_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000ae8:	f000 fdb8 	bl	800165c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C2_SMBUS_Init+0x78>)
 8000aee:	f006 ff95 	bl	8007a1c <HAL_SMBUS_EnableAlert_IT>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000af8:	f000 fdb0 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000164 	.word	0x20000164
 8000b04:	40005800 	.word	0x40005800
 8000b08:	00707cbb 	.word	0x00707cbb

08000b0c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <MX_LPUART1_UART_Init+0x94>)
 8000b14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b18:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <MX_LPUART1_UART_Init+0x98>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b56:	f007 feff 	bl	8008958 <HAL_UART_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 fd7c 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b68:	f008 fc94 	bl	8009494 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b72:	f000 fd73 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b7a:	f008 fcc9 	bl	8009510 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 fd6a 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_LPUART1_UART_Init+0x90>)
 8000b8a:	f008 fc4a 	bl	8009422 <HAL_UARTEx_DisableFifoMode>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 fd62 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200001b4 	.word	0x200001b4
 8000ba0:	40008000 	.word	0x40008000
 8000ba4:	00033324 	.word	0x00033324

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bae:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <MX_USART2_UART_Init+0x98>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bd4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bd8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bf4:	f007 feb0 	bl	8008958 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000bfe:	f000 fd2d 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000c06:	f008 fc45 	bl	8009494 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c10:	f000 fd24 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000c18:	f008 fc7a 	bl	8009510 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c22:	f000 fd1b 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x94>)
 8000c28:	f008 fbfb 	bl	8009422 <HAL_UARTEx_DisableFifoMode>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c32:	f000 fd13 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000248 	.word	0x20000248
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <MX_USART3_UART_Init+0x94>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8c:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f007 fe63 	bl	8008958 <HAL_UART_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 fce0 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000ca0:	f008 fbf8 	bl	8009494 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000caa:	f000 fcd7 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000cb2:	f008 fc2d 	bl	8009510 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 fcce 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000cc2:	f008 fbae 	bl	8009422 <HAL_UARTEx_DisableFifoMode>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 fcc6 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200002dc 	.word	0x200002dc
 8000cd8:	40004800 	.word	0x40004800

08000cdc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ce0:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000ce2:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <MX_SAI1_Init+0x120>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ce6:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cec:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000cf4:	2240      	movs	r2, #64	; 0x40
 8000cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cf8:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d10:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d22:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d24:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <MX_SAI1_Init+0x124>)
 8000d26:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000d8c:	481a      	ldr	r0, [pc, #104]	; (8000df8 <MX_SAI1_Init+0x11c>)
 8000d8e:	f006 fa41 	bl	8007214 <HAL_SAI_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000d98:	f000 fc60 	bl	800165c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <MX_SAI1_Init+0x12c>)
 8000da0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <MX_SAI1_Init+0x124>)
 8000dc4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dde:	2302      	movs	r3, #2
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <MX_SAI1_Init+0x128>)
 8000de6:	f006 f9e3 	bl	80071b0 <HAL_SAI_InitProtocol>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000df0:	f000 fc34 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000370 	.word	0x20000370
 8000dfc:	40015424 	.word	0x40015424
 8000e00:	0002ee00 	.word	0x0002ee00
 8000e04:	20000404 	.word	0x20000404
 8000e08:	40015404 	.word	0x40015404

08000e0c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e12:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <MX_SAI2_Init+0xc8>)
 8000e14:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <MX_SAI2_Init+0xcc>)
 8000e56:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_SAI2_Init+0xc4>)
 8000ebe:	f006 f9a9 	bl	8007214 <HAL_SAI_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000ec8:	f000 fbc8 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000498 	.word	0x20000498
 8000ed4:	40015804 	.word	0x40015804
 8000ed8:	0002ee00 	.word	0x0002ee00

08000edc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_SPI1_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ef6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000efa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f3c:	f006 fdc1 	bl	8007ac2 <HAL_SPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 fb89 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000052c 	.word	0x2000052c
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <MX_SPI3_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_SPI3_Init+0x74>)
 8000fb8:	f006 fd83 	bl	8007ac2 <HAL_SPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f000 fb4b 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000590 	.word	0x20000590
 8000fd0:	40003c00 	.word	0x40003c00

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b098      	sub	sp, #96	; 0x60
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000fe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	222c      	movs	r2, #44	; 0x2c
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f008 fb0b 	bl	8009628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001012:	4b56      	ldr	r3, [pc, #344]	; (800116c <MX_TIM1_Init+0x198>)
 8001014:	4a56      	ldr	r2, [pc, #344]	; (8001170 <MX_TIM1_Init+0x19c>)
 8001016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001018:	4b54      	ldr	r3, [pc, #336]	; (800116c <MX_TIM1_Init+0x198>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <MX_TIM1_Init+0x198>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001024:	4b51      	ldr	r3, [pc, #324]	; (800116c <MX_TIM1_Init+0x198>)
 8001026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b4f      	ldr	r3, [pc, #316]	; (800116c <MX_TIM1_Init+0x198>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <MX_TIM1_Init+0x198>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <MX_TIM1_Init+0x198>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800103e:	484b      	ldr	r0, [pc, #300]	; (800116c <MX_TIM1_Init+0x198>)
 8001040:	f006 fde2 	bl	8007c08 <HAL_TIM_PWM_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800104a:	f000 fb07 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105e:	4619      	mov	r1, r3
 8001060:	4842      	ldr	r0, [pc, #264]	; (800116c <MX_TIM1_Init+0x198>)
 8001062:	f007 faad 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800106c:	f000 faf6 	bl	800165c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001070:	2301      	movs	r3, #1
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001074:	2301      	movs	r3, #1
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800107c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001080:	461a      	mov	r2, r3
 8001082:	2101      	movs	r1, #1
 8001084:	4839      	ldr	r0, [pc, #228]	; (800116c <MX_TIM1_Init+0x198>)
 8001086:	f007 fba1 	bl	80087cc <HAL_TIMEx_ConfigBreakInput>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001090:	f000 fae4 	bl	800165c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001094:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001098:	461a      	mov	r2, r3
 800109a:	2102      	movs	r1, #2
 800109c:	4833      	ldr	r0, [pc, #204]	; (800116c <MX_TIM1_Init+0x198>)
 800109e:	f007 fb95 	bl	80087cc <HAL_TIMEx_ConfigBreakInput>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80010a8:	f000 fad8 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4826      	ldr	r0, [pc, #152]	; (800116c <MX_TIM1_Init+0x198>)
 80010d2:	f006 fdf1 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80010dc:	f000 fabe 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	2204      	movs	r2, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4820      	ldr	r0, [pc, #128]	; (800116c <MX_TIM1_Init+0x198>)
 80010ea:	f006 fde5 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80010f4:	f000 fab2 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fc:	2208      	movs	r2, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	481a      	ldr	r0, [pc, #104]	; (800116c <MX_TIM1_Init+0x198>)
 8001102:	f006 fdd9 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800110c:	f000 faa6 	bl	800165c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001114:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001138:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800113a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800113e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM1_Init+0x198>)
 800114e:	f007 fabf 	bl	80086d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001158:	f000 fa80 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM1_Init+0x198>)
 800115e:	f000 fe89 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 8001162:	bf00      	nop
 8001164:	3760      	adds	r7, #96	; 0x60
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200005f4 	.word	0x200005f4
 8001170:	40012c00 	.word	0x40012c00

08001174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <MX_TIM2_Init+0xc4>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011ae:	f04f 32ff 	mov.w	r2, #4294967295
 80011b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011c2:	f006 fd21 	bl	8007c08 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011cc:	f000 fa46 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4816      	ldr	r0, [pc, #88]	; (8001238 <MX_TIM2_Init+0xc4>)
 80011e0:	f007 f9ee 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011ea:	f000 fa37 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ee:	2360      	movs	r3, #96	; 0x60
 80011f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_TIM2_Init+0xc4>)
 8001206:	f006 fd57 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001210:	f000 fa24 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2208      	movs	r2, #8
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <MX_TIM2_Init+0xc4>)
 800121c:	f006 fd4c 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001226:	f000 fa19 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <MX_TIM2_Init+0xc4>)
 800122c:	f000 fe22 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000640 	.word	0x20000640

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_TIM3_Init+0xc4>)
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <MX_TIM3_Init+0xc8>)
 8001264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_TIM3_Init+0xc4>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_TIM3_Init+0xc4>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_TIM3_Init+0xc4>)
 8001274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_TIM3_Init+0xc4>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_TIM3_Init+0xc4>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <MX_TIM3_Init+0xc4>)
 8001288:	f006 fcbe 	bl	8007c08 <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001292:	f000 f9e3 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM3_Init+0xc4>)
 80012a6:	f007 f98b 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012b0:	f000 f9d4 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	2204      	movs	r2, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM3_Init+0xc4>)
 80012cc:	f006 fcf4 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012d6:	f000 f9c1 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	2208      	movs	r2, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM3_Init+0xc4>)
 80012e2:	f006 fce9 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80012ec:	f000 f9b6 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM3_Init+0xc4>)
 80012f2:	f000 fdbf 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000068c 	.word	0x2000068c
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_TIM4_Init+0xc4>)
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_TIM4_Init+0xc8>)
 8001330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_TIM4_Init+0xc4>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_TIM4_Init+0xc4>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_TIM4_Init+0xc4>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_TIM4_Init+0xc4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_TIM4_Init+0xc4>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001352:	481e      	ldr	r0, [pc, #120]	; (80013cc <MX_TIM4_Init+0xc4>)
 8001354:	f006 fc58 	bl	8007c08 <HAL_TIM_PWM_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800135e:	f000 f97d 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_TIM4_Init+0xc4>)
 8001372:	f007 f925 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800137c:	f000 f96e 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001380:	2360      	movs	r3, #96	; 0x60
 8001382:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	2208      	movs	r2, #8
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_TIM4_Init+0xc4>)
 8001398:	f006 fc8e 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80013a2:	f000 f95b 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	220c      	movs	r2, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_TIM4_Init+0xc4>)
 80013ae:	f006 fc83 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80013b8:	f000 f950 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <MX_TIM4_Init+0xc4>)
 80013be:	f000 fd59 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200006d8 	.word	0x200006d8
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b096      	sub	sp, #88	; 0x58
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	222c      	movs	r2, #44	; 0x2c
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f008 f911 	bl	8009628 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <MX_TIM15_Init+0x104>)
 800140a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <MX_TIM15_Init+0x100>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_TIM15_Init+0x100>)
 800141a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_TIM15_Init+0x100>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001432:	4828      	ldr	r0, [pc, #160]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001434:	f006 fbe8 	bl	8007c08 <HAL_TIM_PWM_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800143e:	f000 f90d 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800144a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800144e:	4619      	mov	r1, r3
 8001450:	4820      	ldr	r0, [pc, #128]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001452:	f007 f8b5 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 f8fe 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001460:	2360      	movs	r3, #96	; 0x60
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_TIM15_Init+0x100>)
 8001486:	f006 fc17 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001490:	f000 f8e4 	bl	800165c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM15_Init+0x100>)
 80014b8:	f007 f90a 	bl	80086d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80014c2:	f000 f8cb 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014c6:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM15_Init+0x100>)
 80014c8:	f000 fcd4 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 80014cc:	bf00      	nop
 80014ce:	3758      	adds	r7, #88	; 0x58
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000724 	.word	0x20000724
 80014d8:	40014000 	.word	0x40014000

080014dc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4b53      	ldr	r3, [pc, #332]	; (8001650 <MX_GPIO_Init+0x164>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a52      	ldr	r2, [pc, #328]	; (8001650 <MX_GPIO_Init+0x164>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <MX_GPIO_Init+0x164>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	623b      	str	r3, [r7, #32]
 8001518:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <MX_GPIO_Init+0x164>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <MX_GPIO_Init+0x164>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <MX_GPIO_Init+0x164>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <MX_GPIO_Init+0x164>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a46      	ldr	r2, [pc, #280]	; (8001650 <MX_GPIO_Init+0x164>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b44      	ldr	r3, [pc, #272]	; (8001650 <MX_GPIO_Init+0x164>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <MX_GPIO_Init+0x164>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a40      	ldr	r2, [pc, #256]	; (8001650 <MX_GPIO_Init+0x164>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_GPIO_Init+0x164>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <MX_GPIO_Init+0x164>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <MX_GPIO_Init+0x164>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <MX_GPIO_Init+0x164>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <MX_GPIO_Init+0x164>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a34      	ldr	r2, [pc, #208]	; (8001650 <MX_GPIO_Init+0x164>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <MX_GPIO_Init+0x164>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001592:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <MX_GPIO_Init+0x164>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a2e      	ldr	r2, [pc, #184]	; (8001650 <MX_GPIO_Init+0x164>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <MX_GPIO_Init+0x164>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_GPIO_Init+0x164>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <MX_GPIO_Init+0x164>)
 80015b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_GPIO_Init+0x164>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80015c2:	f003 f9b1 	bl	8004928 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015d8:	230c      	movs	r3, #12
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481c      	ldr	r0, [pc, #112]	; (8001654 <MX_GPIO_Init+0x168>)
 80015e4:	f002 f966 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015fa:	230a      	movs	r3, #10
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f002 f954 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f002 f946 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001628:	2304      	movs	r3, #4
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001638:	230c      	movs	r3, #12
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_GPIO_Init+0x16c>)
 8001644:	f002 f936 	bl	80038b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001648:	bf00      	nop
 800164a:	3738      	adds	r7, #56	; 0x38
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	48000800 	.word	0x48000800
 8001658:	48000c00 	.word	0x48000c00

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_MspInit+0x44>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6613      	str	r3, [r2, #96]	; 0x60
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_MspInit+0x44>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x44>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6593      	str	r3, [r2, #88]	; 0x58
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x44>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <HAL_ADC_MspInit+0xd4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d154      	bne.n	800177c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a26      	ldr	r2, [pc, #152]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_ADC_MspInit+0xd8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001732:	233f      	movs	r3, #63	; 0x3f
 8001734:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001736:	230b      	movs	r3, #11
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <HAL_ADC_MspInit+0xdc>)
 8001746:	f002 f8b5 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800174a:	230a      	movs	r3, #10
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800174e:	230b      	movs	r3, #11
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f002 f8a8 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001768:	230b      	movs	r3, #11
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <HAL_ADC_MspInit+0xe0>)
 8001778:	f002 f89c 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	; 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	50040000 	.word	0x50040000
 8001788:	40021000 	.word	0x40021000
 800178c:	48000800 	.word	0x48000800
 8001790:	48000400 	.word	0x48000400

08001794 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_CAN_MspInit+0x7c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d127      	bne.n	8001806 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_CAN_MspInit+0x80>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_CAN_MspInit+0x80>)
 80017bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_CAN_MspInit+0x80>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_CAN_MspInit+0x80>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <HAL_CAN_MspInit+0x80>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_CAN_MspInit+0x80>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e6:	2303      	movs	r3, #3
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017f6:	2309      	movs	r3, #9
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <HAL_CAN_MspInit+0x84>)
 8001802:	f002 f857 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40006400 	.word	0x40006400
 8001814:	40021000 	.word	0x40021000
 8001818:	48000c00 	.word	0x48000c00

0800181c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_COMP_MspInit+0x98>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d118      	bne.n	8001870 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_COMP_MspInit+0x9c>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_COMP_MspInit+0x9c>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_COMP_MspInit+0x9c>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001856:	2304      	movs	r3, #4
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4814      	ldr	r0, [pc, #80]	; (80018bc <HAL_COMP_MspInit+0xa0>)
 800186a:	f002 f823 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800186e:	e01c      	b.n	80018aa <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_COMP_MspInit+0xa4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d117      	bne.n	80018aa <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_COMP_MspInit+0x9c>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_COMP_MspInit+0x9c>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_COMP_MspInit+0x9c>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_COMP_MspInit+0xa0>)
 80018a6:	f002 f805 	bl	80038b4 <HAL_GPIO_Init>
}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40010200 	.word	0x40010200
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	40010204 	.word	0x40010204

080018c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0ae      	sub	sp, #184	; 0xb8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2294      	movs	r2, #148	; 0x94
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f007 fe9f 	bl	8009628 <memset>
  if(hi2c->Instance==I2C1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_I2C_MspInit+0xb0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d13b      	bne.n	800196c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fef9 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800190c:	f7ff fea6 	bl	800165c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	4a18      	ldr	r2, [pc, #96]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001928:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001942:	2304      	movs	r3, #4
 8001944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_I2C_MspInit+0xb8>)
 8001950:	f001 ffb0 	bl	80038b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 800195a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_I2C_MspInit+0xb4>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800196c:	bf00      	nop
 800196e:	37b8      	adds	r7, #184	; 0xb8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400

08001980 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0ae      	sub	sp, #184	; 0xb8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2294      	movs	r2, #148	; 0x94
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f007 fe41 	bl	8009628 <memset>
  if(hsmbus->Instance==I2C2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_SMBUS_MspInit+0xb0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d13a      	bne.n	8001a26 <HAL_SMBUS_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fe9b 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fe48 	bl	800165c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_SMBUS_MspInit+0xb4>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_SMBUS_MspInit+0xb4>)
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_SMBUS_MspInit+0xb4>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019e4:	2307      	movs	r3, #7
 80019e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ea:	2312      	movs	r3, #18
 80019ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019fc:	2304      	movs	r3, #4
 80019fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a06:	4619      	mov	r1, r3
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <HAL_SMBUS_MspInit+0xb8>)
 8001a0a:	f001 ff53 	bl	80038b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_SMBUS_MspInit+0xb4>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_SMBUS_MspInit+0xb4>)
 8001a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_SMBUS_MspInit+0xb4>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	37b8      	adds	r7, #184	; 0xb8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005800 	.word	0x40005800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48001400 	.word	0x48001400

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0b2      	sub	sp, #200	; 0xc8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	2294      	movs	r2, #148	; 0x94
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 fde3 	bl	8009628 <memset>
  if(huart->Instance==LPUART1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a64      	ldr	r2, [pc, #400]	; (8001bf8 <HAL_UART_MspInit+0x1bc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d13e      	bne.n	8001aea <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fe3d 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a84:	f7ff fdea 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a88:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	4a5b      	ldr	r2, [pc, #364]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa0:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	4a55      	ldr	r2, [pc, #340]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001ab8:	f002 ff36 	bl	8004928 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001abc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001adc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4847      	ldr	r0, [pc, #284]	; (8001c00 <HAL_UART_MspInit+0x1c4>)
 8001ae4:	f001 fee6 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae8:	e081      	b.n	8001bee <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a45      	ldr	r2, [pc, #276]	; (8001c04 <HAL_UART_MspInit+0x1c8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d13b      	bne.n	8001b6c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fdf9 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b0c:	f7ff fda6 	bl	800165c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b10:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1c:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b40:	2378      	movs	r3, #120	; 0x78
 8001b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <HAL_UART_MspInit+0x1cc>)
 8001b66:	f001 fea5 	bl	80038b4 <HAL_GPIO_Init>
}
 8001b6a:	e040      	b.n	8001bee <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_UART_MspInit+0x1d0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d13b      	bne.n	8001bee <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b76:	2304      	movs	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fdb8 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001b8e:	f7ff fd65 	bl	800165c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_UART_MspInit+0x1c0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <HAL_UART_MspInit+0x1cc>)
 8001bea:	f001 fe63 	bl	80038b4 <HAL_GPIO_Init>
}
 8001bee:	bf00      	nop
 8001bf0:	37c8      	adds	r7, #200	; 0xc8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40008000 	.word	0x40008000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48001800 	.word	0x48001800
 8001c04:	40004400 	.word	0x40004400
 8001c08:	48000c00 	.word	0x48000c00
 8001c0c:	40004800 	.word	0x40004800

08001c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_SPI_MspInit+0xd8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d129      	bne.n	8001c86 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c62:	23f0      	movs	r3, #240	; 0xf0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c72:	2305      	movs	r3, #5
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f001 fe18 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c84:	e02c      	b.n	8001ce0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_SPI_MspInit+0xe0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d127      	bne.n	8001ce0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_SPI_MspInit+0xdc>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cc0:	2338      	movs	r3, #56	; 0x38
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <HAL_SPI_MspInit+0xe4>)
 8001cdc:	f001 fdea 	bl	80038b4 <HAL_GPIO_Init>
}
 8001ce0:	bf00      	nop
 8001ce2:	3730      	adds	r7, #48	; 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013000 	.word	0x40013000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40003c00 	.word	0x40003c00
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_TIM_PWM_MspInit+0x164>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d139      	bne.n	8001d8e <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d24:	6613      	str	r3, [r2, #96]	; 0x60
 8001d26:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d32:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	483f      	ldr	r0, [pc, #252]	; (8001e64 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d66:	f001 fda5 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	4837      	ldr	r0, [pc, #220]	; (8001e64 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d88:	f001 fd94 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d8c:	e062      	b.n	8001e54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d96:	d10c      	bne.n	8001db2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d98:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6593      	str	r3, [r2, #88]	; 0x58
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]
}
 8001db0:	e050      	b.n	8001e54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <HAL_TIM_PWM_MspInit+0x170>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10c      	bne.n	8001dd6 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
}
 8001dd4:	e03e      	b.n	8001e54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_TIM_PWM_MspInit+0x174>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d128      	bne.n	8001e32 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6593      	str	r3, [r2, #88]	; 0x58
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e10:	2301      	movs	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e20:	2302      	movs	r3, #2
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <HAL_TIM_PWM_MspInit+0x16c>)
 8001e2c:	f001 fd42 	bl	80038b4 <HAL_GPIO_Init>
}
 8001e30:	e010      	b.n	8001e54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_TIM_PWM_MspInit+0x178>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d10b      	bne.n	8001e54 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6613      	str	r3, [r2, #96]	; 0x60
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_TIM_PWM_MspInit+0x168>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
}
 8001e54:	bf00      	nop
 8001e56:	3738      	adds	r7, #56	; 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	48001000 	.word	0x48001000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40014000 	.word	0x40014000

08001e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a73      	ldr	r2, [pc, #460]	; (8002060 <HAL_TIM_MspPostInit+0x1ec>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d11d      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	4b73      	ldr	r3, [pc, #460]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a72      	ldr	r2, [pc, #456]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4b70      	ldr	r3, [pc, #448]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eae:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4867      	ldr	r0, [pc, #412]	; (8002068 <HAL_TIM_MspPostInit+0x1f4>)
 8001ecc:	f001 fcf2 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ed0:	e0c2      	b.n	8002058 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eda:	d13a      	bne.n	8001f52 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	4a60      	ldr	r2, [pc, #384]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	4a5a      	ldr	r2, [pc, #360]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2a:	f001 fcc3 	bl	80038b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f40:	2301      	movs	r3, #1
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4848      	ldr	r0, [pc, #288]	; (800206c <HAL_TIM_MspPostInit+0x1f8>)
 8001f4c:	f001 fcb2 	bl	80038b4 <HAL_GPIO_Init>
}
 8001f50:	e082      	b.n	8002058 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_TIM_MspPostInit+0x1fc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d138      	bne.n	8001fce <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	4a40      	ldr	r2, [pc, #256]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f68:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f80:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4831      	ldr	r0, [pc, #196]	; (800206c <HAL_TIM_MspPostInit+0x1f8>)
 8001fa8:	f001 fc84 	bl	80038b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	482b      	ldr	r0, [pc, #172]	; (8002074 <HAL_TIM_MspPostInit+0x200>)
 8001fc8:	f001 fc74 	bl	80038b4 <HAL_GPIO_Init>
}
 8001fcc:	e044      	b.n	8002058 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <HAL_TIM_MspPostInit+0x204>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d11d      	bne.n	8002014 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ff0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002002:	2302      	movs	r3, #2
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <HAL_TIM_MspPostInit+0x208>)
 800200e:	f001 fc51 	bl	80038b4 <HAL_GPIO_Init>
}
 8002012:	e021      	b.n	8002058 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_TIM_MspPostInit+0x20c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d11c      	bne.n	8002058 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_TIM_MspPostInit+0x1f0>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002048:	230e      	movs	r3, #14
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <HAL_TIM_MspPostInit+0x1f8>)
 8002054:	f001 fc2e 	bl	80038b4 <HAL_GPIO_Init>
}
 8002058:	bf00      	nop
 800205a:	3738      	adds	r7, #56	; 0x38
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40012c00 	.word	0x40012c00
 8002064:	40021000 	.word	0x40021000
 8002068:	48001000 	.word	0x48001000
 800206c:	48000400 	.word	0x48000400
 8002070:	40000400 	.word	0x40000400
 8002074:	48000800 	.word	0x48000800
 8002078:	40000800 	.word	0x40000800
 800207c:	48000c00 	.word	0x48000c00
 8002080:	40014000 	.word	0x40014000

08002084 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_SAI_MspInit+0x150>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d124      	bne.n	80020e0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002096:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_SAI_MspInit+0x154>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_SAI_MspInit+0x158>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_SAI_MspInit+0x158>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6613      	str	r3, [r2, #96]	; 0x60
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_SAI_MspInit+0x158>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_SAI_MspInit+0x154>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <HAL_SAI_MspInit+0x154>)
 80020be:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020c0:	2374      	movs	r3, #116	; 0x74
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80020d0:	230d      	movs	r3, #13
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4841      	ldr	r0, [pc, #260]	; (80021e0 <HAL_SAI_MspInit+0x15c>)
 80020dc:	f001 fbea 	bl	80038b4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3f      	ldr	r2, [pc, #252]	; (80021e4 <HAL_SAI_MspInit+0x160>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d135      	bne.n	8002156 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_SAI_MspInit+0x154>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10b      	bne.n	800210a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_SAI_MspInit+0x158>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	4a39      	ldr	r2, [pc, #228]	; (80021dc <HAL_SAI_MspInit+0x158>)
 80020f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fc:	6613      	str	r3, [r2, #96]	; 0x60
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <HAL_SAI_MspInit+0x158>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_SAI_MspInit+0x154>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a31      	ldr	r2, [pc, #196]	; (80021d8 <HAL_SAI_MspInit+0x154>)
 8002112:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002114:	2308      	movs	r3, #8
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002124:	230d      	movs	r3, #13
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	482c      	ldr	r0, [pc, #176]	; (80021e0 <HAL_SAI_MspInit+0x15c>)
 8002130:	f001 fbc0 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002134:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002146:	230d      	movs	r3, #13
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4825      	ldr	r0, [pc, #148]	; (80021e8 <HAL_SAI_MspInit+0x164>)
 8002152:	f001 fbaf 	bl	80038b4 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a24      	ldr	r2, [pc, #144]	; (80021ec <HAL_SAI_MspInit+0x168>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d135      	bne.n	80021cc <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_SAI_MspInit+0x16c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_SAI_MspInit+0x158>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <HAL_SAI_MspInit+0x158>)
 800216e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002172:	6613      	str	r3, [r2, #96]	; 0x60
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_SAI_MspInit+0x158>)
 8002176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_SAI_MspInit+0x16c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_SAI_MspInit+0x16c>)
 8002188:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800218a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800219c:	230d      	movs	r3, #13
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4813      	ldr	r0, [pc, #76]	; (80021f4 <HAL_SAI_MspInit+0x170>)
 80021a8:	f001 fb84 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80021bc:	230d      	movs	r3, #13
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	480c      	ldr	r0, [pc, #48]	; (80021f8 <HAL_SAI_MspInit+0x174>)
 80021c8:	f001 fb74 	bl	80038b4 <HAL_GPIO_Init>

    }
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40015404 	.word	0x40015404
 80021d8:	20000774 	.word	0x20000774
 80021dc:	40021000 	.word	0x40021000
 80021e0:	48001000 	.word	0x48001000
 80021e4:	40015424 	.word	0x40015424
 80021e8:	48001400 	.word	0x48001400
 80021ec:	40015804 	.word	0x40015804
 80021f0:	20000778 	.word	0x20000778
 80021f4:	48000400 	.word	0x48000400
 80021f8:	48000800 	.word	0x48000800

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002248:	f000 f892 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff ffea 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800227e:	490d      	ldr	r1, [pc, #52]	; (80022b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <LoopForever+0xe>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002294:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <LoopForever+0x16>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f007 f9c9 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a6:	f7fe f9e5 	bl	8000674 <main>

080022aa <LoopForever>:

LoopForever:
    b LoopForever
 80022aa:	e7fe      	b.n	80022aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022b8:	08009718 	.word	0x08009718
  ldr r2, =_sbss
 80022bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022c0:	20000780 	.word	0x20000780

080022c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_IRQHandler>

080022c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f001 fabb 	bl	800384c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 f80e 	bl	80022f8 <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	e001      	b.n	80022ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e8:	f7ff f9be 	bl	8001668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_InitTick+0x6c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_InitTick+0x70>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_InitTick+0x6c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	fbb3 f3f1 	udiv	r3, r3, r1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fab9 	bl	800389a <HAL_SYSTICK_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d809      	bhi.n	8002348 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f001 fa91 	bl	8003862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_InitTick+0x74>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e007      	b.n	8002358 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e004      	b.n	8002358 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	e001      	b.n	8002358 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	2000077c 	.word	0x2000077c

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	2000077c 	.word	0x2000077c

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008

080023f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3360      	adds	r3, #96	; 0x60
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <LL_ADC_SetOffset+0x44>)
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	4313      	orrs	r3, r2
 8002490:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	03fff000 	.word	0x03fff000

080024a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3360      	adds	r3, #96	; 0x60
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3360      	adds	r3, #96	; 0x60
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	615a      	str	r2, [r3, #20]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	211f      	movs	r1, #31
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	f003 011f 	and.w	r1, r3, #31
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3314      	adds	r3, #20
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	0e5b      	lsrs	r3, r3, #25
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	0d1b      	lsrs	r3, r3, #20
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2107      	movs	r1, #7
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	401a      	ands	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0d1b      	lsrs	r3, r3, #20
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0318 	and.w	r3, r3, #24
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002604:	40d9      	lsrs	r1, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	400b      	ands	r3, r1
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	0007ffff 	.word	0x0007ffff

08002628 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6093      	str	r3, [r2, #8]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002660:	d101      	bne.n	8002666 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002688:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b0:	d101      	bne.n	80026b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <LL_ADC_IsEnabled+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_IsEnabled+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d101      	bne.n	8002702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b08      	cmp	r3, #8
 8002722:	d101      	bne.n	8002728 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e129      	b.n	80029a6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fe ffa5 	bl	80016b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff67 	bl	800264c <LL_ADC_IsDeepPowerDownEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff4d 	bl	8002628 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff82 	bl	800269c <LL_ADC_IsInternalRegulatorEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d115      	bne.n	80027ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff66 	bl	8002674 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b81      	ldr	r3, [pc, #516]	; (80029b0 <HAL_ADC_Init+0x278>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a81      	ldr	r2, [pc, #516]	; (80029b4 <HAL_ADC_Init+0x27c>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff64 	bl	800269c <LL_ADC_IsInternalRegulatorEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff75 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002800:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 80c2 	bne.w	8002994 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80be 	bne.w	8002994 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002820:	f043 0202 	orr.w	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff49 	bl	80026c4 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002838:	485f      	ldr	r0, [pc, #380]	; (80029b8 <HAL_ADC_Init+0x280>)
 800283a:	f7ff ff43 	bl	80026c4 <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	485c      	ldr	r0, [pc, #368]	; (80029bc <HAL_ADC_Init+0x284>)
 800284c:	f7ff fdd4 	bl	80023f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e5b      	ldrb	r3, [r3, #25]
 8002854:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002860:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002866:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d106      	bne.n	800288c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	3b01      	subs	r3, #1
 8002884:	045b      	lsls	r3, r3, #17
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_ADC_Init+0x288>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff25 	bl	8002710 <LL_ADC_INJ_IsConversionOngoing>
 80028c6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d140      	bne.n	8002950 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d13d      	bne.n	8002950 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7e1b      	ldrb	r3, [r3, #24]
 80028dc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028de:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f6:	f023 0306 	bic.w	r3, r3, #6
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	430b      	orrs	r3, r1
 8002902:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800290a:	2b01      	cmp	r3, #1
 800290c:	d118      	bne.n	8002940 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002930:	430a      	orrs	r2, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	e007      	b.n	8002950 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f023 010f 	bic.w	r1, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
 8002970:	e007      	b.n	8002982 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 020f 	bic.w	r2, r2, #15
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	; 0x58
 8002992:	e007      	b.n	80029a4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f043 0210 	orr.w	r2, r3, #16
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000000 	.word	0x20000000
 80029b4:	053e2d63 	.word	0x053e2d63
 80029b8:	50040000 	.word	0x50040000
 80029bc:	50040300 	.word	0x50040300
 80029c0:	fff0c007 	.word	0xfff0c007

080029c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0b6      	sub	sp, #216	; 0xd8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x22>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e3d5      	b.n	8003192 <HAL_ADC_ConfigChannel+0x7ce>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fe79 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 83ba 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d824      	bhi.n	8002a5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	3b02      	subs	r3, #2
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d81b      	bhi.n	8002a52 <HAL_ADC_ConfigChannel+0x8e>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_ADC_ConfigChannel+0x5c>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a39 	.word	0x08002a39
 8002a28:	08002a41 	.word	0x08002a41
 8002a2c:	08002a49 	.word	0x08002a49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a30:	230c      	movs	r3, #12
 8002a32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a36:	e010      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a3e:	e00c      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a40:	2318      	movs	r3, #24
 8002a42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a46:	e008      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a50:	e003      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a52:	2306      	movs	r3, #6
 8002a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002a68:	f7ff fd62 	bl	8002530 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe3a 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002a76:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fe46 	bl	8002710 <LL_ADC_INJ_IsConversionOngoing>
 8002a84:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 81bf 	bne.w	8002e10 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 81ba 	bne.w	8002e10 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7ff fd69 	bl	8002588 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fd23 	bl	800250a <LL_ADC_SetSamplingTimeCommonConfig>
 8002ac4:	e00e      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f7ff fd58 	bl	8002588 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fd13 	bl	800250a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00a      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b16:	f7ff fca3 	bl	8002460 <LL_ADC_SetOffset>
 8002b1a:	e179      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fcc0 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x184>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fcb5 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 021f 	and.w	r2, r3, #31
 8002b46:	e01e      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x1c2>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fcaa 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e004      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002b7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x1da>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	e018      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x20c>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002bba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e004      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002bc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fc79 	bl	80024d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fc5d 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x24a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fc52 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	e01e      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x288>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fc47 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002c34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e004      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x2a0>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	e018      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x2d2>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e004      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d106      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fc16 	bl	80024d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2102      	movs	r1, #2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fbfa 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x310>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fbef 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	e01e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x34e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fbe4 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x366>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	e014      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x390>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2102      	movs	r1, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbb7 	bl	80024d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fb9b 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x3ce>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2103      	movs	r1, #3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fb90 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	e017      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x3fe>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2103      	movs	r1, #3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb85 	bl	80024a8 <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x416>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	e011      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x43a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dea:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e003      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d106      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2103      	movs	r1, #3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fb62 	bl	80024d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fc55 	bl	80026c4 <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 813f 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f7ff fbd6 	bl	80025e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a8e      	ldr	r2, [pc, #568]	; (8003074 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	f040 8130 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x4a4>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	3301      	adds	r3, #1
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	bf94      	ite	ls
 8002e60:	2301      	movls	r3, #1
 8002e62:	2300      	movhi	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e019      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x4d8>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e003      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	bf94      	ite	ls
 8002e96:	2301      	movls	r3, #1
 8002e98:	2300      	movhi	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d079      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d107      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x4f8>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eba:	e015      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x524>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ecc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e003      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	069b      	lsls	r3, r3, #26
 8002ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x544>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	e017      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x574>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	ea42 0103 	orr.w	r1, r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x59a>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	051b      	lsls	r3, r3, #20
 8002f5c:	e018      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x5cc>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f90:	430b      	orrs	r3, r1
 8002f92:	e080      	b.n	8003096 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x5ec>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	069b      	lsls	r3, r3, #26
 8002faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fae:	e015      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x618>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	069b      	lsls	r3, r3, #26
 8002fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x638>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	e017      	b.n	800302c <HAL_ADC_ConfigChannel+0x668>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	61bb      	str	r3, [r7, #24]
  return result;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e003      	b.n	8003020 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3301      	adds	r3, #1
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x694>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	3b1e      	subs	r3, #30
 8003050:	051b      	lsls	r3, r3, #20
 8003052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003056:	e01d      	b.n	8003094 <HAL_ADC_ConfigChannel+0x6d0>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	60fb      	str	r3, [r7, #12]
  return result;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e005      	b.n	8003080 <HAL_ADC_ConfigChannel+0x6bc>
 8003074:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	3b1e      	subs	r3, #30
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003094:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309a:	4619      	mov	r1, r3
 800309c:	f7ff fa74 	bl	8002588 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_ADC_ConfigChannel+0x7d8>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d06c      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030ac:	483c      	ldr	r0, [pc, #240]	; (80031a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80030ae:	f7ff f9c9 	bl	8002444 <LL_ADC_GetCommonPathInternalCh>
 80030b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_ADC_ConfigChannel+0x7e0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d127      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d121      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a35      	ldr	r2, [pc, #212]	; (80031a8 <HAL_ADC_ConfigChannel+0x7e4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d157      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030de:	4619      	mov	r1, r3
 80030e0:	482f      	ldr	r0, [pc, #188]	; (80031a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80030e2:	f7ff f99c 	bl	800241e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_ADC_ConfigChannel+0x7e8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <HAL_ADC_ConfigChannel+0x7ec>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003100:	e002      	b.n	8003108 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3b01      	subs	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800310e:	e03a      	b.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800311a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d12a      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003138:	4619      	mov	r1, r3
 800313a:	4819      	ldr	r0, [pc, #100]	; (80031a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800313c:	f7ff f96f 	bl	800241e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003140:	e021      	b.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_ADC_ConfigChannel+0x7f4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d11c      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800314c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d116      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d111      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800316a:	4619      	mov	r1, r3
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800316e:	f7ff f956 	bl	800241e <LL_ADC_SetCommonPathInternalCh>
 8003172:	e008      	b.n	8003186 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800318e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003192:	4618      	mov	r0, r3
 8003194:	37d8      	adds	r7, #216	; 0xd8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	80080000 	.word	0x80080000
 80031a0:	50040300 	.word	0x50040300
 80031a4:	c7520000 	.word	0xc7520000
 80031a8:	50040000 	.word	0x50040000
 80031ac:	20000000 	.word	0x20000000
 80031b0:	053e2d63 	.word	0x053e2d63
 80031b4:	cb840000 	.word	0xcb840000
 80031b8:	80000001 	.word	0x80000001

080031bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0ed      	b.n	80033aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fada 	bl	8001794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f0:	f7ff f8d2 	bl	8002398 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031f6:	e012      	b.n	800321e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f8:	f7ff f8ce 	bl	8002398 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b0a      	cmp	r3, #10
 8003204:	d90b      	bls.n	800321e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2205      	movs	r2, #5
 8003216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0c5      	b.n	80033aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0e5      	beq.n	80031f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0202 	bic.w	r2, r2, #2
 800323a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800323c:	f7ff f8ac 	bl	8002398 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003242:	e012      	b.n	800326a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003244:	f7ff f8a8 	bl	8002398 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b0a      	cmp	r3, #10
 8003250:	d90b      	bls.n	800326a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2205      	movs	r2, #5
 8003262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e09f      	b.n	80033aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e1b      	ldrb	r3, [r3, #24]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e007      	b.n	80032a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7e5b      	ldrb	r3, [r3, #25]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7e9b      	ldrb	r3, [r3, #26]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e007      	b.n	80032f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0220 	bic.w	r2, r2, #32
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7edb      	ldrb	r3, [r3, #27]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0210 	bic.w	r2, r2, #16
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e007      	b.n	8003320 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0210 	orr.w	r2, r2, #16
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7f1b      	ldrb	r3, [r3, #28]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d108      	bne.n	800333a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e007      	b.n	800334a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7f5b      	ldrb	r3, [r3, #29]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0204 	orr.w	r2, r2, #4
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e007      	b.n	8003374 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0204 	bic.w	r2, r2, #4
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4904      	ldr	r1, [pc, #16]	; (80033d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40010400 	.word	0x40010400

080033d8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <LL_EXTI_DisableIT_0_31+0x24>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <LL_EXTI_DisableIT_0_31+0x24>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010400 	.word	0x40010400

08003400 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <LL_EXTI_EnableEvent_0_31+0x20>)
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4904      	ldr	r1, [pc, #16]	; (8003420 <LL_EXTI_EnableEvent_0_31+0x20>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]

}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40010400 	.word	0x40010400

08003424 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <LL_EXTI_DisableEvent_0_31+0x24>)
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	43db      	mvns	r3, r3
 8003434:	4904      	ldr	r1, [pc, #16]	; (8003448 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003436:	4013      	ands	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010400 	.word	0x40010400

0800344c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	4904      	ldr	r1, [pc, #16]	; (800346c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]

}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40010400 	.word	0x40010400

08003470 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	43db      	mvns	r3, r3
 8003480:	4904      	ldr	r1, [pc, #16]	; (8003494 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003482:	4013      	ands	r3, r2
 8003484:	608b      	str	r3, [r1, #8]

}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010400 	.word	0x40010400

08003498 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	4904      	ldr	r1, [pc, #16]	; (80034b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40010400 	.word	0x40010400

080034bc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	4904      	ldr	r1, [pc, #16]	; (80034e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	60cb      	str	r3, [r1, #12]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010400 	.word	0x40010400

080034e4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6153      	str	r3, [r2, #20]
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010400 	.word	0x40010400

08003504 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e0d1      	b.n	80036c4 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800352a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800352e:	d102      	bne.n	8003536 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e0c6      	b.n	80036c4 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d115      	bne.n	800356e <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003550:	4b5f      	ldr	r3, [pc, #380]	; (80036d0 <HAL_COMP_Init+0x1cc>)
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	4a5e      	ldr	r2, [pc, #376]	; (80036d0 <HAL_COMP_Init+0x1cc>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6613      	str	r3, [r2, #96]	; 0x60
 800355c:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_COMP_Init+0x1cc>)
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fe f957 	bl	800181c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003578:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_COMP_Init+0x1d0>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	6979      	ldr	r1, [r7, #20]
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ba:	d106      	bne.n	80035ca <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80035bc:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_COMP_Init+0x1d4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a45      	ldr	r2, [pc, #276]	; (80036d8 <HAL_COMP_Init+0x1d4>)
 80035c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e005      	b.n	80035d6 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80035ca:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_COMP_Init+0x1d4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <HAL_COMP_Init+0x1d4>)
 80035d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d4:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d016      	beq.n	8003612 <HAL_COMP_Init+0x10e>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d113      	bne.n	8003612 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ea:	4b3c      	ldr	r3, [pc, #240]	; (80036dc <HAL_COMP_Init+0x1d8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <HAL_COMP_Init+0x1dc>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003604:	e002      	b.n	800360c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3b01      	subs	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f9      	bne.n	8003606 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <HAL_COMP_Init+0x1e0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d102      	bne.n	8003622 <HAL_COMP_Init+0x11e>
 800361c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003620:	e001      	b.n	8003626 <HAL_COMP_Init+0x122>
 8003622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003626:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d037      	beq.n	80036a4 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003640:	6938      	ldr	r0, [r7, #16]
 8003642:	f7ff ff03 	bl	800344c <LL_EXTI_EnableRisingTrig_0_31>
 8003646:	e002      	b.n	800364e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003648:	6938      	ldr	r0, [r7, #16]
 800364a:	f7ff ff11 	bl	8003470 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800365a:	6938      	ldr	r0, [r7, #16]
 800365c:	f7ff ff1c 	bl	8003498 <LL_EXTI_EnableFallingTrig_0_31>
 8003660:	e002      	b.n	8003668 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003662:	6938      	ldr	r0, [r7, #16]
 8003664:	f7ff ff2a 	bl	80034bc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003668:	6938      	ldr	r0, [r7, #16]
 800366a:	f7ff ff3b 	bl	80034e4 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800367a:	6938      	ldr	r0, [r7, #16]
 800367c:	f7ff fec0 	bl	8003400 <LL_EXTI_EnableEvent_0_31>
 8003680:	e002      	b.n	8003688 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003682:	6938      	ldr	r0, [r7, #16]
 8003684:	f7ff fece 	bl	8003424 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003694:	6938      	ldr	r0, [r7, #16]
 8003696:	f7ff fe8d 	bl	80033b4 <LL_EXTI_EnableIT_0_31>
 800369a:	e009      	b.n	80036b0 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800369c:	6938      	ldr	r0, [r7, #16]
 800369e:	f7ff fe9b 	bl	80033d8 <LL_EXTI_DisableIT_0_31>
 80036a2:	e005      	b.n	80036b0 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80036a4:	6938      	ldr	r0, [r7, #16]
 80036a6:	f7ff febd 	bl	8003424 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80036aa:	6938      	ldr	r0, [r7, #16]
 80036ac:	f7ff fe94 	bl	80033d8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	ff207d03 	.word	0xff207d03
 80036d8:	40010204 	.word	0x40010204
 80036dc:	20000000 	.word	0x20000000
 80036e0:	053e2d63 	.word	0x053e2d63
 80036e4:	40010200 	.word	0x40010200

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db0a      	blt.n	8003776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	490c      	ldr	r1, [pc, #48]	; (8003798 <__NVIC_SetPriority+0x4c>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	440b      	add	r3, r1
 8003770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003774:	e00a      	b.n	800378c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <__NVIC_SetPriority+0x50>)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	3b04      	subs	r3, #4
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	440b      	add	r3, r1
 800378a:	761a      	strb	r2, [r3, #24]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf28      	it	cs
 80037be:	2304      	movcs	r3, #4
 80037c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3304      	adds	r3, #4
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d902      	bls.n	80037d0 <NVIC_EncodePriority+0x30>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3b03      	subs	r3, #3
 80037ce:	e000      	b.n	80037d2 <NVIC_EncodePriority+0x32>
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	401a      	ands	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	4313      	orrs	r3, r2
         );
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003818:	d301      	bcc.n	800381e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381a:	2301      	movs	r3, #1
 800381c:	e00f      	b.n	800383e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <SysTick_Config+0x40>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003826:	210f      	movs	r1, #15
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	f7ff ff8e 	bl	800374c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <SysTick_Config+0x40>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <SysTick_Config+0x40>)
 8003838:	2207      	movs	r2, #7
 800383a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	e000e010 	.word	0xe000e010

0800384c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff47 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003874:	f7ff ff5c 	bl	8003730 <__NVIC_GetPriorityGrouping>
 8003878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff8e 	bl	80037a0 <NVIC_EncodePriority>
 8003884:	4602      	mov	r2, r0
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff5d 	bl	800374c <__NVIC_SetPriority>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ffb0 	bl	8003808 <SysTick_Config>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c2:	e166      	b.n	8003b92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8158 	beq.w	8003b8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d005      	beq.n	80038f4 <HAL_GPIO_Init+0x40>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d130      	bne.n	8003956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392a:	2201      	movs	r2, #1
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0201 	and.w	r2, r3, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d017      	beq.n	8003992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d123      	bne.n	80039e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	08da      	lsrs	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	6939      	ldr	r1, [r7, #16]
 80039e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0203 	and.w	r2, r3, #3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b2 	beq.w	8003b8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a28:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_GPIO_Init+0x2fc>)
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <HAL_GPIO_Init+0x2fc>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6613      	str	r3, [r2, #96]	; 0x60
 8003a34:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <HAL_GPIO_Init+0x2fc>)
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a40:	4a5c      	ldr	r2, [pc, #368]	; (8003bb4 <HAL_GPIO_Init+0x300>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	220f      	movs	r2, #15
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a6a:	d02b      	beq.n	8003ac4 <HAL_GPIO_Init+0x210>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_GPIO_Init+0x304>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d025      	beq.n	8003ac0 <HAL_GPIO_Init+0x20c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <HAL_GPIO_Init+0x308>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d01f      	beq.n	8003abc <HAL_GPIO_Init+0x208>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_GPIO_Init+0x30c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d019      	beq.n	8003ab8 <HAL_GPIO_Init+0x204>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a4f      	ldr	r2, [pc, #316]	; (8003bc4 <HAL_GPIO_Init+0x310>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_GPIO_Init+0x200>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a4e      	ldr	r2, [pc, #312]	; (8003bc8 <HAL_GPIO_Init+0x314>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00d      	beq.n	8003ab0 <HAL_GPIO_Init+0x1fc>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a4d      	ldr	r2, [pc, #308]	; (8003bcc <HAL_GPIO_Init+0x318>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <HAL_GPIO_Init+0x1f8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a4c      	ldr	r2, [pc, #304]	; (8003bd0 <HAL_GPIO_Init+0x31c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_GPIO_Init+0x1f4>
 8003aa4:	2307      	movs	r3, #7
 8003aa6:	e00e      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	e00c      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003aac:	2306      	movs	r3, #6
 8003aae:	e00a      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003ab0:	2305      	movs	r3, #5
 8003ab2:	e008      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	e006      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e004      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e002      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	f002 0203 	and.w	r2, r2, #3
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	4093      	lsls	r3, r2
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ad6:	4937      	ldr	r1, [pc, #220]	; (8003bb4 <HAL_GPIO_Init+0x300>)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b08:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b0e:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b32:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b38:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b86:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_GPIO_Init+0x320>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f ae91 	bne.w	80038c4 <HAL_GPIO_Init+0x10>
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	48000400 	.word	0x48000400
 8003bbc:	48000800 	.word	0x48000800
 8003bc0:	48000c00 	.word	0x48000c00
 8003bc4:	48001000 	.word	0x48001000
 8003bc8:	48001400 	.word	0x48001400
 8003bcc:	48001800 	.word	0x48001800
 8003bd0:	48001c00 	.word	0x48001c00
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e08d      	b.n	8003d06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fe60 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d107      	bne.n	8003c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e006      	b.n	8003c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d108      	bne.n	8003c7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	e007      	b.n	8003c8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69d9      	ldr	r1, [r3, #28]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	817b      	strh	r3, [r7, #10]
 8003d20:	4613      	mov	r3, r2
 8003d22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	f040 80fd 	bne.w	8003f2c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_I2C_Master_Transmit+0x30>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e0f6      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x21e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d48:	f7fe fb26 	bl	8002398 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2319      	movs	r3, #25
 8003d54:	2201      	movs	r2, #1
 8003d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa0a 	bl	8004174 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0e1      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2221      	movs	r2, #33	; 0x21
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2210      	movs	r2, #16
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	893a      	ldrh	r2, [r7, #8]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2bff      	cmp	r3, #255	; 0xff
 8003d9a:	d906      	bls.n	8003daa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	22ff      	movs	r2, #255	; 0xff
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e007      	b.n	8003dba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d024      	beq.n	8003e0c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <HAL_I2C_Master_Transmit+0x228>)
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fbf1 	bl	80045ec <I2C_TransferConfig>
 8003e0a:	e066      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	8979      	ldrh	r1, [r7, #10]
 8003e14:	4b48      	ldr	r3, [pc, #288]	; (8003f38 <HAL_I2C_Master_Transmit+0x228>)
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fbe6 	bl	80045ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e20:	e05b      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	6a39      	ldr	r1, [r7, #32]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f9f3 	bl	8004212 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e07b      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d034      	beq.n	8003eda <HAL_I2C_Master_Transmit+0x1ca>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d130      	bne.n	8003eda <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f976 	bl	8004174 <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e04d      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2bff      	cmp	r3, #255	; 0xff
 8003e9a:	d90e      	bls.n	8003eba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fb9a 	bl	80045ec <I2C_TransferConfig>
 8003eb8:	e00f      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	8979      	ldrh	r1, [r7, #10]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fb89 	bl	80045ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d19e      	bne.n	8003e22 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f9d9 	bl	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01a      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2220      	movs	r2, #32
 8003efe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_I2C_Master_Transmit+0x22c>)
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	80002000 	.word	0x80002000
 8003f3c:	fe00e800 	.word	0xfe00e800

08003f40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	817b      	strh	r3, [r7, #10]
 8003f50:	4613      	mov	r3, r2
 8003f52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	f040 80db 	bne.w	8004118 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2C_Master_Receive+0x30>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0d4      	b.n	800411a <HAL_I2C_Master_Receive+0x1da>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f78:	f7fe fa0e 	bl	8002398 <HAL_GetTick>
 8003f7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2319      	movs	r3, #25
 8003f84:	2201      	movs	r2, #1
 8003f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f8f2 	bl	8004174 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0bf      	b.n	800411a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2222      	movs	r2, #34	; 0x22
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	893a      	ldrh	r2, [r7, #8]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2bff      	cmp	r3, #255	; 0xff
 8003fca:	d90e      	bls.n	8003fea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	8979      	ldrh	r1, [r7, #10]
 8003fda:	4b52      	ldr	r3, [pc, #328]	; (8004124 <HAL_I2C_Master_Receive+0x1e4>)
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fb02 	bl	80045ec <I2C_TransferConfig>
 8003fe8:	e06d      	b.n	80040c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	8979      	ldrh	r1, [r7, #10]
 8003ffc:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_I2C_Master_Receive+0x1e4>)
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 faf1 	bl	80045ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800400a:	e05c      	b.n	80040c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	6a39      	ldr	r1, [r7, #32]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f989 	bl	8004328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e07c      	b.n	800411a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d034      	beq.n	80040c6 <HAL_I2C_Master_Receive+0x186>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d130      	bne.n	80040c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2200      	movs	r2, #0
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f880 	bl	8004174 <I2C_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e04d      	b.n	800411a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2bff      	cmp	r3, #255	; 0xff
 8004086:	d90e      	bls.n	80040a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	22ff      	movs	r2, #255	; 0xff
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	b2da      	uxtb	r2, r3
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 faa4 	bl	80045ec <I2C_TransferConfig>
 80040a4:	e00f      	b.n	80040c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fa93 	bl	80045ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d19d      	bne.n	800400c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	6a39      	ldr	r1, [r7, #32]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f8e3 	bl	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e01a      	b.n	800411a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_I2C_Master_Receive+0x1e8>)
 80040f8:	400b      	ands	r3, r1
 80040fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	80002400 	.word	0x80002400
 8004128:	fe00e800 	.word	0xfe00e800

0800412c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d103      	bne.n	800414a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d007      	beq.n	8004168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	619a      	str	r2, [r3, #24]
  }
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004184:	e031      	b.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d02d      	beq.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fe f903 	bl	8002398 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d122      	bne.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d113      	bne.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d0be      	beq.n	8004186 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800421e:	e033      	b.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f901 	bl	800442c <I2C_IsErrorOccurred>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e031      	b.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d025      	beq.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423c:	f7fe f8ac 	bl	8002398 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d302      	bcc.n	8004252 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11a      	bne.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d013      	beq.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d1c4      	bne.n	8004220 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ac:	e02f      	b.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f8ba 	bl	800442c <I2C_IsErrorOccurred>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e02d      	b.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe f869 	bl	8002398 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d013      	beq.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e007      	b.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d1c8      	bne.n	80042ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004334:	e06b      	b.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f876 	bl	800442c <I2C_IsErrorOccurred>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e069      	b.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b20      	cmp	r3, #32
 8004356:	d138      	bne.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d105      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e055      	b.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b10      	cmp	r3, #16
 800437e:	d107      	bne.n	8004390 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2204      	movs	r2, #4
 800438c:	645a      	str	r2, [r3, #68]	; 0x44
 800438e:	e002      	b.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2220      	movs	r2, #32
 800439c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e029      	b.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fd ffe5 	bl	8002398 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d116      	bne.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d00f      	beq.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e007      	b.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d18c      	bne.n	8004336 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	fe00e800 	.word	0xfe00e800

0800442c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d068      	beq.n	800452a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004460:	e049      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d045      	beq.n	80044f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fd ff95 	bl	8002398 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_IsErrorOccurred+0x54>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13a      	bne.n	80044f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a2:	d121      	bne.n	80044e8 <I2C_IsErrorOccurred+0xbc>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044aa:	d01d      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d01a      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044c2:	f7fd ff69 	bl	8002398 <HAL_GetTick>
 80044c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c8:	e00e      	b.n	80044e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ca:	f7fd ff65 	bl	8002398 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b19      	cmp	r3, #25
 80044d6:	d907      	bls.n	80044e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80044e6:	e006      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d1e9      	bne.n	80044ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d003      	beq.n	800450c <I2C_IsErrorOccurred+0xe0>
 8004504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0aa      	beq.n	8004462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2220      	movs	r2, #32
 800451a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800454c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800456e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01c      	beq.n	80045da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fdc3 	bl	800412c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <I2C_IsErrorOccurred+0x1bc>)
 80045b2:	400b      	ands	r3, r1
 80045b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80045da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	4613      	mov	r3, r2
 80045fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004604:	7a7b      	ldrb	r3, [r7, #9]
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800460c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	4313      	orrs	r3, r2
 8004616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800461a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <I2C_TransferConfig+0x60>)
 800462c:	430b      	orrs	r3, r1
 800462e:	43db      	mvns	r3, r3
 8004630:	ea02 0103 	and.w	r1, r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	03ff63ff 	.word	0x03ff63ff

08004650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	d138      	bne.n	80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004670:	2302      	movs	r3, #2
 8004672:	e032      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d139      	bne.n	8004770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004706:	2302      	movs	r3, #2
 8004708:	e033      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2224      	movs	r2, #36	; 0x24
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800478a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478e:	6013      	str	r3, [r2, #0]
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40007000 	.word	0x40007000

080047a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d102      	bne.n	80047b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80047b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b6:	e00b      	b.n	80047d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80047ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c6:	d102      	bne.n	80047ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80047c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047cc:	e000      	b.n	80047d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80047ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40007000 	.word	0x40007000

080047e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d141      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ee:	4b4b      	ldr	r3, [pc, #300]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fa:	d131      	bne.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047fc:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004802:	4a46      	ldr	r2, [pc, #280]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800480c:	4b43      	ldr	r3, [pc, #268]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004814:	4a41      	ldr	r2, [pc, #260]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800481a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800481c:	4b40      	ldr	r3, [pc, #256]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2232      	movs	r2, #50	; 0x32
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	0c9b      	lsrs	r3, r3, #18
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	e002      	b.n	800483a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3b01      	subs	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800483a:	4b38      	ldr	r3, [pc, #224]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d102      	bne.n	800484e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f2      	bne.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800484e:	4b33      	ldr	r3, [pc, #204]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485a:	d158      	bne.n	800490e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e057      	b.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004860:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004866:	4a2d      	ldr	r2, [pc, #180]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004870:	e04d      	b.n	800490e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d141      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800487a:	4b28      	ldr	r3, [pc, #160]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004886:	d131      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488e:	4a23      	ldr	r2, [pc, #140]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004898:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048a0:	4a1e      	ldr	r2, [pc, #120]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2232      	movs	r2, #50	; 0x32
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	0c9b      	lsrs	r3, r3, #18
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048be:	e002      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d2:	d102      	bne.n	80048da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f2      	bne.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e6:	d112      	bne.n	800490e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e011      	b.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048fc:	e007      	b.n	800490e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004906:	4a05      	ldr	r2, [pc, #20]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800490c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40007000 	.word	0x40007000
 8004920:	20000000 	.word	0x20000000
 8004924:	431bde83 	.word	0x431bde83

08004928 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_PWREx_EnableVddIO2+0x1c>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004936:	6053      	str	r3, [r2, #4]
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40007000 	.word	0x40007000

08004948 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f000 bc08 	b.w	800516c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495c:	4b96      	ldr	r3, [pc, #600]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004966:	4b94      	ldr	r3, [pc, #592]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80e4 	beq.w	8004b46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_RCC_OscConfig+0x4c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0c      	cmp	r3, #12
 8004988:	f040 808b 	bne.w	8004aa2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b01      	cmp	r3, #1
 8004990:	f040 8087 	bne.w	8004aa2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004994:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_OscConfig+0x64>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e3df      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	4b81      	ldr	r3, [pc, #516]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_RCC_OscConfig+0x7e>
 80049bc:	4b7e      	ldr	r3, [pc, #504]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c4:	e005      	b.n	80049d2 <HAL_RCC_OscConfig+0x8a>
 80049c6:	4b7c      	ldr	r3, [pc, #496]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 80049c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d223      	bcs.n	8004a1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fdcc 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e3c0      	b.n	800516c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ea:	4b73      	ldr	r3, [pc, #460]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a72      	ldr	r2, [pc, #456]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 80049f0:	f043 0308 	orr.w	r3, r3, #8
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	496d      	ldr	r1, [pc, #436]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a08:	4b6b      	ldr	r3, [pc, #428]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	4968      	ldr	r1, [pc, #416]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	e025      	b.n	8004a6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1e:	4b66      	ldr	r3, [pc, #408]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a65      	ldr	r2, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b63      	ldr	r3, [pc, #396]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4960      	ldr	r1, [pc, #384]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a3c:	4b5e      	ldr	r3, [pc, #376]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	495b      	ldr	r1, [pc, #364]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fd8c 	bl	8005578 <RCC_SetFlashLatencyFromMSIRange>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e380      	b.n	800516c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6a:	f000 fcc1 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b51      	ldr	r3, [pc, #324]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4950      	ldr	r1, [pc, #320]	; (8004bbc <HAL_RCC_OscConfig+0x274>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	4a4e      	ldr	r2, [pc, #312]	; (8004bc0 <HAL_RCC_OscConfig+0x278>)
 8004a88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a8a:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fd fc32 	bl	80022f8 <HAL_InitTick>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d052      	beq.n	8004b44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	e364      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d032      	beq.n	8004b10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004aaa:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a42      	ldr	r2, [pc, #264]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ab6:	f7fd fc6f 	bl	8002398 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004abe:	f7fd fc6b 	bl	8002398 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e34d      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a35      	ldr	r2, [pc, #212]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ae2:	f043 0308 	orr.w	r3, r3, #8
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4930      	ldr	r1, [pc, #192]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	492b      	ldr	r1, [pc, #172]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
 8004b0e:	e01a      	b.n	8004b46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b10:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b1c:	f7fd fc3c 	bl	8002398 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b24:	f7fd fc38 	bl	8002398 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e31a      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x1dc>
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d073      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_OscConfig+0x21c>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	d10e      	bne.n	8004b7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d10b      	bne.n	8004b7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d063      	beq.n	8004c38 <HAL_RCC_OscConfig+0x2f0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d15f      	bne.n	8004c38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e2f7      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b84:	d106      	bne.n	8004b94 <HAL_RCC_OscConfig+0x24c>
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a0b      	ldr	r2, [pc, #44]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e025      	b.n	8004be0 <HAL_RCC_OscConfig+0x298>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b9c:	d114      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x280>
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a02      	ldr	r2, [pc, #8]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e013      	b.n	8004be0 <HAL_RCC_OscConfig+0x298>
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	08009698 	.word	0x08009698
 8004bc0:	20000000 	.word	0x20000000
 8004bc4:	20000004 	.word	0x20000004
 8004bc8:	4ba0      	ldr	r3, [pc, #640]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a9f      	ldr	r2, [pc, #636]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b9d      	ldr	r3, [pc, #628]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a9c      	ldr	r2, [pc, #624]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d013      	beq.n	8004c10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fbd6 	bl	8002398 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7fd fbd2 	bl	8002398 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	; 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e2b4      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c02:	4b92      	ldr	r3, [pc, #584]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2a8>
 8004c0e:	e014      	b.n	8004c3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fd fbc2 	bl	8002398 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fd fbbe 	bl	8002398 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e2a0      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c2a:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x2d0>
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d060      	beq.n	8004d08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_OscConfig+0x310>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d116      	bne.n	8004c86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c58:	4b7c      	ldr	r3, [pc, #496]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_OscConfig+0x328>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e27d      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c70:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	4973      	ldr	r1, [pc, #460]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	e040      	b.n	8004d08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d023      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8e:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6e      	ldr	r2, [pc, #440]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fd fb7d 	bl	8002398 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fd fb79 	bl	8002398 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e25b      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb4:	4b65      	ldr	r3, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	495f      	ldr	r1, [pc, #380]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
 8004cd4:	e018      	b.n	8004d08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd6:	4b5d      	ldr	r3, [pc, #372]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5c      	ldr	r2, [pc, #368]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fd fb59 	bl	8002398 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cea:	f7fd fb55 	bl	8002398 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e237      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cfc:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d03c      	beq.n	8004d8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01c      	beq.n	8004d56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1c:	4b4b      	ldr	r3, [pc, #300]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d22:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fd fb34 	bl	8002398 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fd fb30 	bl	8002398 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e212      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d46:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ef      	beq.n	8004d34 <HAL_RCC_OscConfig+0x3ec>
 8004d54:	e01b      	b.n	8004d8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d56:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5c:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fd fb17 	bl	8002398 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6e:	f7fd fb13 	bl	8002398 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1f5      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d80:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1ef      	bne.n	8004d6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a6 	beq.w	8004ee8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da0:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6593      	str	r3, [r2, #88]	; 0x58
 8004db8:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <HAL_RCC_OscConfig+0x508>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d118      	bne.n	8004e06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCC_OscConfig+0x508>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <HAL_RCC_OscConfig+0x508>)
 8004dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de0:	f7fd fada 	bl	8002398 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de8:	f7fd fad6 	bl	8002398 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e1b8      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_RCC_OscConfig+0x508>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d108      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4d8>
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e1e:	e029      	b.n	8004e74 <HAL_RCC_OscConfig+0x52c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d115      	bne.n	8004e54 <HAL_RCC_OscConfig+0x50c>
 8004e28:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <HAL_RCC_OscConfig+0x504>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x52c>
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40007000 	.word	0x40007000
 8004e54:	4b9d      	ldr	r3, [pc, #628]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	4a9c      	ldr	r2, [pc, #624]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e64:	4b99      	ldr	r3, [pc, #612]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	4a98      	ldr	r2, [pc, #608]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d016      	beq.n	8004eaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fd fa8c 	bl	8002398 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fd fa88 	bl	8002398 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e168      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9a:	4b8c      	ldr	r3, [pc, #560]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ed      	beq.n	8004e84 <HAL_RCC_OscConfig+0x53c>
 8004ea8:	e015      	b.n	8004ed6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fd fa75 	bl	8002398 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd fa71 	bl	8002398 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e151      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ec8:	4b80      	ldr	r3, [pc, #512]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ed      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004edc:	4b7b      	ldr	r3, [pc, #492]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	4a7a      	ldr	r2, [pc, #488]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d03c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004efc:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f02:	4a72      	ldr	r2, [pc, #456]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fd fa44 	bl	8002398 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f14:	f7fd fa40 	bl	8002398 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e122      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f26:	4b69      	ldr	r3, [pc, #420]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ef      	beq.n	8004f14 <HAL_RCC_OscConfig+0x5cc>
 8004f34:	e01b      	b.n	8004f6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f36:	4b65      	ldr	r3, [pc, #404]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3c:	4a63      	ldr	r2, [pc, #396]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fd fa27 	bl	8002398 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f4e:	f7fd fa23 	bl	8002398 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e105      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f60:	4b5a      	ldr	r3, [pc, #360]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ef      	bne.n	8004f4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80f9 	beq.w	800516a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	f040 80cf 	bne.w	8005120 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f82:	4b52      	ldr	r3, [pc, #328]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0203 	and.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d12c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d123      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d113      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d071      	beq.n	80050d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b0c      	cmp	r3, #12
 8004ff4:	d068      	beq.n	80050c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ff6:	4b35      	ldr	r3, [pc, #212]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005002:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e0ac      	b.n	800516c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2d      	ldr	r2, [pc, #180]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8005018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800501e:	f7fd f9bb 	bl	8002398 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005026:	f7fd f9b7 	bl	8002398 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e099      	b.n	800516c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <HAL_RCC_OscConfig+0x788>)
 800504a:	4013      	ands	r3, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005054:	3a01      	subs	r2, #1
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800505e:	0212      	lsls	r2, r2, #8
 8005060:	4311      	orrs	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005066:	0852      	lsrs	r2, r2, #1
 8005068:	3a01      	subs	r2, #1
 800506a:	0552      	lsls	r2, r2, #21
 800506c:	4311      	orrs	r1, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005072:	0852      	lsrs	r2, r2, #1
 8005074:	3a01      	subs	r2, #1
 8005076:	0652      	lsls	r2, r2, #25
 8005078:	4311      	orrs	r1, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507e:	06d2      	lsls	r2, r2, #27
 8005080:	430a      	orrs	r2, r1
 8005082:	4912      	ldr	r1, [pc, #72]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8005084:	4313      	orrs	r3, r2
 8005086:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0f      	ldr	r2, [pc, #60]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005092:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050a0:	f7fd f97a 	bl	8002398 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd f976 	bl	8002398 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e058      	b.n	800516c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_RCC_OscConfig+0x784>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050c6:	e050      	b.n	800516a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e04f      	b.n	800516c <HAL_RCC_OscConfig+0x824>
 80050cc:	40021000 	.word	0x40021000
 80050d0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d4:	4b27      	ldr	r3, [pc, #156]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d144      	bne.n	800516a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050e0:	4b24      	ldr	r3, [pc, #144]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050f8:	f7fd f94e 	bl	8002398 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005100:	f7fd f94a 	bl	8002398 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e02c      	b.n	800516c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005112:	4b18      	ldr	r3, [pc, #96]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x7b8>
 800511e:	e024      	b.n	800516a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d01f      	beq.n	8005166 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 800512c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fd f931 	bl	8002398 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513a:	f7fd f92d 	bl	8002398 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e00f      	b.n	800516c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	4905      	ldr	r1, [pc, #20]	; (8005174 <HAL_RCC_OscConfig+0x82c>)
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_OscConfig+0x830>)
 8005160:	4013      	ands	r3, r2
 8005162:	60cb      	str	r3, [r1, #12]
 8005164:	e001      	b.n	800516a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	feeefffc 	.word	0xfeeefffc

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e11d      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b90      	ldr	r3, [pc, #576]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d910      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b8d      	ldr	r3, [pc, #564]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 020f 	bic.w	r2, r3, #15
 80051aa:	498b      	ldr	r1, [pc, #556]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e105      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	4b81      	ldr	r3, [pc, #516]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051dc:	429a      	cmp	r2, r3
 80051de:	d908      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e0:	4b7e      	ldr	r3, [pc, #504]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	497b      	ldr	r1, [pc, #492]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d079      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d11e      	bne.n	8005244 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005206:	4b75      	ldr	r3, [pc, #468]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0dc      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005216:	f000 fa09 	bl	800562c <RCC_GetSysClockFreqFromPLLSource>
 800521a:	4603      	mov	r3, r0
 800521c:	4a70      	ldr	r2, [pc, #448]	; (80053e0 <HAL_RCC_ClockConfig+0x264>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d946      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005222:	4b6e      	ldr	r3, [pc, #440]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d140      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800522e:	4b6b      	ldr	r3, [pc, #428]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005236:	4a69      	ldr	r2, [pc, #420]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e035      	b.n	80052b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d107      	bne.n	800525c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800524c:	4b63      	ldr	r3, [pc, #396]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d115      	bne.n	8005284 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0b9      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005264:	4b5d      	ldr	r3, [pc, #372]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0ad      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0a5      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005284:	f000 f8b4 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8005288:	4603      	mov	r3, r0
 800528a:	4a55      	ldr	r2, [pc, #340]	; (80053e0 <HAL_RCC_ClockConfig+0x264>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d90f      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005290:	4b52      	ldr	r3, [pc, #328]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a4:	4a4d      	ldr	r2, [pc, #308]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052b0:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 0203 	bic.w	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4947      	ldr	r1, [pc, #284]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c2:	f7fd f869 	bl	8002398 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ca:	f7fd f865 	bl	8002398 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e077      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e0:	4b3e      	ldr	r3, [pc, #248]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 020c 	and.w	r2, r3, #12
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d1eb      	bne.n	80052ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b80      	cmp	r3, #128	; 0x80
 80052f6:	d105      	bne.n	8005304 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052f8:	4b38      	ldr	r3, [pc, #224]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a37      	ldr	r2, [pc, #220]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005302:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4b31      	ldr	r3, [pc, #196]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800531c:	429a      	cmp	r2, r3
 800531e:	d208      	bcs.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005320:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	492b      	ldr	r1, [pc, #172]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005332:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d210      	bcs.n	8005362 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 020f 	bic.w	r2, r3, #15
 8005348:	4923      	ldr	r1, [pc, #140]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005350:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d001      	beq.n	8005362 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e036      	b.n	80053d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4918      	ldr	r1, [pc, #96]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800537c:	4313      	orrs	r3, r2
 800537e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538c:	4b13      	ldr	r3, [pc, #76]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4910      	ldr	r1, [pc, #64]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053a0:	f000 f826 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	490c      	ldr	r1, [pc, #48]	; (80053e4 <HAL_RCC_ClockConfig+0x268>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x26c>)
 80053be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x270>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fc ff97 	bl	80022f8 <HAL_InitTick>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40022000 	.word	0x40022000
 80053dc:	40021000 	.word	0x40021000
 80053e0:	04c4b400 	.word	0x04c4b400
 80053e4:	08009698 	.word	0x08009698
 80053e8:	20000000 	.word	0x20000000
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fe:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x34>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d121      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d11e      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005430:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e005      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d102      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005468:	4b25      	ldr	r3, [pc, #148]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e004      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d101      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <HAL_RCC_GetSysClockFreq+0x114>)
 8005476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d134      	bne.n	80054e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0xa6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d003      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0xac>
 8005494:	e005      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005496:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 8005498:	617b      	str	r3, [r7, #20]
      break;
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCC_GetSysClockFreq+0x114>)
 800549e:	617b      	str	r3, [r7, #20]
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	617b      	str	r3, [r7, #20]
      break;
 80054a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3301      	adds	r3, #1
 80054b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054b6:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	fb03 f202 	mul.w	r2, r3, r2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	0e5b      	lsrs	r3, r3, #25
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	3301      	adds	r3, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054e8:	69bb      	ldr	r3, [r7, #24]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	080096b0 	.word	0x080096b0
 8005500:	00f42400 	.word	0x00f42400
 8005504:	007a1200 	.word	0x007a1200

08005508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	080096a8 	.word	0x080096a8

0800554c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005550:	f7ff ffda 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	0adb      	lsrs	r3, r3, #11
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4904      	ldr	r1, [pc, #16]	; (8005574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40021000 	.word	0x40021000
 8005574:	080096a8 	.word	0x080096a8

08005578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005584:	4b27      	ldr	r3, [pc, #156]	; (8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005590:	f7ff f906 	bl	80047a0 <HAL_PWREx_GetVoltageRange>
 8005594:	6178      	str	r0, [r7, #20]
 8005596:	e014      	b.n	80055c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a21      	ldr	r2, [pc, #132]	; (8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
 80055a4:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055b0:	f7ff f8f6 	bl	80047a0 <HAL_PWREx_GetVoltageRange>
 80055b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c8:	d10b      	bne.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d913      	bls.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2ba0      	cmp	r3, #160	; 0xa0
 80055d4:	d902      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055d6:	2302      	movs	r3, #2
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e00d      	b.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e00a      	b.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b7f      	cmp	r3, #127	; 0x7f
 80055e6:	d902      	bls.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80055e8:	2302      	movs	r3, #2
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	e004      	b.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b70      	cmp	r3, #112	; 0x70
 80055f2:	d101      	bne.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055f4:	2301      	movs	r3, #1
 80055f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 020f 	bic.w	r2, r3, #15
 8005600:	4909      	ldr	r1, [pc, #36]	; (8005628 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	429a      	cmp	r2, r3
 8005614:	d001      	beq.n	800561a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	40022000 	.word	0x40022000

0800562c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005632:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d00b      	beq.n	800565a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d825      	bhi.n	8005694 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d008      	beq.n	8005660 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d11f      	bne.n	8005694 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005656:	613b      	str	r3, [r7, #16]
    break;
 8005658:	e01f      	b.n	800569a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800565a:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800565c:	613b      	str	r3, [r7, #16]
    break;
 800565e:	e01c      	b.n	800569a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d107      	bne.n	800567c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800566c:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e005      	b.n	8005688 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005688:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005690:	613b      	str	r3, [r7, #16]
    break;
 8005692:	e002      	b.n	800569a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
    break;
 8005698:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	3301      	adds	r3, #1
 80056a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	fb03 f202 	mul.w	r2, r3, r2
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	0e5b      	lsrs	r3, r3, #25
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	3301      	adds	r3, #1
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80056da:	683b      	ldr	r3, [r7, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40021000 	.word	0x40021000
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200
 80056f4:	080096b0 	.word	0x080096b0

080056f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005700:	2300      	movs	r3, #0
 8005702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005704:	2300      	movs	r3, #0
 8005706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005710:	2b00      	cmp	r3, #0
 8005712:	d040      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d02a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d825      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005720:	2b60      	cmp	r3, #96	; 0x60
 8005722:	d026      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d821      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d006      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d81d      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d010      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005738:	e018      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800573a:	4b89      	ldr	r3, [pc, #548]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	4a88      	ldr	r2, [pc, #544]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005746:	e015      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fa34 	bl	8006bbc <RCCEx_PLLSAI1_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005758:	e00c      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3320      	adds	r3, #32
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fb1f 	bl	8006da4 <RCCEx_PLLSAI2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800576a:	e003      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	74fb      	strb	r3, [r7, #19]
      break;
 8005770:	e000      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800577a:	4b79      	ldr	r3, [pc, #484]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800577c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005780:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005788:	4975      	ldr	r1, [pc, #468]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005790:	e001      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	7cfb      	ldrb	r3, [r7, #19]
 8005794:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d047      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057aa:	d030      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d82a      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b6:	d02a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057bc:	d824      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c2:	d008      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c8:	d81e      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d2:	d010      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057d4:	e018      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057d6:	4b62      	ldr	r3, [pc, #392]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	4a61      	ldr	r2, [pc, #388]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057e2:	e015      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 f9e6 	bl	8006bbc <RCCEx_PLLSAI1_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057f4:	e00c      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3320      	adds	r3, #32
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fad1 	bl	8006da4 <RCCEx_PLLSAI2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005806:	e003      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	74fb      	strb	r3, [r7, #19]
      break;
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800580e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005816:	4b52      	ldr	r3, [pc, #328]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800581c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	494e      	ldr	r1, [pc, #312]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800582c:	e001      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 809f 	beq.w	800597e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005840:	2300      	movs	r3, #0
 8005842:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005844:	4b46      	ldr	r3, [pc, #280]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585a:	4b41      	ldr	r3, [pc, #260]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800585c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585e:	4a40      	ldr	r2, [pc, #256]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005864:	6593      	str	r3, [r2, #88]	; 0x58
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	60bb      	str	r3, [r7, #8]
 8005870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005872:	2301      	movs	r3, #1
 8005874:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005876:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a3a      	ldr	r2, [pc, #232]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005882:	f7fc fd89 	bl	8002398 <HAL_GetTick>
 8005886:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005888:	e009      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fc fd85 	bl	8002398 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d902      	bls.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	74fb      	strb	r3, [r7, #19]
        break;
 800589c:	e005      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800589e:	4b31      	ldr	r3, [pc, #196]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0ef      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d15b      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058b0:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01f      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d019      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058da:	4b21      	ldr	r3, [pc, #132]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058fa:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d016      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fc fd44 	bl	8002398 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005912:	e00b      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fc fd40 	bl	8002398 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d902      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	74fb      	strb	r3, [r7, #19]
            break;
 800592a:	e006      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0ec      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	4903      	ldr	r1, [pc, #12]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005958:	e008      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	74bb      	strb	r3, [r7, #18]
 800595e:	e005      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005960:	40021000 	.word	0x40021000
 8005964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800596c:	7c7b      	ldrb	r3, [r7, #17]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005972:	4ba0      	ldr	r3, [pc, #640]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	4a9f      	ldr	r2, [pc, #636]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800598a:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f023 0203 	bic.w	r2, r3, #3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	4996      	ldr	r1, [pc, #600]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ac:	4b91      	ldr	r3, [pc, #580]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f023 020c 	bic.w	r2, r3, #12
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	498e      	ldr	r1, [pc, #568]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ce:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059dc:	4985      	ldr	r1, [pc, #532]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059f0:	4b80      	ldr	r3, [pc, #512]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fe:	497d      	ldr	r1, [pc, #500]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a12:	4b78      	ldr	r3, [pc, #480]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a20:	4974      	ldr	r1, [pc, #464]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a34:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a42:	496c      	ldr	r1, [pc, #432]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a56:	4b67      	ldr	r3, [pc, #412]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a64:	4963      	ldr	r1, [pc, #396]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a78:	4b5e      	ldr	r3, [pc, #376]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a86:	495b      	ldr	r1, [pc, #364]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a9a:	4b56      	ldr	r3, [pc, #344]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	4952      	ldr	r1, [pc, #328]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005abc:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	494a      	ldr	r1, [pc, #296]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ade:	4b45      	ldr	r3, [pc, #276]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	4941      	ldr	r1, [pc, #260]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b00:	4b3c      	ldr	r3, [pc, #240]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b06:	f023 0203 	bic.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0e:	4939      	ldr	r1, [pc, #228]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d028      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b22:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b30:	4930      	ldr	r1, [pc, #192]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b40:	d106      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b42:	4b2c      	ldr	r3, [pc, #176]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4c:	60d3      	str	r3, [r2, #12]
 8005b4e:	e011      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 f82b 	bl	8006bbc <RCCEx_PLLSAI1_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d04d      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b88:	d108      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b8a:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b9a:	e012      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b9c:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ba2:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bba:	490e      	ldr	r1, [pc, #56]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bca:	d106      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd6:	60d3      	str	r3, [r2, #12]
 8005bd8:	e020      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be2:	d109      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4a02      	ldr	r2, [pc, #8]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bee:	60d3      	str	r3, [r2, #12]
 8005bf0:	e014      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ffd7 	bl	8006bbc <RCCEx_PLLSAI1_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d028      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c28:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c36:	4947      	ldr	r1, [pc, #284]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c46:	d106      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c48:	4b42      	ldr	r3, [pc, #264]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4a41      	ldr	r2, [pc, #260]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c52:	60d3      	str	r3, [r2, #12]
 8005c54:	e011      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c5e:	d10c      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3304      	adds	r3, #4
 8005c64:	2101      	movs	r1, #1
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 ffa8 	bl	8006bbc <RCCEx_PLLSAI1_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01e      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c86:	4b33      	ldr	r3, [pc, #204]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c96:	492f      	ldr	r1, [pc, #188]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	2102      	movs	r1, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 ff83 	bl	8006bbc <RCCEx_PLLSAI1_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cd0:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd6:	f023 0204 	bic.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce0:	491c      	ldr	r1, [pc, #112]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cf4:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cfa:	f023 0218 	bic.w	r2, r3, #24
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	4913      	ldr	r1, [pc, #76]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d017      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d18:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d28:	490a      	ldr	r1, [pc, #40]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d3a:	d105      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d48:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000

08005d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d6a:	d13e      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d6c:	4bb6      	ldr	r3, [pc, #728]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d76:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7e:	d028      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d86:	f200 86f4 	bhi.w	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d90:	d005      	beq.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d00e      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d9a:	f000 beea 	b.w	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d9e:	4baa      	ldr	r3, [pc, #680]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	f040 86e4 	bne.w	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db2:	61fb      	str	r3, [r7, #28]
      break;
 8005db4:	f000 bedf 	b.w	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005db8:	4ba3      	ldr	r3, [pc, #652]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	f040 86d9 	bne.w	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005dc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005dcc:	61fb      	str	r3, [r7, #28]
      break;
 8005dce:	f000 bed4 	b.w	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dd2:	4b9d      	ldr	r3, [pc, #628]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dde:	f040 86ce 	bne.w	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005de2:	4b9a      	ldr	r3, [pc, #616]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005de4:	61fb      	str	r3, [r7, #28]
      break;
 8005de6:	f000 beca 	b.w	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dea:	4b97      	ldr	r3, [pc, #604]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d036      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d840      	bhi.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d003      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d020      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005e0c:	e039      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e0e:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d116      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e1a:	4b8b      	ldr	r3, [pc, #556]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005e26:	4b88      	ldr	r3, [pc, #544]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	e005      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005e32:	4b85      	ldr	r3, [pc, #532]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	4a84      	ldr	r2, [pc, #528]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e46:	e01f      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
      break;
 8005e4c:	e01c      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e4e:	4b7e      	ldr	r3, [pc, #504]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5a:	d102      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e5c:	4b7d      	ldr	r3, [pc, #500]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005e5e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e60:	e012      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
      break;
 8005e66:	e00f      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e68:	4b77      	ldr	r3, [pc, #476]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e74:	d102      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005e76:	4b78      	ldr	r3, [pc, #480]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005e78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e7a:	e005      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
      break;
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
      break;
 8005e86:	bf00      	nop
    }

    switch(PeriphClk)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e8e:	f000 8606 	beq.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e98:	f200 8673 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea2:	f000 8469 	beq.w	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eac:	f200 8669 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb6:	f000 8531 	beq.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec0:	f200 865f 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eca:	f000 8187 	beq.w	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ed4:	f200 8655 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ede:	f000 80cd 	beq.w	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee8:	f200 864b 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef2:	f000 8430 	beq.w	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	f200 8641 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f06:	f000 83e4 	beq.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f10:	f200 8637 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	f000 80af 	beq.w	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f24:	f200 862d 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	f000 809d 	beq.w	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f38:	f200 8623 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	f000 808b 	beq.w	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4c:	f200 8619 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f56:	f000 8554 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f60:	f200 860f 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6a:	f000 8500 	beq.w	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f74:	f200 8605 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7e:	f000 84a1 	beq.w	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f88:	f200 85fb 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	f000 846c 	beq.w	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b80      	cmp	r3, #128	; 0x80
 8005f98:	f200 85f3 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d84c      	bhi.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 85ec 	beq.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	2b1f      	cmp	r3, #31
 8005fb0:	f200 85e7 	bhi.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	080063d1 	.word	0x080063d1
 8005fc0:	0800643f 	.word	0x0800643f
 8005fc4:	08006b83 	.word	0x08006b83
 8005fc8:	080064d3 	.word	0x080064d3
 8005fcc:	08006b83 	.word	0x08006b83
 8005fd0:	08006b83 	.word	0x08006b83
 8005fd4:	08006b83 	.word	0x08006b83
 8005fd8:	0800654b 	.word	0x0800654b
 8005fdc:	08006b83 	.word	0x08006b83
 8005fe0:	08006b83 	.word	0x08006b83
 8005fe4:	08006b83 	.word	0x08006b83
 8005fe8:	08006b83 	.word	0x08006b83
 8005fec:	08006b83 	.word	0x08006b83
 8005ff0:	08006b83 	.word	0x08006b83
 8005ff4:	08006b83 	.word	0x08006b83
 8005ff8:	080065cf 	.word	0x080065cf
 8005ffc:	08006b83 	.word	0x08006b83
 8006000:	08006b83 	.word	0x08006b83
 8006004:	08006b83 	.word	0x08006b83
 8006008:	08006b83 	.word	0x08006b83
 800600c:	08006b83 	.word	0x08006b83
 8006010:	08006b83 	.word	0x08006b83
 8006014:	08006b83 	.word	0x08006b83
 8006018:	08006b83 	.word	0x08006b83
 800601c:	08006b83 	.word	0x08006b83
 8006020:	08006b83 	.word	0x08006b83
 8006024:	08006b83 	.word	0x08006b83
 8006028:	08006b83 	.word	0x08006b83
 800602c:	08006b83 	.word	0x08006b83
 8006030:	08006b83 	.word	0x08006b83
 8006034:	08006b83 	.word	0x08006b83
 8006038:	08006651 	.word	0x08006651
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	f000 83e8 	beq.w	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006044:	f000 bd9d 	b.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006048:	40021000 	.word	0x40021000
 800604c:	0003d090 	.word	0x0003d090
 8006050:	080096b0 	.word	0x080096b0
 8006054:	00f42400 	.word	0x00f42400
 8006058:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800605c:	69b9      	ldr	r1, [r7, #24]
 800605e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006062:	f000 ff93 	bl	8006f8c <RCCEx_GetSAIxPeriphCLKFreq>
 8006066:	61f8      	str	r0, [r7, #28]
      break;
 8006068:	f000 bd8e 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800606c:	69b9      	ldr	r1, [r7, #24]
 800606e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006072:	f000 ff8b 	bl	8006f8c <RCCEx_GetSAIxPeriphCLKFreq>
 8006076:	61f8      	str	r0, [r7, #28]
      break;
 8006078:	f000 bd86 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800607c:	4b9a      	ldr	r3, [pc, #616]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800608e:	d015      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006096:	f200 8092 	bhi.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a0:	d029      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a8:	f200 8089 	bhi.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d07b      	beq.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060b8:	d04a      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80060ba:	e080      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80060bc:	4b8a      	ldr	r3, [pc, #552]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d17d      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80060c8:	4b87      	ldr	r3, [pc, #540]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80060d4:	4b84      	ldr	r3, [pc, #528]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	e005      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80060e0:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	4a7f      	ldr	r2, [pc, #508]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80060ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f2:	61fb      	str	r3, [r7, #28]
          break;
 80060f4:	e066      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060f6:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006102:	d162      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006104:	4b78      	ldr	r3, [pc, #480]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800610c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006110:	d15b      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006112:	4b75      	ldr	r3, [pc, #468]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	0a1b      	lsrs	r3, r3, #8
 8006118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	fb03 f202 	mul.w	r2, r3, r2
 8006126:	4b70      	ldr	r3, [pc, #448]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	3301      	adds	r3, #1
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006138:	4b6b      	ldr	r3, [pc, #428]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	0d5b      	lsrs	r3, r3, #21
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	3301      	adds	r3, #1
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	fbb2 f3f3 	udiv	r3, r2, r3
 800614c:	61fb      	str	r3, [r7, #28]
          break;
 800614e:	e03c      	b.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006150:	4b65      	ldr	r3, [pc, #404]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615c:	d138      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800615e:	4b62      	ldr	r3, [pc, #392]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616a:	d131      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800616c:	4b5e      	ldr	r3, [pc, #376]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	fb03 f202 	mul.w	r2, r3, r2
 8006180:	4b59      	ldr	r3, [pc, #356]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	3301      	adds	r3, #1
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006192:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	0d5b      	lsrs	r3, r3, #21
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	3301      	adds	r3, #1
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	61fb      	str	r3, [r7, #28]
          break;
 80061a8:	e012      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80061aa:	4b4f      	ldr	r3, [pc, #316]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d10e      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80061b8:	4b4d      	ldr	r3, [pc, #308]	; (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80061ba:	61fb      	str	r3, [r7, #28]
          break;
 80061bc:	e00b      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80061be:	bf00      	nop
 80061c0:	f000 bce2 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061c4:	bf00      	nop
 80061c6:	f000 bcdf 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061ca:	bf00      	nop
 80061cc:	f000 bcdc 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061d0:	bf00      	nop
 80061d2:	f000 bcd9 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061d6:	bf00      	nop
        break;
 80061d8:	f000 bcd6 	b.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80061dc:	4b42      	ldr	r3, [pc, #264]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ea:	d13d      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061ec:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061f8:	f040 84c5 	bne.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80061fc:	4b3a      	ldr	r3, [pc, #232]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	f040 84bd 	bne.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006216:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	fb03 f202 	mul.w	r2, r3, r2
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	3301      	adds	r3, #1
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006232:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	0edb      	lsrs	r3, r3, #27
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006250:	2311      	movs	r3, #17
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e001      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006256:	2307      	movs	r3, #7
 8006258:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	61fb      	str	r3, [r7, #28]
      break;
 8006264:	f000 bc8f 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006268:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800627a:	d016      	beq.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006282:	f200 809b 	bhi.w	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800628c:	d032      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006294:	f200 8092 	bhi.w	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8084 	beq.w	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062a6:	d052      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80062a8:	e088      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	f040 8084 	bne.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	e005      	b.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	4a03      	ldr	r2, [pc, #12]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80062de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e2:	61fb      	str	r3, [r7, #28]
          break;
 80062e4:	e06c      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000
 80062ec:	080096b0 	.word	0x080096b0
 80062f0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80062f4:	4ba5      	ldr	r3, [pc, #660]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006300:	d160      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006302:	4ba2      	ldr	r3, [pc, #648]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630e:	d159      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006310:	4b9e      	ldr	r3, [pc, #632]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	fb03 f202 	mul.w	r2, r3, r2
 8006324:	4b99      	ldr	r3, [pc, #612]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	3301      	adds	r3, #1
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006336:	4b95      	ldr	r3, [pc, #596]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	0d5b      	lsrs	r3, r3, #21
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	3301      	adds	r3, #1
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	61fb      	str	r3, [r7, #28]
          break;
 800634c:	e03a      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800634e:	4b8f      	ldr	r3, [pc, #572]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635a:	d135      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800635c:	4b8b      	ldr	r3, [pc, #556]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006368:	d12e      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800636a:	4b88      	ldr	r3, [pc, #544]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006374:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	fb03 f202 	mul.w	r2, r3, r2
 800637e:	4b83      	ldr	r3, [pc, #524]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	3301      	adds	r3, #1
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006390:	4b7e      	ldr	r3, [pc, #504]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	0d5b      	lsrs	r3, r3, #21
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	3301      	adds	r3, #1
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	61fb      	str	r3, [r7, #28]
          break;
 80063a6:	e00f      	b.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80063a8:	4b78      	ldr	r3, [pc, #480]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d10a      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80063b6:	4b76      	ldr	r3, [pc, #472]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80063b8:	61fb      	str	r3, [r7, #28]
          break;
 80063ba:	e007      	b.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80063bc:	bf00      	nop
 80063be:	e3e2      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063c0:	bf00      	nop
 80063c2:	e3e0      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063c4:	bf00      	nop
 80063c6:	e3de      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063c8:	bf00      	nop
 80063ca:	e3dc      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063cc:	bf00      	nop
      break;
 80063ce:	e3da      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80063d0:	4b6e      	ldr	r3, [pc, #440]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d827      	bhi.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006401 	.word	0x08006401
 80063f0:	08006409 	.word	0x08006409
 80063f4:	0800641d 	.word	0x0800641d
          frequency = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7ff f8a8 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 80063fc:	61f8      	str	r0, [r7, #28]
          break;
 80063fe:	e01d      	b.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006400:	f7fe fff6 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006404:	61f8      	str	r0, [r7, #28]
          break;
 8006406:	e019      	b.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006408:	4b60      	ldr	r3, [pc, #384]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006414:	d10f      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006416:	4b5f      	ldr	r3, [pc, #380]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006418:	61fb      	str	r3, [r7, #28]
          break;
 800641a:	e00c      	b.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800641c:	4b5b      	ldr	r3, [pc, #364]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d107      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	61fb      	str	r3, [r7, #28]
          break;
 8006430:	e003      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006432:	bf00      	nop
 8006434:	e3a8      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006436:	bf00      	nop
 8006438:	e3a6      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643a:	bf00      	nop
        break;
 800643c:	e3a4      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800643e:	4b53      	ldr	r3, [pc, #332]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b0c      	cmp	r3, #12
 800644e:	d83a      	bhi.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006450:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	0800648d 	.word	0x0800648d
 800645c:	080064c7 	.word	0x080064c7
 8006460:	080064c7 	.word	0x080064c7
 8006464:	080064c7 	.word	0x080064c7
 8006468:	08006495 	.word	0x08006495
 800646c:	080064c7 	.word	0x080064c7
 8006470:	080064c7 	.word	0x080064c7
 8006474:	080064c7 	.word	0x080064c7
 8006478:	0800649d 	.word	0x0800649d
 800647c:	080064c7 	.word	0x080064c7
 8006480:	080064c7 	.word	0x080064c7
 8006484:	080064c7 	.word	0x080064c7
 8006488:	080064b1 	.word	0x080064b1
          frequency = HAL_RCC_GetPCLK1Freq();
 800648c:	f7ff f848 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006490:	61f8      	str	r0, [r7, #28]
          break;
 8006492:	e01d      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006494:	f7fe ffac 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006498:	61f8      	str	r0, [r7, #28]
          break;
 800649a:	e019      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800649c:	4b3b      	ldr	r3, [pc, #236]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d10f      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80064aa:	4b3a      	ldr	r3, [pc, #232]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064ac:	61fb      	str	r3, [r7, #28]
          break;
 80064ae:	e00c      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064b0:	4b36      	ldr	r3, [pc, #216]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d107      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 80064be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c2:	61fb      	str	r3, [r7, #28]
          break;
 80064c4:	e003      	b.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80064c6:	bf00      	nop
 80064c8:	e35e      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ca:	bf00      	nop
 80064cc:	e35c      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ce:	bf00      	nop
        break;
 80064d0:	e35a      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064d2:	4b2e      	ldr	r3, [pc, #184]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	d021      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b30      	cmp	r3, #48	; 0x30
 80064e8:	d829      	bhi.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d011      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d823      	bhi.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d004      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006502:	e01c      	b.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006504:	f7ff f80c 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006508:	61f8      	str	r0, [r7, #28]
          break;
 800650a:	e01d      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800650c:	f7fe ff70 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006510:	61f8      	str	r0, [r7, #28]
          break;
 8006512:	e019      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006520:	d10f      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006522:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006524:	61fb      	str	r3, [r7, #28]
          break;
 8006526:	e00c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006528:	4b18      	ldr	r3, [pc, #96]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d107      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653a:	61fb      	str	r3, [r7, #28]
          break;
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800653e:	bf00      	nop
 8006540:	e322      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006542:	bf00      	nop
 8006544:	e320      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006546:	bf00      	nop
        break;
 8006548:	e31e      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2bc0      	cmp	r3, #192	; 0xc0
 800655a:	d027      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2bc0      	cmp	r3, #192	; 0xc0
 8006560:	d82f      	bhi.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d017      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d829      	bhi.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d004      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800657a:	e022      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe ffd0 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006580:	61f8      	str	r0, [r7, #28]
          break;
 8006582:	e023      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006584:	f7fe ff34 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006588:	61f8      	str	r0, [r7, #28]
          break;
 800658a:	e01f      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800658c:	40021000 	.word	0x40021000
 8006590:	02dc6c00 	.word	0x02dc6c00
 8006594:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006598:	4b9b      	ldr	r3, [pc, #620]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a4:	d10f      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80065a6:	4b99      	ldr	r3, [pc, #612]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80065a8:	61fb      	str	r3, [r7, #28]
          break;
 80065aa:	e00c      	b.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065ac:	4b96      	ldr	r3, [pc, #600]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d107      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065be:	61fb      	str	r3, [r7, #28]
          break;
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80065c2:	bf00      	nop
 80065c4:	e2e0      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065c6:	bf00      	nop
 80065c8:	e2de      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065ca:	bf00      	nop
        break;
 80065cc:	e2dc      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80065ce:	4b8e      	ldr	r3, [pc, #568]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e0:	d025      	beq.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e8:	d82c      	bhi.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f0:	d013      	beq.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f8:	d824      	bhi.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006606:	d004      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006608:	e01c      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800660a:	f7fe ff89 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 800660e:	61f8      	str	r0, [r7, #28]
          break;
 8006610:	e01d      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006612:	f7fe feed 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006616:	61f8      	str	r0, [r7, #28]
          break;
 8006618:	e019      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800661a:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d10f      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006628:	4b78      	ldr	r3, [pc, #480]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800662a:	61fb      	str	r3, [r7, #28]
          break;
 800662c:	e00c      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800662e:	4b76      	ldr	r3, [pc, #472]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d107      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800663c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006640:	61fb      	str	r3, [r7, #28]
          break;
 8006642:	e003      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006644:	bf00      	nop
 8006646:	e29f      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006648:	bf00      	nop
 800664a:	e29d      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800664c:	bf00      	nop
        break;
 800664e:	e29b      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006650:	4b6d      	ldr	r3, [pc, #436]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006656:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006662:	d025      	beq.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800666a:	d82c      	bhi.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006672:	d013      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667a:	d824      	bhi.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006688:	d004      	beq.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800668a:	e01c      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fe ff48 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006690:	61f8      	str	r0, [r7, #28]
          break;
 8006692:	e01d      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006694:	f7fe feac 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006698:	61f8      	str	r0, [r7, #28]
          break;
 800669a:	e019      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800669c:	4b5a      	ldr	r3, [pc, #360]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a8:	d10f      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80066aa:	4b58      	ldr	r3, [pc, #352]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80066ac:	61fb      	str	r3, [r7, #28]
          break;
 80066ae:	e00c      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066b0:	4b55      	ldr	r3, [pc, #340]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d107      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80066be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c2:	61fb      	str	r3, [r7, #28]
          break;
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80066c6:	bf00      	nop
 80066c8:	e25e      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066ca:	bf00      	nop
 80066cc:	e25c      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066ce:	bf00      	nop
        break;
 80066d0:	e25a      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80066d2:	4b4d      	ldr	r3, [pc, #308]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e4:	d007      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066ec:	d12f      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80066ee:	f7fe fe7f 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80066f2:	61f8      	str	r0, [r7, #28]
          break;
 80066f4:	e02e      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80066f6:	4b44      	ldr	r3, [pc, #272]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006702:	d126      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006704:	4b40      	ldr	r3, [pc, #256]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006710:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	fb03 f202 	mul.w	r2, r3, r2
 8006724:	4b38      	ldr	r3, [pc, #224]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	3301      	adds	r3, #1
 8006730:	fbb2 f3f3 	udiv	r3, r2, r3
 8006734:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006736:	4b34      	ldr	r3, [pc, #208]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	0e5b      	lsrs	r3, r3, #25
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	3301      	adds	r3, #1
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	fbb2 f3f3 	udiv	r3, r2, r3
 800674a:	61fb      	str	r3, [r7, #28]
          break;
 800674c:	e001      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800674e:	bf00      	nop
 8006750:	e21a      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006752:	bf00      	nop
        break;
 8006754:	e218      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006756:	4b2c      	ldr	r3, [pc, #176]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006768:	f7fe fef0 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 800676c:	61f8      	str	r0, [r7, #28]
        break;
 800676e:	e20b      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006770:	f7fe fe3e 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006774:	61f8      	str	r0, [r7, #28]
        break;
 8006776:	e207      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006778:	4b23      	ldr	r3, [pc, #140]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800677a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800677e:	f003 0318 	and.w	r3, r3, #24
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b10      	cmp	r3, #16
 8006788:	d010      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b10      	cmp	r3, #16
 800678e:	d834      	bhi.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b08      	cmp	r3, #8
 800679a:	d024      	beq.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800679c:	e02d      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067a4:	f000 fbf2 	bl	8006f8c <RCCEx_GetSAIxPeriphCLKFreq>
 80067a8:	61f8      	str	r0, [r7, #28]
          break;
 80067aa:	e02b      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d122      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80067c4:	4b10      	ldr	r3, [pc, #64]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	e005      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80067de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e2:	61fb      	str	r3, [r7, #28]
          break;
 80067e4:	e00b      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f2:	d106      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80067f6:	61fb      	str	r3, [r7, #28]
          break;
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80067fa:	bf00      	nop
 80067fc:	e1c4      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067fe:	bf00      	nop
 8006800:	e1c2      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006802:	bf00      	nop
        break;
 8006804:	e1c0      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	00f42400 	.word	0x00f42400
 8006810:	080096b0 	.word	0x080096b0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006814:	4b96      	ldr	r3, [pc, #600]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006826:	d013      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682e:	d819      	bhi.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683c:	d004      	beq.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800683e:	e011      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fe fe6e 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006844:	61f8      	str	r0, [r7, #28]
          break;
 8006846:	e010      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006848:	f7fe fdd2 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800684c:	61f8      	str	r0, [r7, #28]
          break;
 800684e:	e00c      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006850:	4b87      	ldr	r3, [pc, #540]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685c:	d104      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800685e:	4b85      	ldr	r3, [pc, #532]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006860:	61fb      	str	r3, [r7, #28]
          break;
 8006862:	e001      	b.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006864:	bf00      	nop
 8006866:	e18f      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006868:	bf00      	nop
        break;
 800686a:	e18d      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800686c:	4b80      	ldr	r3, [pc, #512]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687e:	d013      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006886:	d819      	bhi.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006894:	d004      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fe fe42 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 800689c:	61f8      	str	r0, [r7, #28]
          break;
 800689e:	e010      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80068a0:	f7fe fda6 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80068a4:	61f8      	str	r0, [r7, #28]
          break;
 80068a6:	e00c      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a8:	4b71      	ldr	r3, [pc, #452]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b4:	d104      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80068b6:	4b6f      	ldr	r3, [pc, #444]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068b8:	61fb      	str	r3, [r7, #28]
          break;
 80068ba:	e001      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80068bc:	bf00      	nop
 80068be:	e163      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068c0:	bf00      	nop
        break;
 80068c2:	e161      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80068c4:	4b6a      	ldr	r3, [pc, #424]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d6:	d013      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068de:	d819      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ec:	d004      	beq.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80068ee:	e011      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe fe16 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 80068f4:	61f8      	str	r0, [r7, #28]
          break;
 80068f6:	e010      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80068f8:	f7fe fd7a 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80068fc:	61f8      	str	r0, [r7, #28]
          break;
 80068fe:	e00c      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006900:	4b5b      	ldr	r3, [pc, #364]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800690e:	4b59      	ldr	r3, [pc, #356]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006910:	61fb      	str	r3, [r7, #28]
          break;
 8006912:	e001      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006914:	bf00      	nop
 8006916:	e137      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006918:	bf00      	nop
        break;
 800691a:	e135      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800691c:	4b54      	ldr	r3, [pc, #336]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800691e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d011      	beq.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d818      	bhi.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d004      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006940:	e011      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006942:	f7fe fded 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006946:	61f8      	str	r0, [r7, #28]
          break;
 8006948:	e010      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800694a:	f7fe fd51 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800694e:	61f8      	str	r0, [r7, #28]
          break;
 8006950:	e00c      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d104      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006960:	4b44      	ldr	r3, [pc, #272]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006962:	61fb      	str	r3, [r7, #28]
          break;
 8006964:	e001      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006966:	bf00      	nop
 8006968:	e10e      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800696a:	bf00      	nop
        break;
 800696c:	e10c      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800696e:	4b40      	ldr	r3, [pc, #256]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006974:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006980:	d02c      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006988:	d833      	bhi.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006990:	d01a      	beq.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006998:	d82b      	bhi.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80069a8:	e023      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069aa:	f7fe fdb9 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 80069ae:	61f8      	str	r0, [r7, #28]
          break;
 80069b0:	e026      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d11a      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80069c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069c4:	61fb      	str	r3, [r7, #28]
          break;
 80069c6:	e016      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069c8:	4b29      	ldr	r3, [pc, #164]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d4:	d111      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80069d6:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80069d8:	61fb      	str	r3, [r7, #28]
          break;
 80069da:	e00e      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069dc:	4b24      	ldr	r3, [pc, #144]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d109      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80069ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ee:	61fb      	str	r3, [r7, #28]
          break;
 80069f0:	e005      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80069f2:	bf00      	nop
 80069f4:	e0c8      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069f6:	bf00      	nop
 80069f8:	e0c6      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069fa:	bf00      	nop
 80069fc:	e0c4      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069fe:	bf00      	nop
        break;
 8006a00:	e0c2      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a02:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a14:	d030      	beq.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a1c:	d837      	bhi.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a24:	d01a      	beq.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a2c:	d82f      	bhi.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006a3c:	e027      	b.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a3e:	f7fe fd6f 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006a42:	61f8      	str	r0, [r7, #28]
          break;
 8006a44:	e02a      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d11e      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006a54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a58:	61fb      	str	r3, [r7, #28]
          break;
 8006a5a:	e01a      	b.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a68:	d115      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006a6a:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a6c:	61fb      	str	r3, [r7, #28]
          break;
 8006a6e:	e012      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006a70:	40021000 	.word	0x40021000
 8006a74:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a78:	4b46      	ldr	r3, [pc, #280]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d109      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8a:	61fb      	str	r3, [r7, #28]
          break;
 8006a8c:	e005      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006a8e:	bf00      	nop
 8006a90:	e07a      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a92:	bf00      	nop
 8006a94:	e078      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a96:	bf00      	nop
 8006a98:	e076      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a9a:	bf00      	nop
        break;
 8006a9c:	e074      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aa4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab0:	d02c      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab8:	d855      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac6:	d004      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006ac8:	e04d      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006aca:	f7fe fc91 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006ace:	61f8      	str	r0, [r7, #28]
          break;
 8006ad0:	e04e      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006ad2:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d145      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006ade:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	e005      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006af6:	4b27      	ldr	r3, [pc, #156]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006afc:	0a1b      	lsrs	r3, r3, #8
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	4a25      	ldr	r2, [pc, #148]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b08:	61fb      	str	r3, [r7, #28]
          break;
 8006b0a:	e02e      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b18:	d129      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b26:	d122      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b32:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	fb03 f202 	mul.w	r2, r3, r2
 8006b3c:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	3301      	adds	r3, #1
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	0d5b      	lsrs	r3, r3, #21
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	3301      	adds	r3, #1
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b62:	61fb      	str	r3, [r7, #28]
          break;
 8006b64:	e003      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006b66:	bf00      	nop
 8006b68:	e00e      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b6a:	bf00      	nop
 8006b6c:	e00c      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b6e:	bf00      	nop
        break;
 8006b70:	e00a      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b72:	bf00      	nop
 8006b74:	e008      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b76:	bf00      	nop
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b86:	bf00      	nop
    }
  }

  return(frequency);
 8006b88:	69fb      	ldr	r3, [r7, #28]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40021000 	.word	0x40021000
 8006b98:	080096b0 	.word	0x080096b0

08006b9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ba6:	f043 0304 	orr.w	r3, r3, #4
 8006baa:	6013      	str	r3, [r2, #0]
}
 8006bac:	bf00      	nop
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40021000 	.word	0x40021000

08006bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bca:	4b72      	ldr	r3, [pc, #456]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006bd6:	4b6f      	ldr	r3, [pc, #444]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0203 	and.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d103      	bne.n	8006bee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d142      	bne.n	8006c74 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e03f      	b.n	8006c74 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d018      	beq.n	8006c2e <RCCEx_PLLSAI1_Config+0x72>
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d825      	bhi.n	8006c4c <RCCEx_PLLSAI1_Config+0x90>
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d002      	beq.n	8006c0a <RCCEx_PLLSAI1_Config+0x4e>
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d009      	beq.n	8006c1c <RCCEx_PLLSAI1_Config+0x60>
 8006c08:	e020      	b.n	8006c4c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c0a:	4b62      	ldr	r3, [pc, #392]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d11d      	bne.n	8006c52 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c1a:	e01a      	b.n	8006c52 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c1c:	4b5d      	ldr	r3, [pc, #372]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d116      	bne.n	8006c56 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c2c:	e013      	b.n	8006c56 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c2e:	4b59      	ldr	r3, [pc, #356]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10f      	bne.n	8006c5a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c3a:	4b56      	ldr	r3, [pc, #344]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c4a:	e006      	b.n	8006c5a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c50:	e004      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d108      	bne.n	8006c74 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006c62:	4b4c      	ldr	r3, [pc, #304]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f023 0203 	bic.w	r2, r3, #3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4949      	ldr	r1, [pc, #292]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 8086 	bne.w	8006d88 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c7c:	4b45      	ldr	r3, [pc, #276]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a44      	ldr	r2, [pc, #272]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c88:	f7fb fb86 	bl	8002398 <HAL_GetTick>
 8006c8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c8e:	e009      	b.n	8006ca4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c90:	f7fb fb82 	bl	8002398 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d902      	bls.n	8006ca4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ca2:	e005      	b.n	8006cb0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ef      	bne.n	8006c90 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d168      	bne.n	8006d88 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d113      	bne.n	8006ce4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cbc:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	4b35      	ldr	r3, [pc, #212]	; (8006d98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6892      	ldr	r2, [r2, #8]
 8006cc8:	0211      	lsls	r1, r2, #8
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68d2      	ldr	r2, [r2, #12]
 8006cce:	06d2      	lsls	r2, r2, #27
 8006cd0:	4311      	orrs	r1, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6852      	ldr	r2, [r2, #4]
 8006cd6:	3a01      	subs	r2, #1
 8006cd8:	0112      	lsls	r2, r2, #4
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	492d      	ldr	r1, [pc, #180]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	610b      	str	r3, [r1, #16]
 8006ce2:	e02d      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d115      	bne.n	8006d16 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cea:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	4b2b      	ldr	r3, [pc, #172]	; (8006d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6892      	ldr	r2, [r2, #8]
 8006cf6:	0211      	lsls	r1, r2, #8
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6912      	ldr	r2, [r2, #16]
 8006cfc:	0852      	lsrs	r2, r2, #1
 8006cfe:	3a01      	subs	r2, #1
 8006d00:	0552      	lsls	r2, r2, #21
 8006d02:	4311      	orrs	r1, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6852      	ldr	r2, [r2, #4]
 8006d08:	3a01      	subs	r2, #1
 8006d0a:	0112      	lsls	r2, r2, #4
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	4921      	ldr	r1, [pc, #132]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	610b      	str	r3, [r1, #16]
 8006d14:	e014      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d16:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6892      	ldr	r2, [r2, #8]
 8006d22:	0211      	lsls	r1, r2, #8
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6952      	ldr	r2, [r2, #20]
 8006d28:	0852      	lsrs	r2, r2, #1
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	0652      	lsls	r2, r2, #25
 8006d2e:	4311      	orrs	r1, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6852      	ldr	r2, [r2, #4]
 8006d34:	3a01      	subs	r2, #1
 8006d36:	0112      	lsls	r2, r2, #4
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	4916      	ldr	r1, [pc, #88]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4c:	f7fb fb24 	bl	8002398 <HAL_GetTick>
 8006d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d52:	e009      	b.n	8006d68 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d54:	f7fb fb20 	bl	8002398 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d902      	bls.n	8006d68 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
          break;
 8006d66:	e005      	b.n	8006d74 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0ef      	beq.n	8006d54 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	4904      	ldr	r1, [pc, #16]	; (8006d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40021000 	.word	0x40021000
 8006d98:	07ff800f 	.word	0x07ff800f
 8006d9c:	ff9f800f 	.word	0xff9f800f
 8006da0:	f9ff800f 	.word	0xf9ff800f

08006da4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006db2:	4b72      	ldr	r3, [pc, #456]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00e      	beq.n	8006ddc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006dbe:	4b6f      	ldr	r3, [pc, #444]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0203 	and.w	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d103      	bne.n	8006dd6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d142      	bne.n	8006e5c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	e03f      	b.n	8006e5c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d018      	beq.n	8006e16 <RCCEx_PLLSAI2_Config+0x72>
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d825      	bhi.n	8006e34 <RCCEx_PLLSAI2_Config+0x90>
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d002      	beq.n	8006df2 <RCCEx_PLLSAI2_Config+0x4e>
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d009      	beq.n	8006e04 <RCCEx_PLLSAI2_Config+0x60>
 8006df0:	e020      	b.n	8006e34 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006df2:	4b62      	ldr	r3, [pc, #392]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d11d      	bne.n	8006e3a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e02:	e01a      	b.n	8006e3a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e04:	4b5d      	ldr	r3, [pc, #372]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d116      	bne.n	8006e3e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e14:	e013      	b.n	8006e3e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e16:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10f      	bne.n	8006e42 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e22:	4b56      	ldr	r3, [pc, #344]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e32:	e006      	b.n	8006e42 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
      break;
 8006e38:	e004      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e3a:	bf00      	nop
 8006e3c:	e002      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e42:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d108      	bne.n	8006e5c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006e4a:	4b4c      	ldr	r3, [pc, #304]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f023 0203 	bic.w	r2, r3, #3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4949      	ldr	r1, [pc, #292]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 8086 	bne.w	8006f70 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e64:	4b45      	ldr	r3, [pc, #276]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a44      	ldr	r2, [pc, #272]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e70:	f7fb fa92 	bl	8002398 <HAL_GetTick>
 8006e74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e76:	e009      	b.n	8006e8c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e78:	f7fb fa8e 	bl	8002398 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d902      	bls.n	8006e8c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	73fb      	strb	r3, [r7, #15]
        break;
 8006e8a:	e005      	b.n	8006e98 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ef      	bne.n	8006e78 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d168      	bne.n	8006f70 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d113      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ea4:	4b35      	ldr	r3, [pc, #212]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6892      	ldr	r2, [r2, #8]
 8006eb0:	0211      	lsls	r1, r2, #8
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68d2      	ldr	r2, [r2, #12]
 8006eb6:	06d2      	lsls	r2, r2, #27
 8006eb8:	4311      	orrs	r1, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6852      	ldr	r2, [r2, #4]
 8006ebe:	3a01      	subs	r2, #1
 8006ec0:	0112      	lsls	r2, r2, #4
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	492d      	ldr	r1, [pc, #180]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	614b      	str	r3, [r1, #20]
 8006eca:	e02d      	b.n	8006f28 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d115      	bne.n	8006efe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ed2:	4b2a      	ldr	r3, [pc, #168]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	4b2b      	ldr	r3, [pc, #172]	; (8006f84 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6892      	ldr	r2, [r2, #8]
 8006ede:	0211      	lsls	r1, r2, #8
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6912      	ldr	r2, [r2, #16]
 8006ee4:	0852      	lsrs	r2, r2, #1
 8006ee6:	3a01      	subs	r2, #1
 8006ee8:	0552      	lsls	r2, r2, #21
 8006eea:	4311      	orrs	r1, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6852      	ldr	r2, [r2, #4]
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	0112      	lsls	r2, r2, #4
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	4921      	ldr	r1, [pc, #132]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	614b      	str	r3, [r1, #20]
 8006efc:	e014      	b.n	8006f28 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006efe:	4b1f      	ldr	r3, [pc, #124]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6892      	ldr	r2, [r2, #8]
 8006f0a:	0211      	lsls	r1, r2, #8
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6952      	ldr	r2, [r2, #20]
 8006f10:	0852      	lsrs	r2, r2, #1
 8006f12:	3a01      	subs	r2, #1
 8006f14:	0652      	lsls	r2, r2, #25
 8006f16:	4311      	orrs	r1, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6852      	ldr	r2, [r2, #4]
 8006f1c:	3a01      	subs	r2, #1
 8006f1e:	0112      	lsls	r2, r2, #4
 8006f20:	430a      	orrs	r2, r1
 8006f22:	4916      	ldr	r1, [pc, #88]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f34:	f7fb fa30 	bl	8002398 <HAL_GetTick>
 8006f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f3a:	e009      	b.n	8006f50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f3c:	f7fb fa2c 	bl	8002398 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d902      	bls.n	8006f50 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8006f4e:	e005      	b.n	8006f5c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0ef      	beq.n	8006f3c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f62:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	4904      	ldr	r1, [pc, #16]	; (8006f7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	07ff800f 	.word	0x07ff800f
 8006f84:	ff9f800f 	.word	0xff9f800f
 8006f88:	f9ff800f 	.word	0xf9ff800f

08006f8c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	; 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	d10b      	bne.n	8006fc2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006faa:	4b7e      	ldr	r3, [pc, #504]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fb0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006fb4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b60      	cmp	r3, #96	; 0x60
 8006fba:	d112      	bne.n	8006fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006fbc:	4b7a      	ldr	r3, [pc, #488]	; (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e00f      	b.n	8006fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d10b      	bne.n	8006fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006fca:	4b76      	ldr	r3, [pc, #472]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fdc:	d101      	bne.n	8006fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006fde:	4b72      	ldr	r3, [pc, #456]	; (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006fe0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f040 80d6 	bne.w	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b40      	cmp	r3, #64	; 0x40
 8006ff2:	d003      	beq.n	8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ffa:	d13b      	bne.n	8007074 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006ffc:	4b69      	ldr	r3, [pc, #420]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007008:	f040 80c4 	bne.w	8007194 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800700c:	4b65      	ldr	r3, [pc, #404]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80bd 	beq.w	8007194 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800701a:	4b62      	ldr	r3, [pc, #392]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	3301      	adds	r3, #1
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800702e:	4b5d      	ldr	r3, [pc, #372]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007038:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800703a:	4b5a      	ldr	r3, [pc, #360]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	0edb      	lsrs	r3, r3, #27
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800704c:	4b55      	ldr	r3, [pc, #340]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007058:	2311      	movs	r3, #17
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e001      	b.n	8007062 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800705e:	2307      	movs	r3, #7
 8007060:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	fb03 f202 	mul.w	r2, r3, r2
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007070:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007072:	e08f      	b.n	8007194 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d13a      	bne.n	80070f0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800707a:	4b4a      	ldr	r3, [pc, #296]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007086:	f040 8086 	bne.w	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800708a:	4b46      	ldr	r3, [pc, #280]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d07f      	beq.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007096:	4b43      	ldr	r3, [pc, #268]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	3301      	adds	r3, #1
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80070aa:	4b3e      	ldr	r3, [pc, #248]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80070b6:	4b3b      	ldr	r3, [pc, #236]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	0edb      	lsrs	r3, r3, #27
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80070c8:	4b36      	ldr	r3, [pc, #216]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80070d4:	2311      	movs	r3, #17
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e001      	b.n	80070de <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80070da:	2307      	movs	r3, #7
 80070dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	fb03 f202 	mul.w	r2, r3, r2
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ec:	61fb      	str	r3, [r7, #28]
 80070ee:	e052      	b.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d003      	beq.n	80070fe <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fc:	d109      	bne.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070fe:	4b29      	ldr	r3, [pc, #164]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d144      	bne.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800710e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007110:	e041      	b.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b20      	cmp	r3, #32
 8007116:	d003      	beq.n	8007120 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711e:	d13a      	bne.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007120:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712c:	d133      	bne.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800712e:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02d      	beq.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800713a:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	3301      	adds	r3, #1
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007158:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	0edb      	lsrs	r3, r3, #27
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007178:	2311      	movs	r3, #17
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e001      	b.n	8007182 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800717e:	2307      	movs	r3, #7
 8007180:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	fb03 f202 	mul.w	r2, r3, r2
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	e000      	b.n	8007196 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007194:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007196:	69fb      	ldr	r3, [r7, #28]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3724      	adds	r7, #36	; 0x24
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40021000 	.word	0x40021000
 80071a8:	001fff68 	.word	0x001fff68
 80071ac:	00f42400 	.word	0x00f42400

080071b0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d904      	bls.n	80071ce <HAL_SAI_InitProtocol+0x1e>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	3b03      	subs	r3, #3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d812      	bhi.n	80071f2 <HAL_SAI_InitProtocol+0x42>
 80071cc:	e008      	b.n	80071e0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f9fb 	bl	80075d0 <SAI_InitI2S>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]
      break;
 80071de:	e00b      	b.n	80071f8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 faa4 	bl	8007734 <SAI_InitPCM>
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]
      break;
 80071f0:	e002      	b.n	80071f8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	75fb      	strb	r3, [r7, #23]
      break;
 80071f6:	bf00      	nop
  }

  if (status == HAL_OK)
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d104      	bne.n	8007208 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f808 	bl	8007214 <HAL_SAI_Init>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e1c7      	b.n	80075b6 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800722c:	2b01      	cmp	r3, #1
 800722e:	d10e      	bne.n	800724e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a81      	ldr	r2, [pc, #516]	; (800743c <HAL_SAI_Init+0x228>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d107      	bne.n	800724a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800723e:	2b01      	cmp	r3, #1
 8007240:	d103      	bne.n	800724a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e1b3      	b.n	80075b6 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fa ff0e 	bl	8002084 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fae5 	bl	8007838 <SAI_Disable>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e19e      	b.n	80075b6 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d00c      	beq.n	80072a2 <HAL_SAI_Init+0x8e>
 8007288:	2b02      	cmp	r3, #2
 800728a:	d80d      	bhi.n	80072a8 <HAL_SAI_Init+0x94>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_SAI_Init+0x82>
 8007290:	2b01      	cmp	r3, #1
 8007292:	d003      	beq.n	800729c <HAL_SAI_Init+0x88>
 8007294:	e008      	b.n	80072a8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800729a:	e008      	b.n	80072ae <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800729c:	2310      	movs	r3, #16
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072a0:	e005      	b.n	80072ae <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072a2:	2320      	movs	r3, #32
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072a6:	e002      	b.n	80072ae <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072ac:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d81d      	bhi.n	80072f2 <HAL_SAI_Init+0xde>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <HAL_SAI_Init+0xa8>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072cd 	.word	0x080072cd
 80072c0:	080072d3 	.word	0x080072d3
 80072c4:	080072db 	.word	0x080072db
 80072c8:	080072e3 	.word	0x080072e3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
      break;
 80072d0:	e012      	b.n	80072f8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80072d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d6:	61fb      	str	r3, [r7, #28]
      break;
 80072d8:	e00e      	b.n	80072f8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80072da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072de:	61fb      	str	r3, [r7, #28]
      break;
 80072e0:	e00a      	b.n	80072f8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80072e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072e6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	f043 0301 	orr.w	r3, r3, #1
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072f0:	e002      	b.n	80072f8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
      break;
 80072f6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a4f      	ldr	r2, [pc, #316]	; (800743c <HAL_SAI_Init+0x228>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d004      	beq.n	800730c <HAL_SAI_Init+0xf8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a4e      	ldr	r2, [pc, #312]	; (8007440 <HAL_SAI_Init+0x22c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d103      	bne.n	8007314 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800730c:	4a4d      	ldr	r2, [pc, #308]	; (8007444 <HAL_SAI_Init+0x230>)
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e002      	b.n	800731a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007314:	4a4c      	ldr	r2, [pc, #304]	; (8007448 <HAL_SAI_Init+0x234>)
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d073      	beq.n	800740a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a45      	ldr	r2, [pc, #276]	; (800743c <HAL_SAI_Init+0x228>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <HAL_SAI_Init+0x122>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a43      	ldr	r2, [pc, #268]	; (8007440 <HAL_SAI_Init+0x22c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d105      	bne.n	8007342 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007336:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800733a:	f7fe fd0d 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 800733e:	61b8      	str	r0, [r7, #24]
 8007340:	e004      	b.n	800734c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007342:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007346:	f7fe fd07 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 800734a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007354:	d120      	bne.n	8007398 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	2b04      	cmp	r3, #4
 800735c:	d102      	bne.n	8007364 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e00a      	b.n	800737a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	2b08      	cmp	r3, #8
 800736a:	d103      	bne.n	8007374 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800736c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	e002      	b.n	800737a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4619      	mov	r1, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	fb02 f303 	mul.w	r3, r2, r3
 8007390:	fbb1 f3f3 	udiv	r3, r1, r3
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	e017      	b.n	80073c8 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073a0:	d101      	bne.n	80073a6 <HAL_SAI_Init+0x192>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e000      	b.n	80073a8 <HAL_SAI_Init+0x194>
 80073a6:	2301      	movs	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4619      	mov	r1, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80073c6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4a20      	ldr	r2, [pc, #128]	; (800744c <HAL_SAI_Init+0x238>)
 80073cc:	fba2 2303 	umull	r2, r3, r2, r3
 80073d0:	08da      	lsrs	r2, r3, #3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80073d6:	6979      	ldr	r1, [r7, #20]
 80073d8:	4b1c      	ldr	r3, [pc, #112]	; (800744c <HAL_SAI_Init+0x238>)
 80073da:	fba3 2301 	umull	r2, r3, r3, r1
 80073de:	08da      	lsrs	r2, r3, #3
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	1aca      	subs	r2, r1, r3
 80073ea:	2a08      	cmp	r2, #8
 80073ec:	d904      	bls.n	80073f8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d104      	bne.n	800740a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	085a      	lsrs	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_SAI_Init+0x206>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d109      	bne.n	800742e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_SAI_Init+0x212>
 8007422:	2300      	movs	r3, #0
 8007424:	e001      	b.n	800742a <HAL_SAI_Init+0x216>
 8007426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742a:	623b      	str	r3, [r7, #32]
 800742c:	e012      	b.n	8007454 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10c      	bne.n	8007450 <HAL_SAI_Init+0x23c>
 8007436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743a:	e00a      	b.n	8007452 <HAL_SAI_Init+0x23e>
 800743c:	40015404 	.word	0x40015404
 8007440:	40015424 	.word	0x40015424
 8007444:	40015400 	.word	0x40015400
 8007448:	40015800 	.word	0x40015800
 800744c:	cccccccd 	.word	0xcccccccd
 8007450:	2300      	movs	r3, #0
 8007452:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6819      	ldr	r1, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b58      	ldr	r3, [pc, #352]	; (80075c0 <HAL_SAI_Init+0x3ac>)
 8007460:	400b      	ands	r3, r1
 8007462:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6819      	ldr	r1, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007478:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747e:	431a      	orrs	r2, r3
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800748c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007498:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	051b      	lsls	r3, r3, #20
 80074a0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074a6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80074be:	f023 030f 	bic.w	r3, r3, #15
 80074c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6899      	ldr	r1, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <HAL_SAI_Init+0x3b0>)
 80074ee:	400b      	ands	r3, r1
 80074f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6899      	ldr	r1, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007502:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007508:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800750e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007514:	3b01      	subs	r3, #1
 8007516:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007518:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68d9      	ldr	r1, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007530:	400b      	ands	r3, r1
 8007532:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68d9      	ldr	r1, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007542:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800754a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007550:	3b01      	subs	r3, #1
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a19      	ldr	r2, [pc, #100]	; (80075c8 <HAL_SAI_Init+0x3b4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d119      	bne.n	800759c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007568:	4b18      	ldr	r3, [pc, #96]	; (80075cc <HAL_SAI_Init+0x3b8>)
 800756a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756c:	4a17      	ldr	r2, [pc, #92]	; (80075cc <HAL_SAI_Init+0x3b8>)
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10e      	bne.n	800759c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	3b01      	subs	r3, #1
 8007588:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800758a:	4910      	ldr	r1, [pc, #64]	; (80075cc <HAL_SAI_Init+0x3b8>)
 800758c:	4313      	orrs	r3, r2
 800758e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007590:	4b0e      	ldr	r3, [pc, #56]	; (80075cc <HAL_SAI_Init+0x3b8>)
 8007592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007594:	4a0d      	ldr	r2, [pc, #52]	; (80075cc <HAL_SAI_Init+0x3b8>)
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3728      	adds	r7, #40	; 0x28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	f805c010 	.word	0xf805c010
 80075c4:	fff88000 	.word	0xfff88000
 80075c8:	40015404 	.word	0x40015404
 80075cc:	40015400 	.word	0x40015400

080075d0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <SAI_InitI2S+0x2e>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d103      	bne.n	8007606 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	64da      	str	r2, [r3, #76]	; 0x4c
 8007604:	e002      	b.n	800760c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007612:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800761a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e077      	b.n	8007726 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007648:	661a      	str	r2, [r3, #96]	; 0x60
 800764a:	e006      	b.n	800765a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007652:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b03      	cmp	r3, #3
 800765e:	d84f      	bhi.n	8007700 <SAI_InitI2S+0x130>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <SAI_InitI2S+0x98>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	08007679 	.word	0x08007679
 800766c:	0800769b 	.word	0x0800769b
 8007670:	080076bd 	.word	0x080076bd
 8007674:	080076df 	.word	0x080076df
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2280      	movs	r2, #128	; 0x80
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	085b      	lsrs	r3, r3, #1
 800768c:	011a      	lsls	r2, r3, #4
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2240      	movs	r2, #64	; 0x40
 8007696:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007698:	e035      	b.n	8007706 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	019a      	lsls	r2, r3, #6
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2280      	movs	r2, #128	; 0x80
 80076b8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80076ba:	e024      	b.n	8007706 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	22c0      	movs	r2, #192	; 0xc0
 80076c0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	019a      	lsls	r2, r3, #6
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80076dc:	e013      	b.n	8007706 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	22e0      	movs	r2, #224	; 0xe0
 80076e2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	085b      	lsrs	r3, r3, #1
 80076e8:	019a      	lsls	r2, r3, #6
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80076fe:	e002      	b.n	8007706 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d10b      	bne.n	8007724 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d102      	bne.n	8007718 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2210      	movs	r2, #16
 8007716:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d102      	bne.n	8007724 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2208      	movs	r2, #8
 8007722:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
}
 8007726:	4618      	mov	r0, r3
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop

08007734 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <SAI_InitPCM+0x2e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d103      	bne.n	800776a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	64da      	str	r2, [r3, #76]	; 0x4c
 8007768:	e002      	b.n	8007770 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800777c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007784:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007798:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d103      	bne.n	80077a8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
 80077a6:	e002      	b.n	80077ae <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	220d      	movs	r2, #13
 80077ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d837      	bhi.n	8007824 <SAI_InitPCM+0xf0>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <SAI_InitPCM+0x88>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077e3 	.word	0x080077e3
 80077c4:	080077f9 	.word	0x080077f9
 80077c8:	0800780f 	.word	0x0800780f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2280      	movs	r2, #128	; 0x80
 80077d0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	011a      	lsls	r2, r3, #4
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2240      	movs	r2, #64	; 0x40
 80077de:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80077e0:	e023      	b.n	800782a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2280      	movs	r2, #128	; 0x80
 80077f4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80077f6:	e018      	b.n	800782a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	22c0      	movs	r2, #192	; 0xc0
 80077fc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2280      	movs	r2, #128	; 0x80
 800780a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800780c:	e00d      	b.n	800782a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	22e0      	movs	r2, #224	; 0xe0
 8007812:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2280      	movs	r2, #128	; 0x80
 8007820:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007822:	e002      	b.n	800782a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	bf00      	nop
  }

  return status;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007840:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <SAI_Disable+0x6c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <SAI_Disable+0x70>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	0b1b      	lsrs	r3, r3, #12
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007862:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	72fb      	strb	r3, [r7, #11]
      break;
 800787e:	e009      	b.n	8007894 <SAI_Disable+0x5c>
    }
    count--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3b01      	subs	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e7      	bne.n	8007864 <SAI_Disable+0x2c>

  return status;
 8007894:	7afb      	ldrb	r3, [r7, #11]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20000000 	.word	0x20000000
 80078a8:	95cbec1b 	.word	0x95cbec1b

080078ac <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e0aa      	b.n	8007a14 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fa f856 	bl	8001980 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695a      	ldr	r2, [r3, #20]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007906:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007916:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007920:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007930:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d012      	beq.n	8007960 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d107      	bne.n	8007952 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800794e:	609a      	str	r2, [r3, #8]
 8007950:	e006      	b.n	8007960 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800795e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d104      	bne.n	8007972 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007970:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007984:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079ae:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079c0:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079c2:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079cc:	d110      	bne.n	80079f0 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80079da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079de:	d107      	bne.n	80079f0 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80079ee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007a32:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a3c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007a3e:	2180      	movs	r1, #128	; 0x80
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f805 	bl	8007a50 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a76:	2b38      	cmp	r3, #56	; 0x38
 8007a78:	d103      	bne.n	8007a82 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a80:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007a88:	2bf2      	cmp	r3, #242	; 0xf2
 8007a8a:	d103      	bne.n	8007a94 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007a9a:	2bd4      	cmp	r3, #212	; 0xd4
 8007a9c:	d103      	bne.n	8007aa6 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007aa4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6819      	ldr	r1, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e095      	b.n	8007c00 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae4:	d009      	beq.n	8007afa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	61da      	str	r2, [r3, #28]
 8007aec:	e005      	b.n	8007afa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fa f87b 	bl	8001c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b30:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b3a:	d902      	bls.n	8007b42 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	e002      	b.n	8007b48 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b50:	d007      	beq.n	8007b62 <HAL_SPI_Init+0xa0>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b5a:	d002      	beq.n	8007b62 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba4:	ea42 0103 	orr.w	r1, r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	f003 0204 	and.w	r2, r3, #4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007bde:	ea42 0103 	orr.w	r1, r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e049      	b.n	8007cae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fa f862 	bl	8001cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4619      	mov	r1, r3
 8007c46:	4610      	mov	r0, r2
 8007c48:	f000 f94a 	bl	8007ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e0ff      	b.n	8007ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b14      	cmp	r3, #20
 8007ce2:	f200 80f0 	bhi.w	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ce6:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007d41 	.word	0x08007d41
 8007cf0:	08007ec7 	.word	0x08007ec7
 8007cf4:	08007ec7 	.word	0x08007ec7
 8007cf8:	08007ec7 	.word	0x08007ec7
 8007cfc:	08007d81 	.word	0x08007d81
 8007d00:	08007ec7 	.word	0x08007ec7
 8007d04:	08007ec7 	.word	0x08007ec7
 8007d08:	08007ec7 	.word	0x08007ec7
 8007d0c:	08007dc3 	.word	0x08007dc3
 8007d10:	08007ec7 	.word	0x08007ec7
 8007d14:	08007ec7 	.word	0x08007ec7
 8007d18:	08007ec7 	.word	0x08007ec7
 8007d1c:	08007e03 	.word	0x08007e03
 8007d20:	08007ec7 	.word	0x08007ec7
 8007d24:	08007ec7 	.word	0x08007ec7
 8007d28:	08007ec7 	.word	0x08007ec7
 8007d2c:	08007e45 	.word	0x08007e45
 8007d30:	08007ec7 	.word	0x08007ec7
 8007d34:	08007ec7 	.word	0x08007ec7
 8007d38:	08007ec7 	.word	0x08007ec7
 8007d3c:	08007e85 	.word	0x08007e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 f964 	bl	8008014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0208 	orr.w	r2, r2, #8
 8007d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0204 	bic.w	r2, r2, #4
 8007d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6999      	ldr	r1, [r3, #24]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	619a      	str	r2, [r3, #24]
      break;
 8007d7e:	e0a5      	b.n	8007ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f9d4 	bl	8008134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6999      	ldr	r1, [r3, #24]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	021a      	lsls	r2, r3, #8
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	619a      	str	r2, [r3, #24]
      break;
 8007dc0:	e084      	b.n	8007ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fa3d 	bl	8008248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0208 	orr.w	r2, r2, #8
 8007ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0204 	bic.w	r2, r2, #4
 8007dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69d9      	ldr	r1, [r3, #28]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	61da      	str	r2, [r3, #28]
      break;
 8007e00:	e064      	b.n	8007ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 faa5 	bl	8008358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69d9      	ldr	r1, [r3, #28]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	021a      	lsls	r2, r3, #8
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	61da      	str	r2, [r3, #28]
      break;
 8007e42:	e043      	b.n	8007ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 faee 	bl	800842c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0208 	orr.w	r2, r2, #8
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0204 	bic.w	r2, r2, #4
 8007e6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691a      	ldr	r2, [r3, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e82:	e023      	b.n	8007ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fb32 	bl	80084f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	021a      	lsls	r2, r3, #8
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ec4:	e002      	b.n	8007ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a40      	ldr	r2, [pc, #256]	; (8007ff4 <TIM_Base_SetConfig+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d00f      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a3d      	ldr	r2, [pc, #244]	; (8007ff8 <TIM_Base_SetConfig+0x118>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a3c      	ldr	r2, [pc, #240]	; (8007ffc <TIM_Base_SetConfig+0x11c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a3b      	ldr	r2, [pc, #236]	; (8008000 <TIM_Base_SetConfig+0x120>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a3a      	ldr	r2, [pc, #232]	; (8008004 <TIM_Base_SetConfig+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d108      	bne.n	8007f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2f      	ldr	r2, [pc, #188]	; (8007ff4 <TIM_Base_SetConfig+0x114>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d01f      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f40:	d01b      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2c      	ldr	r2, [pc, #176]	; (8007ff8 <TIM_Base_SetConfig+0x118>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d017      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2b      	ldr	r2, [pc, #172]	; (8007ffc <TIM_Base_SetConfig+0x11c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2a      	ldr	r2, [pc, #168]	; (8008000 <TIM_Base_SetConfig+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a29      	ldr	r2, [pc, #164]	; (8008004 <TIM_Base_SetConfig+0x124>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a28      	ldr	r2, [pc, #160]	; (8008008 <TIM_Base_SetConfig+0x128>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a27      	ldr	r2, [pc, #156]	; (800800c <TIM_Base_SetConfig+0x12c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_Base_SetConfig+0x9a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a26      	ldr	r2, [pc, #152]	; (8008010 <TIM_Base_SetConfig+0x130>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d108      	bne.n	8007f8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a10      	ldr	r2, [pc, #64]	; (8007ff4 <TIM_Base_SetConfig+0x114>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00f      	beq.n	8007fd8 <TIM_Base_SetConfig+0xf8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a12      	ldr	r2, [pc, #72]	; (8008004 <TIM_Base_SetConfig+0x124>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00b      	beq.n	8007fd8 <TIM_Base_SetConfig+0xf8>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a11      	ldr	r2, [pc, #68]	; (8008008 <TIM_Base_SetConfig+0x128>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d007      	beq.n	8007fd8 <TIM_Base_SetConfig+0xf8>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a10      	ldr	r2, [pc, #64]	; (800800c <TIM_Base_SetConfig+0x12c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_Base_SetConfig+0xf8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a0f      	ldr	r2, [pc, #60]	; (8008010 <TIM_Base_SetConfig+0x130>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d103      	bne.n	8007fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	615a      	str	r2, [r3, #20]
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	40000c00 	.word	0x40000c00
 8008004:	40013400 	.word	0x40013400
 8008008:	40014000 	.word	0x40014000
 800800c:	40014400 	.word	0x40014400
 8008010:	40014800 	.word	0x40014800

08008014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	f023 0201 	bic.w	r2, r3, #1
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0303 	bic.w	r3, r3, #3
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f023 0302 	bic.w	r3, r3, #2
 8008060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a2c      	ldr	r2, [pc, #176]	; (8008120 <TIM_OC1_SetConfig+0x10c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00f      	beq.n	8008094 <TIM_OC1_SetConfig+0x80>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a2b      	ldr	r2, [pc, #172]	; (8008124 <TIM_OC1_SetConfig+0x110>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00b      	beq.n	8008094 <TIM_OC1_SetConfig+0x80>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <TIM_OC1_SetConfig+0x114>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d007      	beq.n	8008094 <TIM_OC1_SetConfig+0x80>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a29      	ldr	r2, [pc, #164]	; (800812c <TIM_OC1_SetConfig+0x118>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_OC1_SetConfig+0x80>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a28      	ldr	r2, [pc, #160]	; (8008130 <TIM_OC1_SetConfig+0x11c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d10c      	bne.n	80080ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0308 	bic.w	r3, r3, #8
 800809a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <TIM_OC1_SetConfig+0x10c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00f      	beq.n	80080d6 <TIM_OC1_SetConfig+0xc2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a1a      	ldr	r2, [pc, #104]	; (8008124 <TIM_OC1_SetConfig+0x110>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00b      	beq.n	80080d6 <TIM_OC1_SetConfig+0xc2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a19      	ldr	r2, [pc, #100]	; (8008128 <TIM_OC1_SetConfig+0x114>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d007      	beq.n	80080d6 <TIM_OC1_SetConfig+0xc2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a18      	ldr	r2, [pc, #96]	; (800812c <TIM_OC1_SetConfig+0x118>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d003      	beq.n	80080d6 <TIM_OC1_SetConfig+0xc2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a17      	ldr	r2, [pc, #92]	; (8008130 <TIM_OC1_SetConfig+0x11c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d111      	bne.n	80080fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	621a      	str	r2, [r3, #32]
}
 8008114:	bf00      	nop
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	40012c00 	.word	0x40012c00
 8008124:	40013400 	.word	0x40013400
 8008128:	40014000 	.word	0x40014000
 800812c:	40014400 	.word	0x40014400
 8008130:	40014800 	.word	0x40014800

08008134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	f023 0210 	bic.w	r2, r3, #16
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800816e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0320 	bic.w	r3, r3, #32
 8008182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a28      	ldr	r2, [pc, #160]	; (8008234 <TIM_OC2_SetConfig+0x100>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC2_SetConfig+0x6c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a27      	ldr	r2, [pc, #156]	; (8008238 <TIM_OC2_SetConfig+0x104>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10d      	bne.n	80081bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <TIM_OC2_SetConfig+0x100>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00f      	beq.n	80081e4 <TIM_OC2_SetConfig+0xb0>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <TIM_OC2_SetConfig+0x104>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_OC2_SetConfig+0xb0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1b      	ldr	r2, [pc, #108]	; (800823c <TIM_OC2_SetConfig+0x108>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_OC2_SetConfig+0xb0>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a1a      	ldr	r2, [pc, #104]	; (8008240 <TIM_OC2_SetConfig+0x10c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC2_SetConfig+0xb0>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a19      	ldr	r2, [pc, #100]	; (8008244 <TIM_OC2_SetConfig+0x110>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d113      	bne.n	800820c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40013400 	.word	0x40013400
 800823c:	40014000 	.word	0x40014000
 8008240:	40014400 	.word	0x40014400
 8008244:	40014800 	.word	0x40014800

08008248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0303 	bic.w	r3, r3, #3
 8008282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	021b      	lsls	r3, r3, #8
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a27      	ldr	r2, [pc, #156]	; (8008344 <TIM_OC3_SetConfig+0xfc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_OC3_SetConfig+0x6a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a26      	ldr	r2, [pc, #152]	; (8008348 <TIM_OC3_SetConfig+0x100>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10d      	bne.n	80082ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <TIM_OC3_SetConfig+0xfc>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00f      	beq.n	80082f6 <TIM_OC3_SetConfig+0xae>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <TIM_OC3_SetConfig+0x100>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_OC3_SetConfig+0xae>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1a      	ldr	r2, [pc, #104]	; (800834c <TIM_OC3_SetConfig+0x104>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_OC3_SetConfig+0xae>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a19      	ldr	r2, [pc, #100]	; (8008350 <TIM_OC3_SetConfig+0x108>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC3_SetConfig+0xae>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a18      	ldr	r2, [pc, #96]	; (8008354 <TIM_OC3_SetConfig+0x10c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40012c00 	.word	0x40012c00
 8008348:	40013400 	.word	0x40013400
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800

08008358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a18      	ldr	r2, [pc, #96]	; (8008418 <TIM_OC4_SetConfig+0xc0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00f      	beq.n	80083dc <TIM_OC4_SetConfig+0x84>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a17      	ldr	r2, [pc, #92]	; (800841c <TIM_OC4_SetConfig+0xc4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00b      	beq.n	80083dc <TIM_OC4_SetConfig+0x84>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a16      	ldr	r2, [pc, #88]	; (8008420 <TIM_OC4_SetConfig+0xc8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_OC4_SetConfig+0x84>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a15      	ldr	r2, [pc, #84]	; (8008424 <TIM_OC4_SetConfig+0xcc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_OC4_SetConfig+0x84>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <TIM_OC4_SetConfig+0xd0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d109      	bne.n	80083f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	019b      	lsls	r3, r3, #6
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40013400 	.word	0x40013400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800

0800842c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a17      	ldr	r2, [pc, #92]	; (80084e0 <TIM_OC5_SetConfig+0xb4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00f      	beq.n	80084a6 <TIM_OC5_SetConfig+0x7a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a16      	ldr	r2, [pc, #88]	; (80084e4 <TIM_OC5_SetConfig+0xb8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00b      	beq.n	80084a6 <TIM_OC5_SetConfig+0x7a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <TIM_OC5_SetConfig+0xbc>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d007      	beq.n	80084a6 <TIM_OC5_SetConfig+0x7a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a14      	ldr	r2, [pc, #80]	; (80084ec <TIM_OC5_SetConfig+0xc0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_OC5_SetConfig+0x7a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <TIM_OC5_SetConfig+0xc4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d109      	bne.n	80084ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	021b      	lsls	r3, r3, #8
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	40012c00 	.word	0x40012c00
 80084e4:	40013400 	.word	0x40013400
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40014400 	.word	0x40014400
 80084f0:	40014800 	.word	0x40014800

080084f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800853a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	051b      	lsls	r3, r3, #20
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a18      	ldr	r2, [pc, #96]	; (80085ac <TIM_OC6_SetConfig+0xb8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00f      	beq.n	8008570 <TIM_OC6_SetConfig+0x7c>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <TIM_OC6_SetConfig+0xbc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00b      	beq.n	8008570 <TIM_OC6_SetConfig+0x7c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a16      	ldr	r2, [pc, #88]	; (80085b4 <TIM_OC6_SetConfig+0xc0>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d007      	beq.n	8008570 <TIM_OC6_SetConfig+0x7c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <TIM_OC6_SetConfig+0xc4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_OC6_SetConfig+0x7c>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a14      	ldr	r2, [pc, #80]	; (80085bc <TIM_OC6_SetConfig+0xc8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d109      	bne.n	8008584 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	029b      	lsls	r3, r3, #10
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40014400 	.word	0x40014400
 80085bc:	40014800 	.word	0x40014800

080085c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e068      	b.n	80086aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a2e      	ldr	r2, [pc, #184]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a2d      	ldr	r2, [pc, #180]	; (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d108      	bne.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d01d      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864a:	d018      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00e      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d009      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a13      	ldr	r2, [pc, #76]	; (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a14      	ldr	r2, [pc, #80]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d10c      	bne.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4313      	orrs	r3, r2
 800868e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40012c00 	.word	0x40012c00
 80086bc:	40013400 	.word	0x40013400
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40014000 	.word	0x40014000

080086d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e065      	b.n	80087b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d004      	beq.n	800877a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a14      	ldr	r2, [pc, #80]	; (80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d115      	bne.n	80087a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	051b      	lsls	r3, r3, #20
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40013400 	.word	0x40013400

080087cc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80087cc:	b480      	push	{r7}
 80087ce:	b08b      	sub	sp, #44	; 0x2c
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_TIMEx_ConfigBreakInput+0x20>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e0af      	b.n	800894c <HAL_TIMEx_ConfigBreakInput+0x180>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	2b07      	cmp	r3, #7
 80087fc:	d83a      	bhi.n	8008874 <HAL_TIMEx_ConfigBreakInput+0xa8>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008825 	.word	0x08008825
 8008808:	08008839 	.word	0x08008839
 800880c:	08008875 	.word	0x08008875
 8008810:	0800884d 	.word	0x0800884d
 8008814:	08008875 	.word	0x08008875
 8008818:	08008875 	.word	0x08008875
 800881c:	08008875 	.word	0x08008875
 8008820:	08008861 	.word	0x08008861
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008824:	2301      	movs	r3, #1
 8008826:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008828:	2300      	movs	r3, #0
 800882a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800882c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008830:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008832:	2309      	movs	r3, #9
 8008834:	613b      	str	r3, [r7, #16]
      break;
 8008836:	e026      	b.n	8008886 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008838:	2302      	movs	r3, #2
 800883a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800883c:	2301      	movs	r3, #1
 800883e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008844:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008846:	230a      	movs	r3, #10
 8008848:	613b      	str	r3, [r7, #16]
      break;
 800884a:	e01c      	b.n	8008886 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800884c:	2304      	movs	r3, #4
 800884e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008850:	2302      	movs	r3, #2
 8008852:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008858:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800885a:	230b      	movs	r3, #11
 800885c:	613b      	str	r3, [r7, #16]
      break;
 800885e:	e012      	b.n	8008886 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008864:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008866:	2308      	movs	r3, #8
 8008868:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
      break;
 8008872:	e008      	b.n	8008886 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	613b      	str	r3, [r7, #16]
      break;
 8008884:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d003      	beq.n	8008894 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d029      	beq.n	80088e6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008892:	e051      	b.n	8008938 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800889a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	43db      	mvns	r3, r3
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	4013      	ands	r3, r2
 80088a4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	409a      	lsls	r2, r3
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4013      	ands	r3, r2
 80088b2:	6a3a      	ldr	r2, [r7, #32]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d00d      	beq.n	80088dc <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	6a3a      	ldr	r2, [r7, #32]
 80088c6:	4013      	ands	r3, r2
 80088c8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	409a      	lsls	r2, r3
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	4013      	ands	r3, r2
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	4313      	orrs	r3, r2
 80088da:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6a3a      	ldr	r2, [r7, #32]
 80088e2:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80088e4:	e02c      	b.n	8008940 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ec:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	43db      	mvns	r3, r3
 80088f2:	6a3a      	ldr	r2, [r7, #32]
 80088f4:	4013      	ands	r3, r2
 80088f6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	409a      	lsls	r2, r3
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4013      	ands	r3, r2
 8008904:	6a3a      	ldr	r2, [r7, #32]
 8008906:	4313      	orrs	r3, r2
 8008908:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b08      	cmp	r3, #8
 8008910:	d00d      	beq.n	800892e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	43db      	mvns	r3, r3
 8008916:	6a3a      	ldr	r2, [r7, #32]
 8008918:	4013      	ands	r3, r2
 800891a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689a      	ldr	r2, [r3, #8]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	409a      	lsls	r2, r3
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	4013      	ands	r3, r2
 8008928:	6a3a      	ldr	r2, [r7, #32]
 800892a:	4313      	orrs	r3, r2
 800892c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008936:	e003      	b.n	8008940 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800893e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800894c:	4618      	mov	r0, r3
 800894e:	372c      	adds	r7, #44	; 0x2c
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e042      	b.n	80089f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008970:	2b00      	cmp	r3, #0
 8008972:	d106      	bne.n	8008982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7f9 f85d 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2224      	movs	r2, #36	; 0x24
 8008986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0201 	bic.w	r2, r2, #1
 8008998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fb24 	bl	8008ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f825 	bl	80089f8 <UART_SetConfig>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e01b      	b.n	80089f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0201 	orr.w	r2, r2, #1
 80089e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fba3 	bl	8009134 <UART_CheckIdleState>
 80089ee:	4603      	mov	r3, r0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089fc:	b08c      	sub	sp, #48	; 0x30
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4baa      	ldr	r3, [pc, #680]	; (8008cd0 <UART_SetConfig+0x2d8>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a30:	430b      	orrs	r3, r1
 8008a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a9f      	ldr	r2, [pc, #636]	; (8008cd4 <UART_SetConfig+0x2dc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d004      	beq.n	8008a64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a60:	4313      	orrs	r3, r2
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008a6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a82:	f023 010f 	bic.w	r1, r3, #15
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a90      	ldr	r2, [pc, #576]	; (8008cd8 <UART_SetConfig+0x2e0>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d125      	bne.n	8008ae8 <UART_SetConfig+0xf0>
 8008a9c:	4b8f      	ldr	r3, [pc, #572]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d81a      	bhi.n	8008ae0 <UART_SetConfig+0xe8>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <UART_SetConfig+0xb8>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008ad1 	.word	0x08008ad1
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008ad9 	.word	0x08008ad9
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ac6:	e116      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ace:	e112      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ad6:	e10e      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008ad8:	2308      	movs	r3, #8
 8008ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ade:	e10a      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae6:	e106      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a7c      	ldr	r2, [pc, #496]	; (8008ce0 <UART_SetConfig+0x2e8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d138      	bne.n	8008b64 <UART_SetConfig+0x16c>
 8008af2:	4b7a      	ldr	r3, [pc, #488]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af8:	f003 030c 	and.w	r3, r3, #12
 8008afc:	2b0c      	cmp	r3, #12
 8008afe:	d82d      	bhi.n	8008b5c <UART_SetConfig+0x164>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x110>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b3d 	.word	0x08008b3d
 8008b0c:	08008b5d 	.word	0x08008b5d
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b5d 	.word	0x08008b5d
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b5d 	.word	0x08008b5d
 8008b24:	08008b5d 	.word	0x08008b5d
 8008b28:	08008b45 	.word	0x08008b45
 8008b2c:	08008b5d 	.word	0x08008b5d
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	08008b5d 	.word	0x08008b5d
 8008b38:	08008b55 	.word	0x08008b55
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b42:	e0d8      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008b44:	2302      	movs	r3, #2
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4a:	e0d4      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b52:	e0d0      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008b54:	2308      	movs	r3, #8
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b5a:	e0cc      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b62:	e0c8      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a5e      	ldr	r2, [pc, #376]	; (8008ce4 <UART_SetConfig+0x2ec>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d125      	bne.n	8008bba <UART_SetConfig+0x1c2>
 8008b6e:	4b5b      	ldr	r3, [pc, #364]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	d016      	beq.n	8008baa <UART_SetConfig+0x1b2>
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d818      	bhi.n	8008bb2 <UART_SetConfig+0x1ba>
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d00a      	beq.n	8008b9a <UART_SetConfig+0x1a2>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d814      	bhi.n	8008bb2 <UART_SetConfig+0x1ba>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <UART_SetConfig+0x19a>
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	d008      	beq.n	8008ba2 <UART_SetConfig+0x1aa>
 8008b90:	e00f      	b.n	8008bb2 <UART_SetConfig+0x1ba>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b98:	e0ad      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba0:	e0a9      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba8:	e0a5      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008baa:	2308      	movs	r3, #8
 8008bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb0:	e0a1      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb8:	e09d      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a4a      	ldr	r2, [pc, #296]	; (8008ce8 <UART_SetConfig+0x2f0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d125      	bne.n	8008c10 <UART_SetConfig+0x218>
 8008bc4:	4b45      	ldr	r3, [pc, #276]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bce:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd0:	d016      	beq.n	8008c00 <UART_SetConfig+0x208>
 8008bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd4:	d818      	bhi.n	8008c08 <UART_SetConfig+0x210>
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d00a      	beq.n	8008bf0 <UART_SetConfig+0x1f8>
 8008bda:	2b80      	cmp	r3, #128	; 0x80
 8008bdc:	d814      	bhi.n	8008c08 <UART_SetConfig+0x210>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <UART_SetConfig+0x1f0>
 8008be2:	2b40      	cmp	r3, #64	; 0x40
 8008be4:	d008      	beq.n	8008bf8 <UART_SetConfig+0x200>
 8008be6:	e00f      	b.n	8008c08 <UART_SetConfig+0x210>
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bee:	e082      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf6:	e07e      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfe:	e07a      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c00:	2308      	movs	r3, #8
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c06:	e076      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0e:	e072      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a35      	ldr	r2, [pc, #212]	; (8008cec <UART_SetConfig+0x2f4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d12a      	bne.n	8008c70 <UART_SetConfig+0x278>
 8008c1a:	4b30      	ldr	r3, [pc, #192]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c28:	d01a      	beq.n	8008c60 <UART_SetConfig+0x268>
 8008c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c2e:	d81b      	bhi.n	8008c68 <UART_SetConfig+0x270>
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d00c      	beq.n	8008c50 <UART_SetConfig+0x258>
 8008c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c3a:	d815      	bhi.n	8008c68 <UART_SetConfig+0x270>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <UART_SetConfig+0x250>
 8008c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c44:	d008      	beq.n	8008c58 <UART_SetConfig+0x260>
 8008c46:	e00f      	b.n	8008c68 <UART_SetConfig+0x270>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c4e:	e052      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c50:	2302      	movs	r3, #2
 8008c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c56:	e04e      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c5e:	e04a      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c66:	e046      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c6e:	e042      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a17      	ldr	r2, [pc, #92]	; (8008cd4 <UART_SetConfig+0x2dc>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d13a      	bne.n	8008cf0 <UART_SetConfig+0x2f8>
 8008c7a:	4b18      	ldr	r3, [pc, #96]	; (8008cdc <UART_SetConfig+0x2e4>)
 8008c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c88:	d01a      	beq.n	8008cc0 <UART_SetConfig+0x2c8>
 8008c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c8e:	d81b      	bhi.n	8008cc8 <UART_SetConfig+0x2d0>
 8008c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c94:	d00c      	beq.n	8008cb0 <UART_SetConfig+0x2b8>
 8008c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c9a:	d815      	bhi.n	8008cc8 <UART_SetConfig+0x2d0>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <UART_SetConfig+0x2b0>
 8008ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca4:	d008      	beq.n	8008cb8 <UART_SetConfig+0x2c0>
 8008ca6:	e00f      	b.n	8008cc8 <UART_SetConfig+0x2d0>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cae:	e022      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb6:	e01e      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cbe:	e01a      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc6:	e016      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cce:	e012      	b.n	8008cf6 <UART_SetConfig+0x2fe>
 8008cd0:	cfff69f3 	.word	0xcfff69f3
 8008cd4:	40008000 	.word	0x40008000
 8008cd8:	40013800 	.word	0x40013800
 8008cdc:	40021000 	.word	0x40021000
 8008ce0:	40004400 	.word	0x40004400
 8008ce4:	40004800 	.word	0x40004800
 8008ce8:	40004c00 	.word	0x40004c00
 8008cec:	40005000 	.word	0x40005000
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4aae      	ldr	r2, [pc, #696]	; (8008fb4 <UART_SetConfig+0x5bc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	f040 8097 	bne.w	8008e30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	d823      	bhi.n	8008d52 <UART_SetConfig+0x35a>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0x318>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d53 	.word	0x08008d53
 8008d18:	08008d3d 	.word	0x08008d3d
 8008d1c:	08008d53 	.word	0x08008d53
 8008d20:	08008d43 	.word	0x08008d43
 8008d24:	08008d53 	.word	0x08008d53
 8008d28:	08008d53 	.word	0x08008d53
 8008d2c:	08008d53 	.word	0x08008d53
 8008d30:	08008d4b 	.word	0x08008d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d34:	f7fc fbf4 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8008d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d3a:	e010      	b.n	8008d5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d3c:	4b9e      	ldr	r3, [pc, #632]	; (8008fb8 <UART_SetConfig+0x5c0>)
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d40:	e00d      	b.n	8008d5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d42:	f7fc fb55 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8008d46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d48:	e009      	b.n	8008d5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d50:	e005      	b.n	8008d5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8130 	beq.w	8008fc6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	4a94      	ldr	r2, [pc, #592]	; (8008fbc <UART_SetConfig+0x5c4>)
 8008d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	4413      	add	r3, r2
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d305      	bcc.n	8008d96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d903      	bls.n	8008d9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d9c:	e113      	b.n	8008fc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	2200      	movs	r2, #0
 8008da2:	60bb      	str	r3, [r7, #8]
 8008da4:	60fa      	str	r2, [r7, #12]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	4a84      	ldr	r2, [pc, #528]	; (8008fbc <UART_SetConfig+0x5c4>)
 8008dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2200      	movs	r2, #0
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dc0:	f7f7 fa1c 	bl	80001fc <__aeabi_uldivmod>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	020b      	lsls	r3, r1, #8
 8008dd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dda:	0202      	lsls	r2, r0, #8
 8008ddc:	6979      	ldr	r1, [r7, #20]
 8008dde:	6849      	ldr	r1, [r1, #4]
 8008de0:	0849      	lsrs	r1, r1, #1
 8008de2:	2000      	movs	r0, #0
 8008de4:	460c      	mov	r4, r1
 8008de6:	4605      	mov	r5, r0
 8008de8:	eb12 0804 	adds.w	r8, r2, r4
 8008dec:	eb43 0905 	adc.w	r9, r3, r5
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	469a      	mov	sl, r3
 8008df8:	4693      	mov	fp, r2
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 f9fb 	bl	80001fc <__aeabi_uldivmod>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e14:	d308      	bcc.n	8008e28 <UART_SetConfig+0x430>
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1c:	d204      	bcs.n	8008e28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6a3a      	ldr	r2, [r7, #32]
 8008e24:	60da      	str	r2, [r3, #12]
 8008e26:	e0ce      	b.n	8008fc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e2e:	e0ca      	b.n	8008fc6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e38:	d166      	bne.n	8008f08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008e3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d827      	bhi.n	8008e92 <UART_SetConfig+0x49a>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0x450>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e6d 	.word	0x08008e6d
 8008e4c:	08008e75 	.word	0x08008e75
 8008e50:	08008e7d 	.word	0x08008e7d
 8008e54:	08008e93 	.word	0x08008e93
 8008e58:	08008e83 	.word	0x08008e83
 8008e5c:	08008e93 	.word	0x08008e93
 8008e60:	08008e93 	.word	0x08008e93
 8008e64:	08008e93 	.word	0x08008e93
 8008e68:	08008e8b 	.word	0x08008e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e6c:	f7fc fb58 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8008e70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e72:	e014      	b.n	8008e9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e74:	f7fc fb6a 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8008e78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e7a:	e010      	b.n	8008e9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e7c:	4b4e      	ldr	r3, [pc, #312]	; (8008fb8 <UART_SetConfig+0x5c0>)
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e80:	e00d      	b.n	8008e9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e82:	f7fc fab5 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8008e86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e88:	e009      	b.n	8008e9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e90:	e005      	b.n	8008e9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8090 	beq.w	8008fc6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	4a44      	ldr	r2, [pc, #272]	; (8008fbc <UART_SetConfig+0x5c4>)
 8008eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb8:	005a      	lsls	r2, r3, #1
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	085b      	lsrs	r3, r3, #1
 8008ec0:	441a      	add	r2, r3
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2b0f      	cmp	r3, #15
 8008ed0:	d916      	bls.n	8008f00 <UART_SetConfig+0x508>
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed8:	d212      	bcs.n	8008f00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f023 030f 	bic.w	r3, r3, #15
 8008ee2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	8bfb      	ldrh	r3, [r7, #30]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	8bfa      	ldrh	r2, [r7, #30]
 8008efc:	60da      	str	r2, [r3, #12]
 8008efe:	e062      	b.n	8008fc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f06:	e05e      	b.n	8008fc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d828      	bhi.n	8008f62 <UART_SetConfig+0x56a>
 8008f10:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <UART_SetConfig+0x520>)
 8008f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	08008f3d 	.word	0x08008f3d
 8008f1c:	08008f45 	.word	0x08008f45
 8008f20:	08008f4d 	.word	0x08008f4d
 8008f24:	08008f63 	.word	0x08008f63
 8008f28:	08008f53 	.word	0x08008f53
 8008f2c:	08008f63 	.word	0x08008f63
 8008f30:	08008f63 	.word	0x08008f63
 8008f34:	08008f63 	.word	0x08008f63
 8008f38:	08008f5b 	.word	0x08008f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f3c:	f7fc faf0 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8008f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f42:	e014      	b.n	8008f6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f44:	f7fc fb02 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8008f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f4a:	e010      	b.n	8008f6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <UART_SetConfig+0x5c0>)
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f50:	e00d      	b.n	8008f6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f52:	f7fc fa4d 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8008f56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f58:	e009      	b.n	8008f6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f60:	e005      	b.n	8008f6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f6c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d028      	beq.n	8008fc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	4a10      	ldr	r2, [pc, #64]	; (8008fbc <UART_SetConfig+0x5c4>)
 8008f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	441a      	add	r2, r3
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	2b0f      	cmp	r3, #15
 8008f9c:	d910      	bls.n	8008fc0 <UART_SetConfig+0x5c8>
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa4:	d20c      	bcs.n	8008fc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	60da      	str	r2, [r3, #12]
 8008fb0:	e009      	b.n	8008fc6 <UART_SetConfig+0x5ce>
 8008fb2:	bf00      	nop
 8008fb4:	40008000 	.word	0x40008000
 8008fb8:	00f42400 	.word	0x00f42400
 8008fbc:	080096e0 	.word	0x080096e0
      }
      else
      {
        ret = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008fe2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3730      	adds	r7, #48	; 0x30
 8008fea:	46bd      	mov	sp, r7
 8008fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	f003 0308 	and.w	r3, r3, #8
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00a      	beq.n	80090a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01a      	beq.n	8009106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ee:	d10a      	bne.n	8009106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	605a      	str	r2, [r3, #4]
  }
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b098      	sub	sp, #96	; 0x60
 8009138:	af02      	add	r7, sp, #8
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009144:	f7f9 f928 	bl	8002398 <HAL_GetTick>
 8009148:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b08      	cmp	r3, #8
 8009156:	d12f      	bne.n	80091b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009160:	2200      	movs	r2, #0
 8009162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f88e 	bl	8009288 <UART_WaitOnFlagUntilTimeout>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d022      	beq.n	80091b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009186:	653b      	str	r3, [r7, #80]	; 0x50
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	461a      	mov	r2, r3
 800918e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009190:	647b      	str	r3, [r7, #68]	; 0x44
 8009192:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800919e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e6      	bne.n	8009172 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e063      	b.n	8009280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d149      	bne.n	800925a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091ce:	2200      	movs	r2, #0
 80091d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f857 	bl	8009288 <UART_WaitOnFlagUntilTimeout>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d03c      	beq.n	800925a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	623b      	str	r3, [r7, #32]
   return(result);
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009200:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e6      	bne.n	80091e0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	60fb      	str	r3, [r7, #12]
   return(result);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 0301 	bic.w	r3, r3, #1
 8009228:	64bb      	str	r3, [r7, #72]	; 0x48
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3308      	adds	r3, #8
 8009230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009232:	61fa      	str	r2, [r7, #28]
 8009234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	69b9      	ldr	r1, [r7, #24]
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	617b      	str	r3, [r7, #20]
   return(result);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e5      	bne.n	8009212 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2220      	movs	r2, #32
 800924a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e012      	b.n	8009280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3758      	adds	r7, #88	; 0x58
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	4613      	mov	r3, r2
 8009296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009298:	e049      	b.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a0:	d045      	beq.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092a2:	f7f9 f879 	bl	8002398 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d302      	bcc.n	80092b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e048      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d031      	beq.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	f003 0308 	and.w	r3, r3, #8
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d110      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2208      	movs	r2, #8
 80092de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f838 	bl	8009356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2208      	movs	r2, #8
 80092ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e029      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009308:	d111      	bne.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f81e 	bl	8009356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e00f      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4013      	ands	r3, r2
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	bf0c      	ite	eq
 800933e:	2301      	moveq	r3, #1
 8009340:	2300      	movne	r3, #0
 8009342:	b2db      	uxtb	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	429a      	cmp	r2, r3
 800934a:	d0a6      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009356:	b480      	push	{r7}
 8009358:	b095      	sub	sp, #84	; 0x54
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800937c:	643b      	str	r3, [r7, #64]	; 0x40
 800937e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e6      	bne.n	800935e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093a6:	f023 0301 	bic.w	r3, r3, #1
 80093aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e3      	bne.n	8009390 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d118      	bne.n	8009402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f023 0310 	bic.w	r3, r3, #16
 80093e4:	647b      	str	r3, [r7, #68]	; 0x44
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ee:	61bb      	str	r3, [r7, #24]
 80093f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6979      	ldr	r1, [r7, #20]
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	613b      	str	r3, [r7, #16]
   return(result);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e6      	bne.n	80093d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009416:	bf00      	nop
 8009418:	3754      	adds	r7, #84	; 0x54
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_UARTEx_DisableFifoMode+0x16>
 8009434:	2302      	movs	r3, #2
 8009436:	e027      	b.n	8009488 <HAL_UARTEx_DisableFifoMode+0x66>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2224      	movs	r2, #36	; 0x24
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0201 	bic.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009466:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d101      	bne.n	80094ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094a8:	2302      	movs	r3, #2
 80094aa:	e02d      	b.n	8009508 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2224      	movs	r2, #36	; 0x24
 80094b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0201 	bic.w	r2, r2, #1
 80094d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f84f 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009524:	2302      	movs	r3, #2
 8009526:	e02d      	b.n	8009584 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2224      	movs	r2, #36	; 0x24
 8009534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0201 	bic.w	r2, r2, #1
 800954e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f811 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2220      	movs	r2, #32
 8009576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009598:	2b00      	cmp	r3, #0
 800959a:	d108      	bne.n	80095ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095ac:	e031      	b.n	8009612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095ae:	2308      	movs	r3, #8
 80095b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095b2:	2308      	movs	r3, #8
 80095b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	0e5b      	lsrs	r3, r3, #25
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	0f5b      	lsrs	r3, r3, #29
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	7b3a      	ldrb	r2, [r7, #12]
 80095da:	4911      	ldr	r1, [pc, #68]	; (8009620 <UARTEx_SetNbDataToProcess+0x94>)
 80095dc:	5c8a      	ldrb	r2, [r1, r2]
 80095de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095e2:	7b3a      	ldrb	r2, [r7, #12]
 80095e4:	490f      	ldr	r1, [pc, #60]	; (8009624 <UARTEx_SetNbDataToProcess+0x98>)
 80095e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	7b7a      	ldrb	r2, [r7, #13]
 80095f8:	4909      	ldr	r1, [pc, #36]	; (8009620 <UARTEx_SetNbDataToProcess+0x94>)
 80095fa:	5c8a      	ldrb	r2, [r1, r2]
 80095fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009600:	7b7a      	ldrb	r2, [r7, #13]
 8009602:	4908      	ldr	r1, [pc, #32]	; (8009624 <UARTEx_SetNbDataToProcess+0x98>)
 8009604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009606:	fb93 f3f2 	sdiv	r3, r3, r2
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	080096f8 	.word	0x080096f8
 8009624:	08009700 	.word	0x08009700

08009628 <memset>:
 8009628:	4402      	add	r2, r0
 800962a:	4603      	mov	r3, r0
 800962c:	4293      	cmp	r3, r2
 800962e:	d100      	bne.n	8009632 <memset+0xa>
 8009630:	4770      	bx	lr
 8009632:	f803 1b01 	strb.w	r1, [r3], #1
 8009636:	e7f9      	b.n	800962c <memset+0x4>

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4d0d      	ldr	r5, [pc, #52]	; (8009670 <__libc_init_array+0x38>)
 800963c:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 800963e:	1b64      	subs	r4, r4, r5
 8009640:	10a4      	asrs	r4, r4, #2
 8009642:	2600      	movs	r6, #0
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	4d0b      	ldr	r5, [pc, #44]	; (8009678 <__libc_init_array+0x40>)
 800964a:	4c0c      	ldr	r4, [pc, #48]	; (800967c <__libc_init_array+0x44>)
 800964c:	f000 f818 	bl	8009680 <_init>
 8009650:	1b64      	subs	r4, r4, r5
 8009652:	10a4      	asrs	r4, r4, #2
 8009654:	2600      	movs	r6, #0
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	08009710 	.word	0x08009710
 8009674:	08009710 	.word	0x08009710
 8009678:	08009710 	.word	0x08009710
 800967c:	08009714 	.word	0x08009714

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr

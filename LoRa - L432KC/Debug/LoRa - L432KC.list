
LoRa - L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b8  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003548  08003548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a0  080035a0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a0  080035a0  000045a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035a8  080035a8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a8  080035a8  000045a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ac  080035ac  000045ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080035bc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080035bc  00005090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008075  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001889  00000000  00000000  0000d0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0000e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ca  00000000  00000000  0000f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec55  00000000  00000000  0000f91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009848  00000000  00000000  0002e56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8f9a  00000000  00000000  00037db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0d51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002414  00000000  00000000  000f0d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f31a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003530 	.word	0x08003530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08003530 	.word	0x08003530

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6858      	ldr	r0, [r3, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	8adb      	ldrh	r3, [r3, #22]
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	f001 f8bd 	bl	8001664 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	1cf9      	adds	r1, r7, #3
 80004f4:	2201      	movs	r2, #1
 80004f6:	f001 ffd4 	bl	80024a2 <HAL_SPI_Transmit>
 80004fa:	4603      	mov	r3, r0
 80004fc:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f107 010f 	add.w	r1, r7, #15
 800050a:	2201      	movs	r2, #1
 800050c:	f002 f93e 	bl	800278c <HAL_SPI_Receive>
 8000510:	4603      	mov	r3, r0
 8000512:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6858      	ldr	r0, [r3, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8adb      	ldrh	r3, [r3, #22]
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	f001 f8a0 	bl	8001664 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b084      	sub	sp, #16
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	70fb      	strb	r3, [r7, #3]
 800053a:	4613      	mov	r3, r2
 800053c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000544:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000546:	78bb      	ldrb	r3, [r7, #2]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	b21a      	sxth	r2, r3
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	b21b      	sxth	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b21b      	sxth	r3, r3
 8000554:	b29b      	uxth	r3, r3
 8000556:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6858      	ldr	r0, [r3, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	8adb      	ldrh	r3, [r3, #22]
 8000560:	2200      	movs	r2, #0
 8000562:	4619      	mov	r1, r3
 8000564:	f001 f87e 	bl	8001664 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6818      	ldr	r0, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f107 010a 	add.w	r1, r7, #10
 8000574:	2202      	movs	r2, #2
 8000576:	f001 ff94 	bl	80024a2 <HAL_SPI_Transmit>
 800057a:	4603      	mov	r3, r0
 800057c:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6858      	ldr	r0, [r3, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	8adb      	ldrh	r3, [r3, #22]
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	f001 f86b 	bl	8001664 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b088      	sub	sp, #32
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	4611      	mov	r1, r2
 80005a2:	461a      	mov	r2, r3
 80005a4:	460b      	mov	r3, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	6858      	ldr	r0, [r3, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	8adb      	ldrh	r3, [r3, #22]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f001 f852 	bl	8001664 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	f107 0117 	add.w	r1, r7, #23
 80005cc:	2201      	movs	r2, #1
 80005ce:	f001 ff68 	bl	80024a2 <HAL_SPI_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d108      	bne.n	80005ee <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	79fa      	ldrb	r2, [r7, #7]
 80005e2:	b292      	uxth	r2, r2
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc2a 	bl	8002e40 <HAL_SPI_Transmit_DMA>
 80005ec:	e012      	b.n	8000614 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	f001 ff51 	bl	80024a2 <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6858      	ldr	r0, [r3, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	8adb      	ldrh	r3, [r3, #22]
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	f001 f828 	bl	8001664 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000626:	78fb      	ldrb	r3, [r7, #3]
 8000628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	2101      	movs	r1, #1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ff7b 	bl	800052e <write_register>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000650:	d801      	bhi.n	8000656 <set_OCP+0x16>
    imax = 45;
 8000652:	232d      	movs	r3, #45	@ 0x2d
 8000654:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000656:	78fb      	ldrb	r3, [r7, #3]
 8000658:	2bf0      	cmp	r3, #240	@ 0xf0
 800065a:	d901      	bls.n	8000660 <set_OCP+0x20>
    imax = 240;
 800065c:	23f0      	movs	r3, #240	@ 0xf0
 800065e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b81      	cmp	r3, #129	@ 0x81
 8000664:	d809      	bhi.n	800067a <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	3b2d      	subs	r3, #45	@ 0x2d
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <set_OCP+0x68>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	1052      	asrs	r2, r2, #1
 8000672:	17db      	asrs	r3, r3, #31
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	73fb      	strb	r3, [r7, #15]
 8000678:	e008      	b.n	800068c <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	331e      	adds	r3, #30
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <set_OCP+0x68>)
 8000680:	fb82 1203 	smull	r1, r2, r2, r3
 8000684:	1092      	asrs	r2, r2, #2
 8000686:	17db      	asrs	r3, r3, #31
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	210b      	movs	r1, #11
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff48 	bl	800052e <write_register>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	66666667 	.word	0x66666667

080006ac <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006b4:	211d      	movs	r1, #29
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff02 	bl	80004c0 <read_register>
 80006bc:	4603      	mov	r3, r0
 80006be:	091b      	lsrs	r3, r3, #4
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2200      	movs	r2, #0
 80006c6:	461c      	mov	r4, r3
 80006c8:	4615      	mov	r5, r2
 80006ca:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80006ce:	211e      	movs	r1, #30
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fef5 	bl	80004c0 <read_register>
 80006d6:	4603      	mov	r3, r0
 80006d8:	091b      	lsrs	r3, r3, #4
 80006da:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80006dc:	2304      	movs	r3, #4
 80006de:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b0a      	cmp	r3, #10
 80006e4:	d908      	bls.n	80006f8 <set_low_data_rate_optimization+0x4c>
 80006e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006ea:	1fd1      	subs	r1, r2, #7
 80006ec:	430b      	orrs	r3, r1
 80006ee:	d103      	bne.n	80006f8 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2126      	movs	r1, #38	@ 0x26
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff ff15 	bl	800052e <write_register>
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bdb0      	pop	{r4, r5, r7, pc}

0800070c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000714:	2100      	movs	r1, #0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff7f 	bl	800061a <set_mode>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800072c:	2101      	movs	r1, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff73 	bl	800061a <set_mode>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000744:	211d      	movs	r1, #29
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff feba 	bl	80004c0 <read_register>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f023 0301 	bic.w	r3, r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	461a      	mov	r2, r3
 800075c:	211d      	movs	r1, #29
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff fee5 	bl	800052e <write_register>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10e      	bne.n	800079e <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d901      	bls.n	800078a <lora_set_tx_power+0x1e>
      level = 15;
 8000786:	230f      	movs	r3, #15
 8000788:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	2109      	movs	r1, #9
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fec9 	bl	800052e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 800079c:	e02e      	b.n	80007fc <lora_set_tx_power+0x90>
    if (level > 20) {
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2b14      	cmp	r3, #20
 80007a2:	d901      	bls.n	80007a8 <lora_set_tx_power+0x3c>
      level = 20;
 80007a4:	2314      	movs	r3, #20
 80007a6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d801      	bhi.n	80007b2 <lora_set_tx_power+0x46>
      level = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	2b11      	cmp	r3, #17
 80007b6:	d90c      	bls.n	80007d2 <lora_set_tx_power+0x66>
      level -= 3;
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	3b03      	subs	r3, #3
 80007bc:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80007be:	2287      	movs	r2, #135	@ 0x87
 80007c0:	214d      	movs	r1, #77	@ 0x4d
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff feb3 	bl	800052e <write_register>
      set_OCP(lora, 140);
 80007c8:	218c      	movs	r1, #140	@ 0x8c
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ff38 	bl	8000640 <set_OCP>
 80007d0:	e008      	b.n	80007e4 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80007d2:	2284      	movs	r2, #132	@ 0x84
 80007d4:	214d      	movs	r1, #77	@ 0x4d
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fea9 	bl	800052e <write_register>
      set_OCP(lora, 97);
 80007dc:	2161      	movs	r1, #97	@ 0x61
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff2e 	bl	8000640 <set_OCP>
    level -= 2;
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	3b02      	subs	r3, #2
 80007e8:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	2109      	movs	r1, #9
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fe99 	bl	800052e <write_register>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	f04f 0100 	mov.w	r1, #0
 800081c:	04d9      	lsls	r1, r3, #19
 800081e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000822:	04d0      	lsls	r0, r2, #19
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <lora_set_frequency+0x88>)
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	f7ff fcd1 	bl	80001d0 <__aeabi_uldivmod>
 800082e:	4602      	mov	r2, r0
 8000830:	460b      	mov	r3, r1
 8000832:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000836:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	0c02      	lsrs	r2, r0, #16
 8000844:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000848:	0c0b      	lsrs	r3, r1, #16
 800084a:	b2d3      	uxtb	r3, r2
 800084c:	461a      	mov	r2, r3
 800084e:	2106      	movs	r1, #6
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff fe6c 	bl	800052e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000856:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800085a:	f04f 0200 	mov.w	r2, #0
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	0a02      	lsrs	r2, r0, #8
 8000864:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000868:	0a0b      	lsrs	r3, r1, #8
 800086a:	b2d3      	uxtb	r3, r2
 800086c:	461a      	mov	r2, r3
 800086e:	2107      	movs	r1, #7
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f7ff fe5c 	bl	800052e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000876:	7c3b      	ldrb	r3, [r7, #16]
 8000878:	461a      	mov	r2, r3
 800087a:	2108      	movs	r1, #8
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f7ff fe56 	bl	800052e <write_register>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	01e84800 	.word	0x01e84800

08000890 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b05      	cmp	r3, #5
 80008a0:	d802      	bhi.n	80008a8 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008a2:	2306      	movs	r3, #6
 80008a4:	70fb      	strb	r3, [r7, #3]
 80008a6:	e004      	b.n	80008b2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b0c      	cmp	r3, #12
 80008ac:	d901      	bls.n	80008b2 <lora_set_spreading_factor+0x22>
    sf = 12;
 80008ae:	230c      	movs	r3, #12
 80008b0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	2b06      	cmp	r3, #6
 80008b6:	d10a      	bne.n	80008ce <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80008b8:	22c5      	movs	r2, #197	@ 0xc5
 80008ba:	2131      	movs	r1, #49	@ 0x31
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff fe36 	bl	800052e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80008c2:	220c      	movs	r2, #12
 80008c4:	2137      	movs	r1, #55	@ 0x37
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fe31 	bl	800052e <write_register>
 80008cc:	e009      	b.n	80008e2 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80008ce:	22c3      	movs	r2, #195	@ 0xc3
 80008d0:	2131      	movs	r1, #49	@ 0x31
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fe2b 	bl	800052e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80008d8:	220a      	movs	r2, #10
 80008da:	2137      	movs	r1, #55	@ 0x37
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fe26 	bl	800052e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 80008e2:	211e      	movs	r1, #30
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff fdeb 	bl	80004c0 <read_register>
 80008ea:	4603      	mov	r3, r0
 80008ec:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b25b      	sxtb	r3, r3
 8000902:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	461a      	mov	r2, r3
 8000908:	211e      	movs	r1, #30
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe0f 	bl	800052e <write_register>

  set_low_data_rate_optimization(lora);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff fecb 	bl	80006ac <set_low_data_rate_optimization>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	2120      	movs	r1, #32
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fdf9 	bl	800052e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	2121      	movs	r1, #33	@ 0x21
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fdef 	bl	800052e <write_register>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000960:	2142      	movs	r1, #66	@ 0x42
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fdac 	bl	80004c0 <read_register>
 8000968:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800097a:	2101      	movs	r1, #1
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fd9f 	bl	80004c0 <read_register>
 8000982:	4603      	mov	r3, r0
 8000984:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b03      	cmp	r3, #3
 800098e:	d101      	bne.n	8000994 <lora_is_transmitting+0x22>
 8000990:	2305      	movs	r3, #5
 8000992:	e000      	b.n	8000996 <lora_is_transmitting+0x24>
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	4611      	mov	r1, r2
 80009aa:	461a      	mov	r2, r3
 80009ac:	460b      	mov	r3, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff ffdc 	bl	8000972 <lora_is_transmitting>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80009c0:	2305      	movs	r3, #5
 80009c2:	e02a      	b.n	8000a1a <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80009c4:	2101      	movs	r1, #1
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff fe27 	bl	800061a <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 f83a 	bl	8000a46 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	7d1b      	ldrb	r3, [r3, #20]
 80009d6:	461a      	mov	r2, r3
 80009d8:	210d      	movs	r1, #13
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fda7 	bl	800052e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	7d1b      	ldrb	r3, [r3, #20]
 80009e4:	461a      	mov	r2, r3
 80009e6:	210e      	movs	r1, #14
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff fda0 	bl	800052e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	461a      	mov	r2, r3
 80009f2:	2122      	movs	r1, #34	@ 0x22
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fd9a 	bl	800052e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff fdc8 	bl	8000596 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d101      	bne.n	8000a10 <lora_send_packet_base+0x72>
    return LORA_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e004      	b.n	8000a1a <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000a10:	2103      	movs	r1, #3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fe01 	bl	800061a <set_mode>
  return LORA_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	2302      	movs	r3, #2
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff ffb1 	bl	800099e <lora_send_packet_base>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000a4e:	2208      	movs	r2, #8
 8000a50:	2112      	movs	r1, #18
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fd6b 	bl	800052e <write_register>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000a80:	6a3a      	ldr	r2, [r7, #32]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2200      	movs	r2, #0
 8000a96:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a9e:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff ff59 	bl	8000958 <lora_version>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	2b12      	cmp	r3, #18
 8000aae:	d001      	beq.n	8000ab4 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	e031      	b.n	8000b18 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f7ff fe29 	bl	800070c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fe26 	bl	800070c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000ac0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff fe9d 	bl	8000804 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000aca:	2107      	movs	r1, #7
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fedf 	bl	8000890 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff ff22 	bl	800091e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff fe2e 	bl	800073c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000ae0:	210c      	movs	r1, #12
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff fcec 	bl	80004c0 <read_register>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000aec:	7dbb      	ldrb	r3, [r7, #22]
 8000aee:	f043 0303 	orr.w	r3, r3, #3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	210c      	movs	r1, #12
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff fd18 	bl	800052e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000afe:	2204      	movs	r2, #4
 8000b00:	2126      	movs	r1, #38	@ 0x26
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fd13 	bl	800052e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000b08:	2111      	movs	r1, #17
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fe2e 	bl	800076c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff fe07 	bl	8000724 <lora_mode_standby>

  return LORA_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fa24 	bl	8000f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f835 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 f8c3 	bl	8000cb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b32:	f000 f883 	bl	8000c3c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lora_sx1276 lora;

  // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
  uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8000b36:	1d38      	adds	r0, r7, #4
 8000b38:	a315      	add	r3, pc, #84	@ (adr r3, 8000b90 <main+0x70>)
 8000b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8000b42:	2301      	movs	r3, #1
 8000b44:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <main+0x60>)
 8000b46:	490f      	ldr	r1, [pc, #60]	@ (8000b84 <main+0x64>)
 8000b48:	f7ff ff8a 	bl	8000a60 <lora_init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	77fb      	strb	r3, [r7, #31]
  if (res != LORA_OK) {
	// Initialization failed
  }

  // Send packet can be as simple as
    res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2204      	movs	r2, #4
 8000b54:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <main+0x68>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff63 	bl	8000a22 <lora_send_packet>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	77fb      	strb	r3, [r7, #31]
//	    if (res != LORA_OK) {
//	      // Receive failed
//	    }
//	    buffer[len] = 0;  // null terminate string to print it
//	    printf("'%s'\n", buffer);
	  res = lora_send_packet(&lora, (uint8_t *)"Jacob is cool", 13);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	220d      	movs	r2, #13
 8000b64:	4909      	ldr	r1, [pc, #36]	@ (8000b8c <main+0x6c>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff5b 	bl	8000a22 <lora_send_packet>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	77fb      	strb	r3, [r7, #31]
	      if (res != LORA_OK) {
	        // Send failed
	      }
	      HAL_Delay(20000);
 8000b70:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000b74:	f000 fa72 	bl	800105c <HAL_Delay>
	  res = lora_send_packet(&lora, (uint8_t *)"Jacob is cool", 13);
 8000b78:	e7f2      	b.n	8000b60 <main+0x40>
 8000b7a:	bf00      	nop
 8000b7c:	f3af 8000 	nop.w
 8000b80:	48000400 	.word	0x48000400
 8000b84:	20000028 	.word	0x20000028
 8000b88:	08003548 	.word	0x08003548
 8000b8c:	08003550 	.word	0x08003550
 8000b90:	36e55840 	.word	0x36e55840
 8000b94:	00000000 	.word	0x00000000

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b096      	sub	sp, #88	@ 0x58
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2244      	movs	r2, #68	@ 0x44
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fc96 	bl	80034d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bbe:	f000 fd77 	bl	80016b0 <HAL_PWREx_ControlVoltageScaling>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bc8:	f000 f8fa 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bd8:	2360      	movs	r3, #96	@ 0x60
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000be8:	2310      	movs	r3, #16
 8000bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fdad 	bl	800175c <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c08:	f000 f8da 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c10:	2303      	movs	r3, #3
 8000c12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f9ad 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c30:	f000 f8c6 	bl	8000dc0 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3758      	adds	r7, #88	@ 0x58
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <MX_SPI1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c72:	2218      	movs	r2, #24
 8000c74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c8a:	2207      	movs	r2, #7
 8000c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_SPI1_Init+0x74>)
 8000c9c:	f001 fb5e 	bl	800235c <HAL_SPI_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f88b 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000028 	.word	0x20000028
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b3a      	ldr	r3, [pc, #232]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a39      	ldr	r2, [pc, #228]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a33      	ldr	r2, [pc, #204]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a2d      	ldr	r2, [pc, #180]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <MX_GPIO_Init+0x100>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2109      	movs	r1, #9
 8000d1a:	4828      	ldr	r0, [pc, #160]	@ (8000dbc <MX_GPIO_Init+0x104>)
 8000d1c:	f000 fca2 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f000 fc9b 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 fb20 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000d50:	2309      	movs	r3, #9
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	4815      	ldr	r0, [pc, #84]	@ (8000dbc <MX_GPIO_Init+0x104>)
 8000d68:	f000 fb12 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d88:	f000 fb02 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f000 faf0 	bl	8001390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a18      	ldr	r2, [pc, #96]	@ (8000e94 <HAL_SPI_MspInit+0x80>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d129      	bne.n	8000e8a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8000e66:	f640 0382 	movw	r3, #2178	@ 0x882
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f000 fa83 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40013000 	.word	0x40013000
 8000e98:	40021000 	.word	0x40021000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f893 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f002 facb 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fde5 	bl	8000b20 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f64:	080035b0 	.word	0x080035b0
  ldr r2, =_sbss
 8000f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f6c:	20000090 	.word	0x20000090

08000f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f943 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff ff1a 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_InitTick+0x70>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f941 	bl	8001256 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d809      	bhi.n	8000ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f919 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_InitTick+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	2000008c 	.word	0x2000008c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000008c 	.word	0x2000008c

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_DMA_Start_IT+0x20>
 800128a:	2302      	movs	r3, #2
 800128c:	e04b      	b.n	8001326 <HAL_DMA_Start_IT+0xb8>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d13a      	bne.n	8001318 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2202      	movs	r2, #2
 80012a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f831 	bl	800132e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 020e 	orr.w	r2, r2, #14
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e00f      	b.n	8001306 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0204 	bic.w	r2, r2, #4
 80012f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 020a 	orr.w	r2, r2, #10
 8001304:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e005      	b.n	8001324 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001320:	2302      	movs	r3, #2
 8001322:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001340:	f003 021c 	and.w	r2, r3, #28
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d108      	bne.n	8001372 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001370:	e007      	b.n	8001382 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	60da      	str	r2, [r3, #12]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e148      	b.n	8001632 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 813a 	beq.w	800162c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d123      	bne.n	80014c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8094 	beq.w	800162c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	4b52      	ldr	r3, [pc, #328]	@ (8001650 <HAL_GPIO_Init+0x2c0>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001508:	4a51      	ldr	r2, [pc, #324]	@ (8001650 <HAL_GPIO_Init+0x2c0>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001510:	4b4f      	ldr	r3, [pc, #316]	@ (8001650 <HAL_GPIO_Init+0x2c0>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800151c:	4a4d      	ldr	r2, [pc, #308]	@ (8001654 <HAL_GPIO_Init+0x2c4>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1d4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a43      	ldr	r2, [pc, #268]	@ (8001658 <HAL_GPIO_Init+0x2c8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1d0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a42      	ldr	r2, [pc, #264]	@ (800165c <HAL_GPIO_Init+0x2cc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1cc>
 8001558:	2302      	movs	r3, #2
 800155a:	e004      	b.n	8001566 <HAL_GPIO_Init+0x1d6>
 800155c:	2307      	movs	r3, #7
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0x1d6>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <HAL_GPIO_Init+0x1d6>
 8001564:	2300      	movs	r3, #0
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	f002 0203 	and.w	r2, r2, #3
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	4093      	lsls	r3, r2
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001576:	4937      	ldr	r1, [pc, #220]	@ (8001654 <HAL_GPIO_Init+0x2c4>)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001584:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d2:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015fc:	4a18      	ldr	r2, [pc, #96]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_GPIO_Init+0x2d0>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f aeaf 	bne.w	80013a0 <HAL_GPIO_Init+0x10>
  }
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	48000400 	.word	0x48000400
 800165c:	48000800 	.word	0x48000800
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001680:	e002      	b.n	8001688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <HAL_PWREx_GetVoltageRange+0x18>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40007000 	.word	0x40007000

080016b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016be:	d130      	bne.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016cc:	d038      	beq.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2232      	movs	r2, #50	@ 0x32
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f4:	e002      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001708:	d102      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x60>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f2      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171c:	d110      	bne.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e00f      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800172a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172e:	d007      	beq.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001738:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800173e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000
 8001754:	20000000 	.word	0x20000000
 8001758:	431bde83 	.word	0x431bde83

0800175c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f000 bc02 	b.w	8001f74 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001770:	4b96      	ldr	r3, [pc, #600]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177a:	4b94      	ldr	r3, [pc, #592]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80e4 	beq.w	800195a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4c>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	f040 808b 	bne.w	80018b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	f040 8087 	bne.w	80018b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a8:	4b88      	ldr	r3, [pc, #544]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x64>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e3d9      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4b81      	ldr	r3, [pc, #516]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_RCC_OscConfig+0x7e>
 80017d0:	4b7e      	ldr	r3, [pc, #504]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d8:	e005      	b.n	80017e6 <HAL_RCC_OscConfig+0x8a>
 80017da:	4b7c      	ldr	r3, [pc, #496]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d223      	bcs.n	8001832 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fd54 	bl	800229c <RCC_SetFlashLatencyFromMSIRange>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e3ba      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fe:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a72      	ldr	r2, [pc, #456]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b70      	ldr	r3, [pc, #448]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	496d      	ldr	r1, [pc, #436]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181c:	4b6b      	ldr	r3, [pc, #428]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	4968      	ldr	r1, [pc, #416]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e025      	b.n	800187e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001832:	4b66      	ldr	r3, [pc, #408]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b63      	ldr	r3, [pc, #396]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4960      	ldr	r1, [pc, #384]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001850:	4b5e      	ldr	r3, [pc, #376]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	495b      	ldr	r1, [pc, #364]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fd14 	bl	800229c <RCC_SetFlashLatencyFromMSIRange>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e37a      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800187e:	f000 fc81 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b51      	ldr	r3, [pc, #324]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	4950      	ldr	r1, [pc, #320]	@ (80019d0 <HAL_RCC_OscConfig+0x274>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a4e      	ldr	r2, [pc, #312]	@ (80019d4 <HAL_RCC_OscConfig+0x278>)
 800189c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800189e:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb7e 	bl	8000fa4 <HAL_InitTick>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d052      	beq.n	8001958 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	e35e      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d032      	beq.n	8001924 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018be:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a42      	ldr	r2, [pc, #264]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fbbb 	bl	8001044 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d2:	f7ff fbb7 	bl	8001044 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e347      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e4:	4b39      	ldr	r3, [pc, #228]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f0:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a35      	ldr	r2, [pc, #212]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b33      	ldr	r3, [pc, #204]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4930      	ldr	r1, [pc, #192]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	492b      	ldr	r1, [pc, #172]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
 8001922:	e01a      	b.n	800195a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a28      	ldr	r2, [pc, #160]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001930:	f7ff fb88 	bl	8001044 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001938:	f7ff fb84 	bl	8001044 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e314      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x1dc>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d073      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b08      	cmp	r3, #8
 800196a:	d005      	beq.n	8001978 <HAL_RCC_OscConfig+0x21c>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d10e      	bne.n	8001990 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d10b      	bne.n	8001990 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d063      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2f0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d15f      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e2f1      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_OscConfig+0x24c>
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e025      	b.n	80019f4 <HAL_RCC_OscConfig+0x298>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019b0:	d114      	bne.n	80019dc <HAL_RCC_OscConfig+0x280>
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a02      	ldr	r2, [pc, #8]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e013      	b.n	80019f4 <HAL_RCC_OscConfig+0x298>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08003560 	.word	0x08003560
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004
 80019dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a9c      	ldr	r2, [pc, #624]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fb22 	bl	8001044 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fb1e 	bl	8001044 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e2ae      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	4b92      	ldr	r3, [pc, #584]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2a8>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fb0e 	bl	8001044 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fb0a 	bl	8001044 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e29a      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3e:	4b88      	ldr	r3, [pc, #544]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2d0>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d060      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_OscConfig+0x310>
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d116      	bne.n	8001a9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x328>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e277      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b76      	ldr	r3, [pc, #472]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	4973      	ldr	r1, [pc, #460]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	e040      	b.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d023      	beq.n	8001aea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fac9 	bl	8001044 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fac5 	bl	8001044 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e255      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b62      	ldr	r3, [pc, #392]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	495f      	ldr	r1, [pc, #380]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e018      	b.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b5d      	ldr	r3, [pc, #372]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff faa5 	bl	8001044 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff faa1 	bl	8001044 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e231      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b30:	4b4b      	ldr	r3, [pc, #300]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b36:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fa80 	bl	8001044 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fa7c 	bl	8001044 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e20c      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ef      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3ec>
 8001b68:	e01b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b70:	4a3b      	ldr	r2, [pc, #236]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fa63 	bl	8001044 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fa5f 	bl	8001044 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1ef      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ef      	bne.n	8001b82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80a6 	beq.w	8001cfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	4a26      	ldr	r2, [pc, #152]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bcc:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d118      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa26 	bl	8001044 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff fa22 	bl	8001044 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1b2      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4d8>
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c32:	e029      	b.n	8001c88 <HAL_RCC_OscConfig+0x52c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d115      	bne.n	8001c68 <HAL_RCC_OscConfig+0x50c>
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c42:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c5c:	e014      	b.n	8001c88 <HAL_RCC_OscConfig+0x52c>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40007000 	.word	0x40007000
 8001c68:	4b9a      	ldr	r3, [pc, #616]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6e:	4a99      	ldr	r2, [pc, #612]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c78:	4b96      	ldr	r3, [pc, #600]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a95      	ldr	r2, [pc, #596]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d016      	beq.n	8001cbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f9d8 	bl	8001044 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7ff f9d4 	bl	8001044 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e162      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cae:	4b89      	ldr	r3, [pc, #548]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ed      	beq.n	8001c98 <HAL_RCC_OscConfig+0x53c>
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f9c1 	bl	8001044 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff f9bd 	bl	8001044 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e14b      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ed      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	4a77      	ldr	r2, [pc, #476]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d10:	4b70      	ldr	r3, [pc, #448]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d16:	4a6f      	ldr	r2, [pc, #444]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f990 	bl	8001044 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d28:	f7ff f98c 	bl	8001044 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e11c      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3a:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ef      	beq.n	8001d28 <HAL_RCC_OscConfig+0x5cc>
 8001d48:	e01b      	b.n	8001d82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d4a:	4b62      	ldr	r3, [pc, #392]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d50:	4a60      	ldr	r2, [pc, #384]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f973 	bl	8001044 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d62:	f7ff f96f 	bl	8001044 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0ff      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d74:	4b57      	ldr	r3, [pc, #348]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ef      	bne.n	8001d62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80f3 	beq.w	8001f72 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f040 80c9 	bne.w	8001f28 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d96:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0203 	and.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d12c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	3b01      	subs	r3, #1
 8001db6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d123      	bne.n	8001e04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d11b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d113      	bne.n	8001e04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d06b      	beq.n	8001edc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d062      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0ac      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e26:	f7ff f90d 	bl	8001044 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f909 	bl	8001044 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e099      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_OscConfig+0x77c>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e66:	0212      	lsls	r2, r2, #8
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e6e:	0852      	lsrs	r2, r2, #1
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0552      	lsls	r2, r2, #21
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e7a:	0852      	lsrs	r2, r2, #1
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	0652      	lsls	r2, r2, #25
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e86:	06d2      	lsls	r2, r2, #27
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	4912      	ldr	r1, [pc, #72]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea8:	f7ff f8cc 	bl	8001044 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f8c8 	bl	8001044 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e058      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <HAL_RCC_OscConfig+0x778>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ece:	e050      	b.n	8001f72 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e04f      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001edc:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d144      	bne.n	8001f72 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4a20      	ldr	r2, [pc, #128]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f00:	f7ff f8a0 	bl	8001044 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f89c 	bl	8001044 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e02c      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x7ac>
 8001f26:	e024      	b.n	8001f72 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d01f      	beq.n	8001f6e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001f34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f883 	bl	8001044 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff f87f 	bl	8001044 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	4905      	ldr	r1, [pc, #20]	@ (8001f7c <HAL_RCC_OscConfig+0x820>)
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_RCC_OscConfig+0x824>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
 8001f6c:	e001      	b.n	8001f72 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	feeefffc 	.word	0xfeeefffc

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0e7      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b75      	ldr	r3, [pc, #468]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4970      	ldr	r1, [pc, #448]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0cf      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d010      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b66      	ldr	r3, [pc, #408]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d908      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b63      	ldr	r3, [pc, #396]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4960      	ldr	r1, [pc, #384]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d04c      	beq.n	800209c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b5a      	ldr	r3, [pc, #360]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d121      	bne.n	800205a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0a6      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002022:	4b54      	ldr	r3, [pc, #336]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d115      	bne.n	800205a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e09a      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800203a:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e08e      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204a:	4b4a      	ldr	r3, [pc, #296]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e086      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b46      	ldr	r3, [pc, #280]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4943      	ldr	r1, [pc, #268]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800206c:	f7fe ffea 	bl	8001044 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7fe ffe6 	bl	8001044 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e06e      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b3a      	ldr	r3, [pc, #232]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d208      	bcs.n	80020ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	492b      	ldr	r1, [pc, #172]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d210      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 0207 	bic.w	r2, r3, #7
 80020e0:	4923      	ldr	r1, [pc, #140]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_RCC_ClockConfig+0x1ec>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e036      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002106:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4918      	ldr	r1, [pc, #96]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4910      	ldr	r1, [pc, #64]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002138:	f000 f824 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	490b      	ldr	r1, [pc, #44]	@ (8002178 <HAL_RCC_ClockConfig+0x1f4>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	4a09      	ldr	r2, [pc, #36]	@ (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002156:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_RCC_ClockConfig+0x1fc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ff21 	bl	8000fa4 <HAL_InitTick>
 8002162:	4603      	mov	r3, r0
 8002164:	72fb      	strb	r3, [r7, #11]

  return status;
 8002166:	7afb      	ldrb	r3, [r7, #11]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	08003560 	.word	0x08003560
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4b3e      	ldr	r3, [pc, #248]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219c:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x34>
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d121      	bne.n	80021f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d11e      	bne.n	80021f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021b8:	4b34      	ldr	r3, [pc, #208]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021c4:	4b31      	ldr	r3, [pc, #196]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e005      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021d4:	4b2d      	ldr	r3, [pc, #180]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10d      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021fc:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x110>)
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	e004      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d101      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x114>)
 800220a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d134      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0xa6>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d003      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0xac>
 8002228:	e005      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800222a:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x110>)
 800222c:	617b      	str	r3, [r7, #20]
      break;
 800222e:	e005      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x114>)
 8002232:	617b      	str	r3, [r7, #20]
      break;
 8002234:	e002      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	617b      	str	r3, [r7, #20]
      break;
 800223a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800223c:	4b13      	ldr	r3, [pc, #76]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	3301      	adds	r3, #1
 8002248:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002262:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <HAL_RCC_GetSysClockFreq+0x108>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	0e5b      	lsrs	r3, r3, #25
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	3301      	adds	r3, #1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800227c:	69bb      	ldr	r3, [r7, #24]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	@ 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	08003570 	.word	0x08003570
 8002294:	00f42400 	.word	0x00f42400
 8002298:	007a1200 	.word	0x007a1200

0800229c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b4:	f7ff f9ee 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 80022b8:	6178      	str	r0, [r7, #20]
 80022ba:	e014      	b.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	4a24      	ldr	r2, [pc, #144]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c8:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d4:	f7ff f9de 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 80022d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ec:	d10b      	bne.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	@ 0x80
 80022f2:	d919      	bls.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80022f8:	d902      	bls.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022fa:	2302      	movs	r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e013      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e010      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b80      	cmp	r3, #128	@ 0x80
 800230a:	d902      	bls.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800230c:	2303      	movs	r3, #3
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e00a      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	@ 0x80
 8002316:	d102      	bne.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e004      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b70      	cmp	r3, #112	@ 0x70
 8002322:	d101      	bne.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 0207 	bic.w	r2, r3, #7
 8002330:	4909      	ldr	r1, [pc, #36]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	40022000 	.word	0x40022000

0800235c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e095      	b.n	800249a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800237e:	d009      	beq.n	8002394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
 8002386:	e005      	b.n	8002394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fd30 	bl	8000e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023d4:	d902      	bls.n	80023dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e002      	b.n	80023e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80023ea:	d007      	beq.n	80023fc <HAL_SPI_Init+0xa0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023f4:	d002      	beq.n	80023fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	ea42 0103 	orr.w	r1, r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	f003 0204 	and.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002478:	ea42 0103 	orr.w	r1, r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b088      	sub	sp, #32
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_SPI_Transmit+0x22>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e15f      	b.n	8002784 <HAL_SPI_Transmit+0x2e2>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024cc:	f7fe fdba 	bl	8001044 <HAL_GetTick>
 80024d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d002      	beq.n	80024e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e6:	e148      	b.n	800277a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Transmit+0x52>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f8:	e13f      	b.n	800277a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002544:	d10f      	bne.n	8002566 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002564:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b40      	cmp	r3, #64	@ 0x40
 8002572:	d007      	beq.n	8002584 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800258c:	d94f      	bls.n	800262e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0xfa>
 8002596:	8afb      	ldrh	r3, [r7, #22]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d142      	bne.n	8002622 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c0:	e02f      	b.n	8002622 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d112      	bne.n	80025f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025f4:	e015      	b.n	8002622 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f6:	f7fe fd25 	bl	8001044 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d803      	bhi.n	800260e <HAL_SPI_Transmit+0x16c>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d102      	bne.n	8002614 <HAL_SPI_Transmit+0x172>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002620:	e0ab      	b.n	800277a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ca      	bne.n	80025c2 <HAL_SPI_Transmit+0x120>
 800262c:	e080      	b.n	8002730 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Transmit+0x19a>
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d174      	bne.n	8002726 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d912      	bls.n	800266c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b02      	subs	r3, #2
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800266a:	e05c      	b.n	8002726 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002692:	e048      	b.n	8002726 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d12b      	bne.n	80026fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d912      	bls.n	80026d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	1c9a      	adds	r2, r3, #2
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b02      	subs	r3, #2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026d0:	e029      	b.n	8002726 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026f8:	e015      	b.n	8002726 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fa:	f7fe fca3 	bl	8001044 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d803      	bhi.n	8002712 <HAL_SPI_Transmit+0x270>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d102      	bne.n	8002718 <HAL_SPI_Transmit+0x276>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002724:	e029      	b.n	800277a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1b1      	bne.n	8002694 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fe89 	bl	800344c <SPI_EndRxTxTransaction>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e003      	b.n	800277a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002782:	7ffb      	ldrb	r3, [r7, #31]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d002      	beq.n	80027b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027b0:	e11a      	b.n	80029e8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027ba:	d112      	bne.n	80027e2 <HAL_SPI_Receive+0x56>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2204      	movs	r2, #4
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f90e 	bl	80029fa <HAL_SPI_TransmitReceive>
 80027de:	4603      	mov	r3, r0
 80027e0:	e107      	b.n	80029f2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_SPI_Receive+0x64>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e100      	b.n	80029f2 <HAL_SPI_Receive+0x266>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027f8:	f7fe fc24 	bl	8001044 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_Receive+0x7e>
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800280e:	e0eb      	b.n	80029e8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2204      	movs	r2, #4
 8002814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800285a:	d908      	bls.n	800286e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	e007      	b.n	800287e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800287c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002886:	d10f      	bne.n	80028a8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002896:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b40      	cmp	r3, #64	@ 0x40
 80028b4:	d007      	beq.n	80028c6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ce:	d86f      	bhi.n	80029b0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028d0:	e034      	b.n	800293c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d117      	bne.n	8002910 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f103 020c 	add.w	r2, r3, #12
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800290e:	e015      	b.n	800293c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002910:	f7fe fb98 	bl	8001044 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d803      	bhi.n	8002928 <HAL_SPI_Receive+0x19c>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d102      	bne.n	800292e <HAL_SPI_Receive+0x1a2>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800293a:	e055      	b.n	80029e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1c4      	bne.n	80028d2 <HAL_SPI_Receive+0x146>
 8002948:	e038      	b.n	80029bc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d115      	bne.n	8002984 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	b292      	uxth	r2, r2
 8002964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	1c9a      	adds	r2, r3, #2
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002982:	e015      	b.n	80029b0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002984:	f7fe fb5e 	bl	8001044 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d803      	bhi.n	800299c <HAL_SPI_Receive+0x210>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d102      	bne.n	80029a2 <HAL_SPI_Receive+0x216>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80029ae:	e01b      	b.n	80029e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1c6      	bne.n	800294a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fceb 	bl	800339c <SPI_EndRxTransaction>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
 80029de:	e003      	b.n	80029e8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b08a      	sub	sp, #40	@ 0x28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x26>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e20a      	b.n	8002e36 <HAL_SPI_TransmitReceive+0x43c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a28:	f7fe fb0c 	bl	8001044 <HAL_GetTick>
 8002a2c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a34:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a44:	7efb      	ldrb	r3, [r7, #27]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d00e      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x6e>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a50:	d106      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x66>
 8002a5a:	7efb      	ldrb	r3, [r7, #27]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002a66:	e1e0      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x80>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x80>
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002a80:	e1d3      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d003      	beq.n	8002a96 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2205      	movs	r2, #5
 8002a92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ad8:	d802      	bhi.n	8002ae0 <HAL_SPI_TransmitReceive+0xe6>
 8002ada:	8a3b      	ldrh	r3, [r7, #16]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d908      	bls.n	8002af2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	e007      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b00:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0c:	2b40      	cmp	r3, #64	@ 0x40
 8002b0e:	d007      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b28:	f240 8081 	bls.w	8002c2e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0x140>
 8002b34:	8a7b      	ldrh	r3, [r7, #18]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d16d      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3e:	881a      	ldrh	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	1c9a      	adds	r2, r3, #2
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b5e:	e05a      	b.n	8002c16 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x1ac>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_SPI_TransmitReceive+0x1ac>
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d113      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d11c      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x1f4>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	1c9a      	adds	r2, r3, #2
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bea:	2301      	movs	r3, #1
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bee:	f7fe fa29 	bl	8001044 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d80b      	bhi.n	8002c16 <HAL_SPI_TransmitReceive+0x21c>
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d007      	beq.n	8002c16 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002c14:	e109      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d19f      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x166>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d199      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x166>
 8002c2c:	e0e3      	b.n	8002df6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x244>
 8002c36:	8a7b      	ldrh	r3, [r7, #18]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 80cf 	bne.w	8002ddc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d912      	bls.n	8002c6e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	881a      	ldrh	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	1c9a      	adds	r2, r3, #2
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b02      	subs	r3, #2
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c6c:	e0b6      	b.n	8002ddc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c94:	e0a2      	b.n	8002ddc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d134      	bne.n	8002d0e <HAL_SPI_TransmitReceive+0x314>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d02f      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x314>
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d12c      	bne.n	8002d0e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d912      	bls.n	8002ce4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b02      	subs	r3, #2
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ce2:	e012      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d148      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x3b4>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d042      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d923      	bls.n	8002d7c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	b292      	uxth	r2, r2
 8002d40:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b02      	subs	r3, #2
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d81f      	bhi.n	8002daa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e016      	b.n	8002daa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f103 020c 	add.w	r2, r3, #12
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002daa:	2301      	movs	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dae:	f7fe f949 	bl	8001044 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d803      	bhi.n	8002dc6 <HAL_SPI_TransmitReceive+0x3cc>
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d102      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x3d2>
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002dda:	e026      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f47f af57 	bne.w	8002c96 <HAL_SPI_TransmitReceive+0x29c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f af50 	bne.w	8002c96 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fb26 	bl	800344c <SPI_EndRxTxTransaction>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e20:	e003      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002e32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3728      	adds	r7, #40	@ 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_SPI_Transmit_DMA+0x20>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0d4      	b.n	800300a <HAL_SPI_Transmit_DMA+0x1ca>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e78:	e0c2      	b.n	8003000 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_SPI_Transmit_DMA+0x46>
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e8a:	e0b9      	b.n	8003000 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ef6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	4a45      	ldr	r2, [pc, #276]	@ (8003014 <HAL_SPI_Transmit_DMA+0x1d4>)
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	4a44      	ldr	r2, [pc, #272]	@ (8003018 <HAL_SPI_Transmit_DMA+0x1d8>)
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	4a43      	ldr	r2, [pc, #268]	@ (800301c <HAL_SPI_Transmit_DMA+0x1dc>)
 8002f0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	2200      	movs	r2, #0
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f26:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f30:	d82d      	bhi.n	8002f8e <HAL_SPI_Transmit_DMA+0x14e>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3c:	d127      	bne.n	8002f8e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f6a:	e010      	b.n	8002f8e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f7a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f96:	4619      	mov	r1, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fa6:	f7fe f962 	bl	800126e <HAL_DMA_Start_IT>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002fc0:	e01e      	b.n	8003000 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b40      	cmp	r3, #64	@ 0x40
 8002fce:	d007      	beq.n	8002fe0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0202 	orr.w	r2, r2, #2
 8002ffe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08003103 	.word	0x08003103
 8003018:	0800305d 	.word	0x0800305d
 800301c:	0800311f 	.word	0x0800311f

08003020 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306a:	f7fd ffeb 	bl	8001044 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b20      	cmp	r3, #32
 800307c:	d03b      	beq.n	80030f6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0220 	bic.w	r2, r2, #32
 800308c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0202 	bic.w	r2, r2, #2
 800309c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	2164      	movs	r1, #100	@ 0x64
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f000 f9d2 	bl	800344c <SPI_EndRxTxTransaction>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f7ff ffaa 	bl	8003048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030f4:	e002      	b.n	80030fc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff ff92 	bl	8003020 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ff8f 	bl	8003034 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0203 	bic.w	r2, r2, #3
 800313a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff ff79 	bl	8003048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003170:	f7fd ff68 	bl	8001044 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003180:	f7fd ff60 	bl	8001044 <HAL_GetTick>
 8003184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003186:	4b39      	ldr	r3, [pc, #228]	@ (800326c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	015b      	lsls	r3, r3, #5
 800318c:	0d1b      	lsrs	r3, r3, #20
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003196:	e054      	b.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d050      	beq.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a0:	f7fd ff50 	bl	8001044 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d902      	bls.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d13d      	bne.n	8003232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ce:	d111      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d8:	d004      	beq.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e2:	d107      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031fc:	d10f      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e017      	b.n	8003262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3b01      	subs	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	429a      	cmp	r2, r3
 800325e:	d19b      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003282:	f7fd fedf 	bl	8001044 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003292:	f7fd fed7 	bl	8001044 <HAL_GetTick>
 8003296:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003398 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00da      	lsls	r2, r3, #3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	0d1b      	lsrs	r3, r3, #20
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032b8:	e060      	b.n	800337c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032c0:	d107      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d050      	beq.n	800337c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032da:	f7fd feb3 	bl	8001044 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d902      	bls.n	80032f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d13d      	bne.n	800336c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003308:	d111      	bne.n	800332e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003312:	d004      	beq.n	800331e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331c:	d107      	bne.n	800332e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800332c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003336:	d10f      	bne.n	8003358 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003356:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e010      	b.n	800338e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	3b01      	subs	r3, #1
 800337a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d196      	bne.n	80032ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3728      	adds	r7, #40	@ 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000000 	.word	0x20000000

0800339c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033b0:	d111      	bne.n	80033d6 <SPI_EndRxTransaction+0x3a>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ba:	d004      	beq.n	80033c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c4:	d107      	bne.n	80033d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2200      	movs	r2, #0
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff febd 	bl	8003160 <SPI_WaitFlagStateUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e023      	b.n	8003444 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003404:	d11d      	bne.n	8003442 <SPI_EndRxTransaction+0xa6>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800340e:	d004      	beq.n	800341a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003418:	d113      	bne.n	8003442 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff ff22 	bl	8003270 <SPI_WaitFifoStateUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e000      	b.n	8003444 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff ff03 	bl	8003270 <SPI_WaitFifoStateUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e027      	b.n	80034d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	2180      	movs	r1, #128	@ 0x80
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fe68 	bl	8003160 <SPI_WaitFlagStateUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e014      	b.n	80034d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fedc 	bl	8003270 <SPI_WaitFifoStateUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e000      	b.n	80034d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <memset>:
 80034d8:	4402      	add	r2, r0
 80034da:	4603      	mov	r3, r0
 80034dc:	4293      	cmp	r3, r2
 80034de:	d100      	bne.n	80034e2 <memset+0xa>
 80034e0:	4770      	bx	lr
 80034e2:	f803 1b01 	strb.w	r1, [r3], #1
 80034e6:	e7f9      	b.n	80034dc <memset+0x4>

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	@ (800352c <__libc_init_array+0x44>)
 80034fc:	f000 f818 	bl	8003530 <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	080035a8 	.word	0x080035a8
 8003524:	080035a8 	.word	0x080035a8
 8003528:	080035a8 	.word	0x080035a8
 800352c:	080035ac 	.word	0x080035ac

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr

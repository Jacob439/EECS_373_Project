
LoRa - L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f6c  08002f6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002f80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002f80  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000793f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001694  00000000  00000000  000279be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00029058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000666  00000000  00000000  000298e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea81  00000000  00000000  00029f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ab4  00000000  00000000  000489cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8ce1  00000000  00000000  00051483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002210  00000000  00000000  0010a164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0010c374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f0c 	.word	0x08002f0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002f0c 	.word	0x08002f0c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6858      	ldr	r0, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	8adb      	ldrh	r3, [r3, #22]
 80004ee:	2200      	movs	r2, #0
 80004f0:	4619      	mov	r1, r3
 80004f2:	f000 ff35 	bl	8001360 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6818      	ldr	r0, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	1cf9      	adds	r1, r7, #3
 8000500:	2201      	movs	r2, #1
 8000502:	f001 fe4c 	bl	800219e <HAL_SPI_Transmit>
 8000506:	4603      	mov	r3, r0
 8000508:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6818      	ldr	r0, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f107 010f 	add.w	r1, r7, #15
 8000516:	2201      	movs	r2, #1
 8000518:	f001 ffb6 	bl	8002488 <HAL_SPI_Receive>
 800051c:	4603      	mov	r3, r0
 800051e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6858      	ldr	r0, [r3, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	8adb      	ldrh	r3, [r3, #22]
 8000528:	2201      	movs	r2, #1
 800052a:	4619      	mov	r1, r3
 800052c:	f000 ff18 	bl	8001360 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000530:	7bfb      	ldrb	r3, [r7, #15]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
 8000546:	4613      	mov	r3, r2
 8000548:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800054a:	78fb      	ldrb	r3, [r7, #3]
 800054c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000550:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000552:	78bb      	ldrb	r3, [r7, #2]
 8000554:	021b      	lsls	r3, r3, #8
 8000556:	b21a      	sxth	r2, r3
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	b21b      	sxth	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b21b      	sxth	r3, r3
 8000560:	b29b      	uxth	r3, r3
 8000562:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6858      	ldr	r0, [r3, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	8adb      	ldrh	r3, [r3, #22]
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	f000 fef6 	bl	8001360 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f107 010a 	add.w	r1, r7, #10
 8000580:	2202      	movs	r2, #2
 8000582:	f001 fe0c 	bl	800219e <HAL_SPI_Transmit>
 8000586:	4603      	mov	r3, r0
 8000588:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6858      	ldr	r0, [r3, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	8adb      	ldrh	r3, [r3, #22]
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	f000 fee3 	bl	8001360 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	2101      	movs	r1, #1
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ffbd 	bl	800053a <write_register>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	2b2c      	cmp	r3, #44	; 0x2c
 80005d8:	d801      	bhi.n	80005de <set_OCP+0x16>
    imax = 45;
 80005da:	232d      	movs	r3, #45	; 0x2d
 80005dc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	2bf0      	cmp	r3, #240	; 0xf0
 80005e2:	d901      	bls.n	80005e8 <set_OCP+0x20>
    imax = 240;
 80005e4:	23f0      	movs	r3, #240	; 0xf0
 80005e6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	2b81      	cmp	r3, #129	; 0x81
 80005ec:	d809      	bhi.n	8000602 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	3b2d      	subs	r3, #45	; 0x2d
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <set_OCP+0x68>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1052      	asrs	r2, r2, #1
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e008      	b.n	8000614 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	331e      	adds	r3, #30
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <set_OCP+0x68>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	1092      	asrs	r2, r2, #2
 800060e:	17db      	asrs	r3, r3, #31
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	210b      	movs	r1, #11
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff ff8a 	bl	800053a <write_register>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	66666667 	.word	0x66666667

08000634 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800063c:	211d      	movs	r1, #29
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff44 	bl	80004cc <read_register>
 8000644:	4603      	mov	r3, r0
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2200      	movs	r2, #0
 800064e:	461c      	mov	r4, r3
 8000650:	4615      	mov	r5, r2
 8000652:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000656:	211e      	movs	r1, #30
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff37 	bl	80004cc <read_register>
 800065e:	4603      	mov	r3, r0
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000664:	2304      	movs	r3, #4
 8000666:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b0a      	cmp	r3, #10
 800066c:	d908      	bls.n	8000680 <set_low_data_rate_optimization+0x4c>
 800066e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000672:	1fd1      	subs	r1, r2, #7
 8000674:	430b      	orrs	r3, r1
 8000676:	d103      	bne.n	8000680 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000678:	7ffb      	ldrb	r3, [r7, #31]
 800067a:	f043 0308 	orr.w	r3, r3, #8
 800067e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	461a      	mov	r2, r3
 8000684:	2126      	movs	r1, #38	; 0x26
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ff57 	bl	800053a <write_register>
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bdb0      	pop	{r4, r5, r7, pc}

08000694 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800069c:	2100      	movs	r1, #0
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ff7f 	bl	80005a2 <set_mode>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80006b4:	2101      	movs	r1, #1
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff73 	bl	80005a2 <set_mode>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80006cc:	211d      	movs	r1, #29
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fefc 	bl	80004cc <read_register>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	461a      	mov	r2, r3
 80006e4:	211d      	movs	r1, #29
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff27 	bl	800053a <write_register>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10e      	bne.n	8000726 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b0f      	cmp	r3, #15
 800070c:	d901      	bls.n	8000712 <lora_set_tx_power+0x1e>
      level = 15;
 800070e:	230f      	movs	r3, #15
 8000710:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000718:	b2db      	uxtb	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	2109      	movs	r1, #9
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff0b 	bl	800053a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000724:	e02e      	b.n	8000784 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	2b14      	cmp	r3, #20
 800072a:	d901      	bls.n	8000730 <lora_set_tx_power+0x3c>
      level = 20;
 800072c:	2314      	movs	r3, #20
 800072e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d801      	bhi.n	800073a <lora_set_tx_power+0x46>
      level = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	2b11      	cmp	r3, #17
 800073e:	d90c      	bls.n	800075a <lora_set_tx_power+0x66>
      level -= 3;
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	3b03      	subs	r3, #3
 8000744:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000746:	2287      	movs	r2, #135	; 0x87
 8000748:	214d      	movs	r1, #77	; 0x4d
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fef5 	bl	800053a <write_register>
      set_OCP(lora, 140);
 8000750:	218c      	movs	r1, #140	; 0x8c
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff38 	bl	80005c8 <set_OCP>
 8000758:	e008      	b.n	800076c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800075a:	2284      	movs	r2, #132	; 0x84
 800075c:	214d      	movs	r1, #77	; 0x4d
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff feeb 	bl	800053a <write_register>
      set_OCP(lora, 97);
 8000764:	2161      	movs	r1, #97	; 0x61
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff2e 	bl	80005c8 <set_OCP>
    level -= 2;
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	3b02      	subs	r3, #2
 8000770:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	2109      	movs	r1, #9
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fedb 	bl	800053a <write_register>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	04d9      	lsls	r1, r3, #19
 80007a6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80007aa:	04d0      	lsls	r0, r2, #19
 80007ac:	4a19      	ldr	r2, [pc, #100]	; (8000814 <lora_set_frequency+0x88>)
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	f7ff fd0d 	bl	80001d0 <__aeabi_uldivmod>
 80007b6:	4602      	mov	r2, r0
 80007b8:	460b      	mov	r3, r1
 80007ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80007be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	0c02      	lsrs	r2, r0, #16
 80007cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007d0:	0c0b      	lsrs	r3, r1, #16
 80007d2:	b2d3      	uxtb	r3, r2
 80007d4:	461a      	mov	r2, r3
 80007d6:	2106      	movs	r1, #6
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff feae 	bl	800053a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80007de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	f04f 0300 	mov.w	r3, #0
 80007ea:	0a02      	lsrs	r2, r0, #8
 80007ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80007f0:	0a0b      	lsrs	r3, r1, #8
 80007f2:	b2d3      	uxtb	r3, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	2107      	movs	r1, #7
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f7ff fe9e 	bl	800053a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80007fe:	7c3b      	ldrb	r3, [r7, #16]
 8000800:	461a      	mov	r2, r3
 8000802:	2108      	movs	r1, #8
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f7ff fe98 	bl	800053a <write_register>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	01e84800 	.word	0x01e84800

08000818 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b05      	cmp	r3, #5
 8000828:	d802      	bhi.n	8000830 <lora_set_spreading_factor+0x18>
    sf = 6;
 800082a:	2306      	movs	r3, #6
 800082c:	70fb      	strb	r3, [r7, #3]
 800082e:	e004      	b.n	800083a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b0c      	cmp	r3, #12
 8000834:	d901      	bls.n	800083a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000836:	230c      	movs	r3, #12
 8000838:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2b06      	cmp	r3, #6
 800083e:	d10a      	bne.n	8000856 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000840:	22c5      	movs	r2, #197	; 0xc5
 8000842:	2131      	movs	r1, #49	; 0x31
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fe78 	bl	800053a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800084a:	220c      	movs	r2, #12
 800084c:	2137      	movs	r1, #55	; 0x37
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe73 	bl	800053a <write_register>
 8000854:	e009      	b.n	800086a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000856:	22c3      	movs	r2, #195	; 0xc3
 8000858:	2131      	movs	r1, #49	; 0x31
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fe6d 	bl	800053a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000860:	220a      	movs	r2, #10
 8000862:	2137      	movs	r1, #55	; 0x37
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fe68 	bl	800053a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800086a:	211e      	movs	r1, #30
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fe2d 	bl	80004cc <read_register>
 8000872:	4603      	mov	r3, r0
 8000874:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	b25a      	sxtb	r2, r3
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	b25b      	sxtb	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	461a      	mov	r2, r3
 8000890:	211e      	movs	r1, #30
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fe51 	bl	800053a <write_register>

  set_low_data_rate_optimization(lora);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fecb 	bl	8000634 <set_low_data_rate_optimization>
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	460b      	mov	r3, r1
 80008b0:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2120      	movs	r1, #32
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fe3b 	bl	800053a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	2121      	movs	r1, #33	; 0x21
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fe31 	bl	800053a <write_register>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80008e8:	2142      	movs	r1, #66	; 0x42
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fdee 	bl	80004cc <read_register>
 80008f0:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	887a      	ldrh	r2, [r7, #2]
 8000918:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 800091a:	6a3a      	ldr	r2, [r7, #32]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2201      	movs	r2, #1
 8000924:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2200      	movs	r2, #0
 800092a:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2200      	movs	r2, #0
 8000930:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff ffd0 	bl	80008e0 <lora_version>
 8000940:	4603      	mov	r3, r0
 8000942:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d001      	beq.n	800094e <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 800094a:	2304      	movs	r3, #4
 800094c:	e031      	b.n	80009b2 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f7ff fea0 	bl	8000694 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fe9d 	bl	8000694 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 800095a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff ff14 	bl	800078c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000964:	2107      	movs	r1, #7
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f7ff ff56 	bl	8000818 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800096c:	210a      	movs	r1, #10
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ff99 	bl	80008a6 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff fea5 	bl	80006c4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 800097a:	210c      	movs	r1, #12
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff fda5 	bl	80004cc <read_register>
 8000982:	4603      	mov	r3, r0
 8000984:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000986:	7dbb      	ldrb	r3, [r7, #22]
 8000988:	f043 0303 	orr.w	r3, r3, #3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	210c      	movs	r1, #12
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff fdd1 	bl	800053a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000998:	2204      	movs	r2, #4
 800099a:	2126      	movs	r1, #38	; 0x26
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f7ff fdcc 	bl	800053a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80009a2:	2111      	movs	r1, #17
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff fea5 	bl	80006f4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fe7e 	bl	80006ac <lora_mode_standby>

  return LORA_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	0000      	movs	r0, r0
 80009bc:	0000      	movs	r0, r0
	...

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fa06 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f81d 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 f8ab 	bl	8000b28 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009d2:	f000 f86b 	bl	8000aac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lora_sx1276 lora;

  // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
  uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US);
 80009d6:	1d38      	adds	r0, r7, #4
 80009d8:	a309      	add	r3, pc, #36	; (adr r3, 8000a00 <main+0x40>)
 80009da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009de:	e9cd 2300 	strd	r2, r3, [sp]
 80009e2:	2301      	movs	r3, #1
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <main+0x38>)
 80009e6:	4905      	ldr	r1, [pc, #20]	; (80009fc <main+0x3c>)
 80009e8:	f7ff ff87 	bl	80008fa <lora_init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	77fb      	strb	r3, [r7, #31]
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <main+0x30>
 80009f2:	bf00      	nop
 80009f4:	f3af 8000 	nop.w
 80009f8:	48000400 	.word	0x48000400
 80009fc:	20000028 	.word	0x20000028
 8000a00:	3689cac0 	.word	0x3689cac0
 8000a04:	00000000 	.word	0x00000000

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b096      	sub	sp, #88	; 0x58
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2244      	movs	r2, #68	; 0x44
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fa4c 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a2e:	f000 fcbd 	bl	80013ac <HAL_PWREx_ControlVoltageScaling>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a38:	f000 f8fa 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a48:	2360      	movs	r3, #96	; 0x60
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a50:	2301      	movs	r3, #1
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fcf3 	bl	8001458 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a78:	f000 f8da 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2303      	movs	r3, #3
 8000a82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f8f3 	bl	8001c80 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa0:	f000 f8c6 	bl	8000c30 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	; 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_SPI1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000abc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ac6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000aca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ae2:	2218      	movs	r2, #24
 8000ae4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000afa:	2207      	movs	r2, #7
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_SPI1_Init+0x74>)
 8000b0c:	f001 faa4 	bl	8002058 <HAL_SPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f88b 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000028 	.word	0x20000028
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a33      	ldr	r2, [pc, #204]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a2d      	ldr	r2, [pc, #180]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_GPIO_Init+0x100>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2109      	movs	r1, #9
 8000b8a:	4828      	ldr	r0, [pc, #160]	; (8000c2c <MX_GPIO_Init+0x104>)
 8000b8c:	f000 fbe8 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fbe1 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 fa66 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <MX_GPIO_Init+0x104>)
 8000bd8:	f000 fa58 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 fa48 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f000 fa36 	bl	800108c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d129      	bne.n	8000cfa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8000cd6:	f640 0382 	movw	r3, #2178	; 0x882
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce8:	2305      	movs	r3, #5
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 f9c9 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40021000 	.word	0x40021000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f892 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 f887 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fe03 	bl	80009c0 <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc8:	08002f74 	.word	0x08002f74
  ldr r2, =_sbss
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd0:	20000090 	.word	0x20000090

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>

08000dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f91f 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f80e 	bl	8000e08 <HAL_InitTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e001      	b.n	8000dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df8:	f7ff ff20 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d023      	beq.n	8000e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_InitTick+0x70>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f91d 	bl	8001072 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d809      	bhi.n	8000e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f8f5 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_InitTick+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e001      	b.n	8000e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	2000008c 	.word	0x2000008c

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000008c 	.word	0x2000008c

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5c 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb0 	bl	8000fe0 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e148      	b.n	800132e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 813a 	beq.w	8001328 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d017      	beq.n	800116a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0203 	and.w	r2, r3, #3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8094 	beq.w	8001328 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b52      	ldr	r3, [pc, #328]	; (800134c <HAL_GPIO_Init+0x2c0>)
 8001202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001204:	4a51      	ldr	r2, [pc, #324]	; (800134c <HAL_GPIO_Init+0x2c0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6613      	str	r3, [r2, #96]	; 0x60
 800120c:	4b4f      	ldr	r3, [pc, #316]	; (800134c <HAL_GPIO_Init+0x2c0>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x2c4>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1d4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1d0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a42      	ldr	r2, [pc, #264]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1cc>
 8001254:	2302      	movs	r3, #2
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1d6>
 8001258:	2307      	movs	r3, #7
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1d6>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1d6>
 8001260:	2300      	movs	r3, #0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001272:	4937      	ldr	r1, [pc, #220]	; (8001350 <HAL_GPIO_Init+0x2c4>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a4:	4a2d      	ldr	r2, [pc, #180]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f8:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f aeaf 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800137c:	e002      	b.n	8001384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000

080013ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ba:	d130      	bne.n	800141e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c8:	d038      	beq.n	800143c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2232      	movs	r2, #50	; 0x32
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	3301      	adds	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f0:	e002      	b.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001404:	d102      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f2      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001418:	d110      	bne.n	800143c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e00f      	b.n	800143e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142a:	d007      	beq.n	800143c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001434:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40007000 	.word	0x40007000
 8001450:	20000000 	.word	0x20000000
 8001454:	431bde83 	.word	0x431bde83

08001458 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	f000 bc02 	b.w	8001c70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001476:	4b94      	ldr	r3, [pc, #592]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80e4 	beq.w	8001656 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_RCC_OscConfig+0x4c>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	f040 808b 	bne.w	80015b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	f040 8087 	bne.w	80015b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a4:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x64>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e3d9      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <HAL_RCC_OscConfig+0x7e>
 80014cc:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d4:	e005      	b.n	80014e2 <HAL_RCC_OscConfig+0x8a>
 80014d6:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d223      	bcs.n	800152e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd54 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e3ba      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a72      	ldr	r2, [pc, #456]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	496d      	ldr	r1, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001518:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	4968      	ldr	r1, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e025      	b.n	800157a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152e:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4960      	ldr	r1, [pc, #384]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	495b      	ldr	r1, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fd14 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e37a      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800157a:	f000 fc81 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800157e:	4602      	mov	r2, r0
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	4950      	ldr	r1, [pc, #320]	; (80016cc <HAL_RCC_OscConfig+0x274>)
 800158c:	5ccb      	ldrb	r3, [r1, r3]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <HAL_RCC_OscConfig+0x278>)
 8001598:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCC_OscConfig+0x27c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc32 	bl	8000e08 <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d052      	beq.n	8001654 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	e35e      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d032      	beq.n	8001620 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ba:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fc6f 	bl	8000ea8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc6b 	bl	8000ea8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e347      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a35      	ldr	r2, [pc, #212]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4930      	ldr	r1, [pc, #192]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	492b      	ldr	r1, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
 800161e:	e01a      	b.n	8001656 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162c:	f7ff fc3c 	bl	8000ea8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fc38 	bl	8000ea8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e314      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1dc>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d073      	beq.n	800174a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x21c>
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10e      	bne.n	800168c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d10b      	bne.n	800168c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d063      	beq.n	8001748 <HAL_RCC_OscConfig+0x2f0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d15f      	bne.n	8001748 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e2f1      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x24c>
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e025      	b.n	80016f0 <HAL_RCC_OscConfig+0x298>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d114      	bne.n	80016d8 <HAL_RCC_OscConfig+0x280>
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e013      	b.n	80016f0 <HAL_RCC_OscConfig+0x298>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08002f24 	.word	0x08002f24
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004
 80016d8:	4ba0      	ldr	r3, [pc, #640]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a9f      	ldr	r2, [pc, #636]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b9d      	ldr	r3, [pc, #628]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a9c      	ldr	r2, [pc, #624]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fbd6 	bl	8000ea8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fbd2 	bl	8000ea8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e2ae      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001712:	4b92      	ldr	r3, [pc, #584]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x2a8>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fbc2 	bl	8000ea8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fbbe 	bl	8000ea8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e29a      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800173a:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x2d0>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d060      	beq.n	8001818 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d005      	beq.n	8001768 <HAL_RCC_OscConfig+0x310>
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d119      	bne.n	8001796 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d116      	bne.n	8001796 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_OscConfig+0x328>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e277      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	4973      	ldr	r1, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001794:	e040      	b.n	8001818 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d023      	beq.n	80017e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179e:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6e      	ldr	r2, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb7d 	bl	8000ea8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb79 	bl	8000ea8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e255      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	495f      	ldr	r1, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	e018      	b.n	8001818 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a5c      	ldr	r2, [pc, #368]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80017ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fb59 	bl	8000ea8 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fb55 	bl	8000ea8 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e231      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03c      	beq.n	800189e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01c      	beq.n	8001866 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fb34 	bl	8000ea8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fb30 	bl	8000ea8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e20c      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ef      	beq.n	8001844 <HAL_RCC_OscConfig+0x3ec>
 8001864:	e01b      	b.n	800189e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186c:	4a3b      	ldr	r2, [pc, #236]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff fb17 	bl	8000ea8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fb13 	bl	8000ea8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1ef      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80a6 	beq.w	80019f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10d      	bne.n	80018d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6593      	str	r3, [r2, #88]	; 0x58
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x504>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d4:	2301      	movs	r3, #1
 80018d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_RCC_OscConfig+0x508>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d118      	bne.n	8001916 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_OscConfig+0x508>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_RCC_OscConfig+0x508>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fada 	bl	8000ea8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f8:	f7ff fad6 	bl	8000ea8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1b2      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x508>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d108      	bne.n	8001930 <HAL_RCC_OscConfig+0x4d8>
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192e:	e029      	b.n	8001984 <HAL_RCC_OscConfig+0x52c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d115      	bne.n	8001964 <HAL_RCC_OscConfig+0x50c>
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <HAL_RCC_OscConfig+0x504>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x504>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x52c>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40007000 	.word	0x40007000
 8001964:	4b9a      	ldr	r3, [pc, #616]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196a:	4a99      	ldr	r2, [pc, #612]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001974:	4b96      	ldr	r3, [pc, #600]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	4a95      	ldr	r2, [pc, #596]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d016      	beq.n	80019ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fa8c 	bl	8000ea8 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff fa88 	bl	8000ea8 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e162      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ed      	beq.n	8001994 <HAL_RCC_OscConfig+0x53c>
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa75 	bl	8000ea8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fa71 	bl	8000ea8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e14b      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d8:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ed      	bne.n	80019c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e6:	7ffb      	ldrb	r3, [r7, #31]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ec:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 80019f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a0c:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a12:	4a6f      	ldr	r2, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fa44 	bl	8000ea8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a24:	f7ff fa40 	bl	8000ea8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e11c      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a36:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x5cc>
 8001a44:	e01b      	b.n	8001a7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a4c:	4a60      	ldr	r2, [pc, #384]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa27 	bl	8000ea8 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5e:	f7ff fa23 	bl	8000ea8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0ff      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80f3 	beq.w	8001c6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 80c9 	bne.w	8001c24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a92:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0203 	and.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d12c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d123      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d11b      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d113      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d06b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d062      	beq.n	8001bcc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b06:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0ac      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a2d      	ldr	r2, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b22:	f7ff f9c1 	bl	8000ea8 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f9bd 	bl	8000ea8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e099      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_RCC_OscConfig+0x77c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b62:	0212      	lsls	r2, r2, #8
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b6a:	0852      	lsrs	r2, r2, #1
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0552      	lsls	r2, r2, #21
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b76:	0852      	lsrs	r2, r2, #1
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	0652      	lsls	r2, r2, #25
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b82:	06d2      	lsls	r2, r2, #27
 8001b84:	430a      	orrs	r2, r1
 8001b86:	4912      	ldr	r1, [pc, #72]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba4:	f7ff f980 	bl	8000ea8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f97c 	bl	8000ea8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e058      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_RCC_OscConfig+0x778>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bca:	e050      	b.n	8001c6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e04f      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d144      	bne.n	8001c6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bfc:	f7ff f954 	bl	8000ea8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f950 	bl	8000ea8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e02c      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x7ac>
 8001c22:	e024      	b.n	8001c6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d01f      	beq.n	8001c6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff f937 	bl	8000ea8 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff f933 	bl	8000ea8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4905      	ldr	r1, [pc, #20]	; (8001c78 <HAL_RCC_OscConfig+0x820>)
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x824>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
 8001c68:	e001      	b.n	8001c6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	feeefffc 	.word	0xfeeefffc

08001c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0e7      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d910      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4970      	ldr	r1, [pc, #448]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cf      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d908      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4960      	ldr	r1, [pc, #384]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d04c      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0a6      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e09a      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d36:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e08e      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e086      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4943      	ldr	r1, [pc, #268]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d68:	f7ff f89e 	bl	8000ea8 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f89a 	bl	8000ea8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e06e      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d208      	bcs.n	8001dc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	492b      	ldr	r1, [pc, #172]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d210      	bcs.n	8001df6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4923      	ldr	r1, [pc, #140]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e036      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4918      	ldr	r1, [pc, #96]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4910      	ldr	r1, [pc, #64]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e34:	f000 f824 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	490b      	ldr	r1, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1f4>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1fc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ffd5 	bl	8000e08 <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e62:	7afb      	ldrb	r3, [r7, #11]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08002f24 	.word	0x08002f24
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d121      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d11e      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb4:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e005      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001edc:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e004      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d134      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d003      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0xac>
 8001f24:	e005      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f28:	617b      	str	r3, [r7, #20]
      break;
 8001f2a:	e005      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f2e:	617b      	str	r3, [r7, #20]
      break;
 8001f30:	e002      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	617b      	str	r3, [r7, #20]
      break;
 8001f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	3301      	adds	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	fb03 f202 	mul.w	r2, r3, r2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	0e5b      	lsrs	r3, r3, #25
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f78:	69bb      	ldr	r3, [r7, #24]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08002f34 	.word	0x08002f34
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fb0:	f7ff f9ee 	bl	8001390 <HAL_PWREx_GetVoltageRange>
 8001fb4:	6178      	str	r0, [r7, #20]
 8001fb6:	e014      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff f9de 	bl	8001390 <HAL_PWREx_GetVoltageRange>
 8001fd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe8:	d10b      	bne.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d919      	bls.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ff4:	d902      	bls.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e013      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e010      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d902      	bls.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002008:	2303      	movs	r3, #3
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e00a      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d102      	bne.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002014:	2302      	movs	r3, #2
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e004      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b70      	cmp	r3, #112	; 0x70
 800201e:	d101      	bne.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002020:	2301      	movs	r3, #1
 8002022:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 0207 	bic.w	r2, r3, #7
 800202c:	4909      	ldr	r1, [pc, #36]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e095      	b.n	8002196 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800207a:	d009      	beq.n	8002090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
 8002082:	e005      	b.n	8002090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fdea 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020d0:	d902      	bls.n	80020d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e002      	b.n	80020de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80020e6:	d007      	beq.n	80020f8 <HAL_SPI_Init+0xa0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020f0:	d002      	beq.n	80020f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	ea42 0103 	orr.w	r1, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	0c1b      	lsrs	r3, r3, #16
 8002154:	f003 0204 	and.w	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002174:	ea42 0103 	orr.w	r1, r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b088      	sub	sp, #32
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_SPI_Transmit+0x22>
 80021bc:	2302      	movs	r3, #2
 80021be:	e15f      	b.n	8002480 <HAL_SPI_Transmit+0x2e2>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021c8:	f7fe fe6e 	bl	8000ea8 <HAL_GetTick>
 80021cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021e2:	e148      	b.n	8002476 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Transmit+0x52>
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021f4:	e13f      	b.n	8002476 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002240:	d10f      	bne.n	8002262 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002260:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d007      	beq.n	8002280 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002288:	d94f      	bls.n	800232a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_SPI_Transmit+0xfa>
 8002292:	8afb      	ldrh	r3, [r7, #22]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d142      	bne.n	800231e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022bc:	e02f      	b.n	800231e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d112      	bne.n	80022f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	1c9a      	adds	r2, r3, #2
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022f0:	e015      	b.n	800231e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f2:	f7fe fdd9 	bl	8000ea8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d803      	bhi.n	800230a <HAL_SPI_Transmit+0x16c>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d102      	bne.n	8002310 <HAL_SPI_Transmit+0x172>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800231c:	e0ab      	b.n	8002476 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ca      	bne.n	80022be <HAL_SPI_Transmit+0x120>
 8002328:	e080      	b.n	800242c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x19a>
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d174      	bne.n	8002422 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d912      	bls.n	8002368 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	1c9a      	adds	r2, r3, #2
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b02      	subs	r3, #2
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002366:	e05c      	b.n	8002422 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800238e:	e048      	b.n	8002422 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d12b      	bne.n	80023f6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d912      	bls.n	80023ce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b02      	subs	r3, #2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023cc:	e029      	b.n	8002422 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023f4:	e015      	b.n	8002422 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f6:	f7fe fd57 	bl	8000ea8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d803      	bhi.n	800240e <HAL_SPI_Transmit+0x270>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d102      	bne.n	8002414 <HAL_SPI_Transmit+0x276>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002420:	e029      	b.n	8002476 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1b1      	bne.n	8002390 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fcf9 	bl	8002e28 <SPI_EndRxTxTransaction>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	77fb      	strb	r3, [r7, #31]
 800246c:	e003      	b.n	8002476 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800247e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024ac:	e11a      	b.n	80026e4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b6:	d112      	bne.n	80024de <HAL_SPI_Receive+0x56>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10e      	bne.n	80024de <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2204      	movs	r2, #4
 80024c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f90e 	bl	80026f6 <HAL_SPI_TransmitReceive>
 80024da:	4603      	mov	r3, r0
 80024dc:	e107      	b.n	80026ee <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_SPI_Receive+0x64>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e100      	b.n	80026ee <HAL_SPI_Receive+0x266>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024f4:	f7fe fcd8 	bl	8000ea8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_Receive+0x7e>
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800250a:	e0eb      	b.n	80026e4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2204      	movs	r2, #4
 8002510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002556:	d908      	bls.n	800256a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	e007      	b.n	800257a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002578:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002582:	d10f      	bne.n	80025a4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d007      	beq.n	80025c2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ca:	d86f      	bhi.n	80026ac <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025cc:	e034      	b.n	8002638 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d117      	bne.n	800260c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f103 020c 	add.w	r2, r3, #12
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800260a:	e015      	b.n	8002638 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800260c:	f7fe fc4c 	bl	8000ea8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d803      	bhi.n	8002624 <HAL_SPI_Receive+0x19c>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d102      	bne.n	800262a <HAL_SPI_Receive+0x1a2>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002636:	e055      	b.n	80026e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1c4      	bne.n	80025ce <HAL_SPI_Receive+0x146>
 8002644:	e038      	b.n	80026b8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d115      	bne.n	8002680 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	b292      	uxth	r2, r2
 8002660:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	1c9a      	adds	r2, r3, #2
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800267e:	e015      	b.n	80026ac <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002680:	f7fe fc12 	bl	8000ea8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d803      	bhi.n	8002698 <HAL_SPI_Receive+0x210>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002696:	d102      	bne.n	800269e <HAL_SPI_Receive+0x216>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80026aa:	e01b      	b.n	80026e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1c6      	bne.n	8002646 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fb5b 	bl	8002d78 <SPI_EndRxTransaction>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	e003      	b.n	80026e4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08a      	sub	sp, #40	; 0x28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_SPI_TransmitReceive+0x26>
 8002718:	2302      	movs	r3, #2
 800271a:	e20a      	b.n	8002b32 <HAL_SPI_TransmitReceive+0x43c>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002724:	f7fe fbc0 	bl	8000ea8 <HAL_GetTick>
 8002728:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002730:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002740:	7efb      	ldrb	r3, [r7, #27]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d00e      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x6e>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800274c:	d106      	bne.n	800275c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_SPI_TransmitReceive+0x66>
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d003      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002762:	e1e0      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x80>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x80>
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800277c:	e1d3      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b04      	cmp	r3, #4
 8002788:	d003      	beq.n	8002792 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2205      	movs	r2, #5
 800278e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027d4:	d802      	bhi.n	80027dc <HAL_SPI_TransmitReceive+0xe6>
 80027d6:	8a3b      	ldrh	r3, [r7, #16]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d908      	bls.n	80027ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e007      	b.n	80027fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d007      	beq.n	800281c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002824:	f240 8081 	bls.w	800292a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_SPI_TransmitReceive+0x140>
 8002830:	8a7b      	ldrh	r3, [r7, #18]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d16d      	bne.n	8002912 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	1c9a      	adds	r2, r3, #2
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285a:	e05a      	b.n	8002912 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d11b      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x1ac>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x1ac>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	2b01      	cmp	r3, #1
 8002878:	d113      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	1c9a      	adds	r2, r3, #2
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d11c      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x1f4>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	b292      	uxth	r2, r2
 80028c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	1c9a      	adds	r2, r3, #2
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028e6:	2301      	movs	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028ea:	f7fe fadd 	bl	8000ea8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d80b      	bhi.n	8002912 <HAL_SPI_TransmitReceive+0x21c>
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d007      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002910:	e109      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d19f      	bne.n	800285c <HAL_SPI_TransmitReceive+0x166>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d199      	bne.n	800285c <HAL_SPI_TransmitReceive+0x166>
 8002928:	e0e3      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_SPI_TransmitReceive+0x244>
 8002932:	8a7b      	ldrh	r3, [r7, #18]
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 80cf 	bne.w	8002ad8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d912      	bls.n	800296a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	1c9a      	adds	r2, r3, #2
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b02      	subs	r3, #2
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002968:	e0b6      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002990:	e0a2      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d134      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x314>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02f      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x314>
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d12c      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d912      	bls.n	80029e0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b02      	subs	r3, #2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029de:	e012      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d148      	bne.n	8002aaa <HAL_SPI_TransmitReceive+0x3b4>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d042      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d923      	bls.n	8002a78 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b02      	subs	r3, #2
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d81f      	bhi.n	8002aa6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	e016      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f103 020c 	add.w	r2, r3, #12
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aaa:	f7fe f9fd 	bl	8000ea8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d803      	bhi.n	8002ac2 <HAL_SPI_TransmitReceive+0x3cc>
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x3d2>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002ad6:	e026      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f af57 	bne.w	8002992 <HAL_SPI_TransmitReceive+0x29c>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f af50 	bne.w	8002992 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f996 	bl	8002e28 <SPI_EndRxTxTransaction>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b1c:	e003      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b4c:	f7fe f9ac 	bl	8000ea8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b5c:	f7fe f9a4 	bl	8000ea8 <HAL_GetTick>
 8002b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	0d1b      	lsrs	r3, r3, #20
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	e054      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d050      	beq.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b7c:	f7fe f994 	bl	8000ea8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d902      	bls.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13d      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d111      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d004      	beq.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d107      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d10f      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e017      	b.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d19b      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c5e:	f7fe f923 	bl	8000ea8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c6e:	f7fe f91b 	bl	8000ea8 <HAL_GetTick>
 8002c72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c7c:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00da      	lsls	r2, r3, #3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	0d1b      	lsrs	r3, r3, #20
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c94:	e060      	b.n	8002d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c9c:	d107      	bne.n	8002cae <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d050      	beq.n	8002d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cb6:	f7fe f8f7 	bl	8000ea8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d902      	bls.n	8002ccc <SPI_WaitFifoStateUntilTimeout+0x80>
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d13d      	bne.n	8002d48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce4:	d111      	bne.n	8002d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cee:	d004      	beq.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d107      	bne.n	8002d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d10f      	bne.n	8002d34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e010      	b.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d196      	bne.n	8002c96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000

08002d78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8c:	d111      	bne.n	8002db2 <SPI_EndRxTransaction+0x3a>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d96:	d004      	beq.n	8002da2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da0:	d107      	bne.n	8002db2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff febd 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e023      	b.n	8002e20 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de0:	d11d      	bne.n	8002e1e <SPI_EndRxTransaction+0xa6>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dea:	d004      	beq.n	8002df6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	d113      	bne.n	8002e1e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff ff22 	bl	8002c4c <SPI_WaitFifoStateUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e000      	b.n	8002e20 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff03 	bl	8002c4c <SPI_WaitFifoStateUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e027      	b.n	8002eac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fe68 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e014      	b.n	8002eac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff fedc 	bl	8002c4c <SPI_WaitFifoStateUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e000      	b.n	8002eac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <memset>:
 8002eb4:	4402      	add	r2, r0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4d0d      	ldr	r5, [pc, #52]	; (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2600      	movs	r6, #0
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4d0b      	ldr	r5, [pc, #44]	; (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	; (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 f818 	bl	8002f0c <_init>
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08002f6c 	.word	0x08002f6c
 8002f00:	08002f6c 	.word	0x08002f6c
 8002f04:	08002f6c 	.word	0x08002f6c
 8002f08:	08002f70 	.word	0x08002f70

08002f0c <_init>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr

08002f18 <_fini>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr
